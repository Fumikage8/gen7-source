gfenvをgfbenvにコンバートするツール「EnvConverter」


////////////////////////////////////////////////////////////////////////////////
履歴

↑最近

2015.05.13  kawada_koji@gamefreak.co.jp
    バージョン1.0作成

2015.04.30  kawada_koji@gamefreak.co.jp
    バージョン0.1作成

2015.04.15  kawada_koji@gamefreak.co.jp
    バージョン0.0作成

↓昔


////////////////////////////////////////////////////////////////////////////////
使い方
EnvConverter.exe -i inFileName -o outFileName

例
EnvConverter.exe -i dirBbb/dirCcc/fileAaa.gfenv -o dirDdd/dirEee/fileAaa.gfbenv

Win32版とCTR版の区別はありません。


////////////////////////////////////////////////////////////////////////////////
EnvConverter.slnの開き方
EnvConverter.batで開く。


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
gfbenvバージョン1.0の説明

gfbenvのバージョン1.0
gfenvのバージョン0.8か1.0
gfbenvの日付バージョン0x15051320＜表記に使うバージョンはこれ＞

中身
========================================
GFBENV00  シグネチャ(8バイト)
00  gfbenvのメジャーバージョン(u16, 2バイト)
00  gfbenvのマイナーバージョン(u16, 2バイト)
00  gfenvのメジャーバージョン(u16, 2バイト)
00  gfenvのマイナーバージョン(u16, 2バイト)
0000  gfbenvの日付バージョン(u32, 4バイト)

00  EnvTextureDataの個数o(u16, 2バイト)
00  LightSetの個数n(u16, 2バイト)
00  Cameraの個数m(u16, 2バイト)
00  パディング(2バイト)

DrawEnvの開始位置(このファイルの先頭から何バイト目か)(u32, 4バイト)
EnvTextureDataの開始位置(u32, 4バイト)          ←【EnvTextureDataの個数oが0のときはない】
LightSet[0]の開始位置(u32, 4バイト)             ←【LightSetの個数nが0のときはない】
LightSet[1]の開始位置(u32, 4バイト)
...
LightSet[n-1]の開始位置(u32, 4バイト)
Camera[0]の開始位置(u32, 4バイト)               ←【Cameraの個数mが0のときはない】
Camera[1]の開始位置(u32, 4バイト)
...
Camera[m-1]の開始位置(u32, 4バイト)

DrawEnvのバイト数(u32, 4バイト)
EnvTextureDataのバイト数(u32, 4バイト)          ←【EnvTextureDataの個数oが0のときはない】
LightSet[0]のバイト数(u32, 4バイト)             ←【LightSetの個数nが0のときはない】
LightSet[1]のバイト数(u32, 4バイト)
...
LightSet[n-1]のバイト数(u32, 4バイト)
Camera[0]のバイト数(u32, 4バイト)               ←【Cameraの個数mが0のときはない】
Camera[1]のバイト数(u32, 4バイト)
...
Camera[m-1]のバイト数(u32, 4バイト)

DrawEnvのバイナリデータ
【4バイトの倍数になっていなかったらパディング】
EnvTextureDataのバイナリデータ                  ←【EnvTextureDataの個数oが0のときはない】
【4バイトの倍数になっていなかったらパディング】
LightSet[0]のバイナリデータ                     ←【LightSetの個数nが0のときはない】
【4バイトの倍数になっていなかったらパディング】
LightSet[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
LightSet[n-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
Camera[0]のバイナリデータ                       ←【Cameraの個数mが0のときはない】
【4バイトの倍数になっていなかったらパディング】
Camera[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
Camera[m-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
========================================

4バイトアラインメント。
＜描画物があるわけではないので、アラインメントは気にしなくていいが、4バイトにしておいた。＞

リトルエンディアンかどうかは使わせてもらっている
R:\home\niji\git_program\gflib2\RenderingEngine\include\SceneGraph\Resource\gfl2_GfEnvData.h
次第なので、リトルエンディアン。
＜将来的にはエンディアン情報も埋め込み、対応できるようにするかも。
　しかし、その場合は使わせてもらっているgfl2_GfEnvData.hのバイナリ化コードのエンディアンも気にしなければならないし、
　このデータを解釈するところも各エンディアンに対応しなければならなくなる。＞

EnvTextureDataがあるときは、Win32版とCTR版で埋め込むテクスチャが異なると思われる。
その対応は、使わせてもらっているgfl2_GfEnvData.h次第だが、
本バージョンをつくっている2015.05.13現在、gfl2_GfEnvData.hはCTR版でEnvTextureDataを持てるようにはなっていない。


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
gfbenvバージョン0.1の説明

gfbenvのバージョン0.1
gfenvのバージョン0.8
gfbenvの日付バージョン0x15043011＜表記に使うバージョンはこれ＞

中身
========================================
GFBENV00  シグネチャ(8バイト)
00  gfbenvのメジャーバージョン(u16, 2バイト)
00  gfbenvのマイナーバージョン(u16, 2バイト)
00  gfenvのメジャーバージョン(u16, 2バイト)
00  gfenvのマイナーバージョン(u16, 2バイト)
0000  gfbenvの日付バージョン(u32, 4バイト)

00  EnvTextureDataの個数o(u16, 2バイト)
00  LightSetの個数n(u16, 2バイト)
00  Cameraの個数m(u16, 2バイト)
00  パディング(2バイト)

DrawEnvの開始位置(このファイルの先頭から何バイト目か)(u32, 4バイト)
EnvTextureDataの開始位置(u32, 4バイト)          ←【EnvTextureDataの個数oが0のときはない】
LightSet[0]の開始位置(u32, 4バイト)             ←【LightSetの個数nが0のときはない】
LightSet[1]の開始位置(u32, 4バイト)
...
LightSet[n-1]の開始位置(u32, 4バイト)
Camera[0]の開始位置(u32, 4バイト)               ←【Cameraの個数mが0のときはない】
Camera[1]の開始位置(u32, 4バイト)
...
Camera[m-1]の開始位置(u32, 4バイト)

DrawEnvのバイト数(u32, 4バイト)
EnvTextureDataのバイト数(u32, 4バイト)          ←【EnvTextureDataの個数oが0のときはない】
LightSet[0]のバイト数(u32, 4バイト)             ←【LightSetの個数nが0のときはない】
LightSet[1]のバイト数(u32, 4バイト)
...
LightSet[n-1]のバイト数(u32, 4バイト)
Camera[0]のバイト数(u32, 4バイト)               ←【Cameraの個数mが0のときはない】
Camera[1]のバイト数(u32, 4バイト)
...
Camera[m-1]のバイト数(u32, 4バイト)

DrawEnvのバイナリデータ
【4バイトの倍数になっていなかったらパディング】
EnvTextureDataのバイナリデータ                  ←【EnvTextureDataの個数oが0のときはない】
【4バイトの倍数になっていなかったらパディング】
LightSet[0]のバイナリデータ                     ←【LightSetの個数nが0のときはない】
【4バイトの倍数になっていなかったらパディング】
LightSet[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
LightSet[n-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
Camera[0]のバイナリデータ                       ←【Cameraの個数mが0のときはない】
【4バイトの倍数になっていなかったらパディング】
Camera[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
Camera[m-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
========================================

4バイトアラインメント。
＜描画物があるわけではないので、アラインメントは気にしなくていいが、4バイトにしておいた。＞

リトルエンディアンかどうかは使わせてもらっている
R:\home\niji\git_program\gflib2\RenderingEngine\include\SceneGraph\Resource\gfl2_GfEnvData.h
次第なので、リトルエンディアン。
＜将来的にはエンディアン情報も埋め込み、対応できるようにするかも。
　しかし、その場合は使わせてもらっているgfl2_GfEnvData.hのバイナリ化コードのエンディアンも気にしなければならないし、
　このデータを解釈するところも各エンディアンに対応しなければならなくなる。＞

EnvTextureDataがあるときは、Win32版とCTR版で埋め込むテクスチャが異なると思われる。
その対応は、使わせてもらっているgfl2_GfEnvData.h次第だが、
本バージョンをつくっている2015.04.30現在、gfl2_GfEnvData.hはCTR版でEnvTextureDataを持てるようにはなっていない。


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
gfbenvバージョン0.0の説明

gfbenvのバージョン0.0
gfenvのバージョン0.8
gfbenvの日付バージョン0x15041520＜表記に使うバージョンはこれ＞

中身
========================================
GFBENV00  シグネチャ(8バイト)
00  gfbenvのメジャーバージョン(u16, 2バイト)
00  gfbenvのマイナーバージョン(u16, 2バイト)
00  gfenvのメジャーバージョン(u16, 2バイト)
00  gfenvのマイナーバージョン(u16, 2バイト)
0000  gfbenvの日付バージョン(u32, 4バイト)

00  LightSetの個数n(u16, 2バイト)
00  Cameraの個数m(u16, 2バイト)

DrawEnvの開始位置(このファイルの先頭から何バイト目か)(u32, 4バイト)
EnvTextureDataの開始位置(u32, 4バイト)
LightSet[0]の開始位置(u32, 4バイト)
LightSet[1]の開始位置(u32, 4バイト)
...
LightSet[n-1]の開始位置(u32, 4バイト)
Camera[0]の開始位置(u32, 4バイト)
Camera[1]の開始位置(u32, 4バイト)
...
Camera[m-1]の開始位置(u32, 4バイト)

DrawEnvのバイト数(u32, 4バイト)
EnvTextureDataのバイト数(u32, 4バイト)
LightSet[0]のバイト数(u32, 4バイト)
LightSet[1]のバイト数(u32, 4バイト)
...
LightSet[n-1]のバイト数(u32, 4バイト)
Camera[0]のバイト数(u32, 4バイト)
Camera[1]のバイト数(u32, 4バイト)
...
Camera[m-1]のバイト数(u32, 4バイト)

DrawEnvのバイナリデータ
【4バイトの倍数になっていなかったらパディング】
EnvTextureDataのバイナリデータ
【4バイトの倍数になっていなかったらパディング】
LightSet[0]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
LightSet[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
LightSet[n-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
Camera[0]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
Camera[1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
...
Camera[m-1]のバイナリデータ
【4バイトの倍数になっていなかったらパディング】
========================================

4バイトアラインメント。
＜描画物があるわけではないので、アラインメントは気にしなくていいが、4バイトにしておいた。＞

リトルエンディアンかどうかは使わせてもらっている
R:\home\niji\git_program\gflib2\RenderingEngine\include\SceneGraph\Resource\gfl2_GfEnvData.h
次第なので、リトルエンディアン。
＜将来的にはエンディアン情報も埋め込み、対応できるようにするかも。
　しかし、その場合は使わせてもらっているgfl2_GfEnvData.hのバイナリ化コードのエンディアンも気にしなければならないし、
　このデータを解釈するところも各エンディアンに対応しなければならなくなる。＞


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
EnvConverterソリューションのつくり方


1 コピー
R:\home\niji\git_program\gflib2\Animation\Sample
をコピーし、Sample.slnを開く。
これを選んだ理由は、gfenvを読み込んでいるSample/DrawEnvAnimationプロジェクトがあるから。
ちなみに、Sample.slnはAnimation.batで開く。


2 削除
Visual Studio 2012内で
Sample.slnをEnvConverter.slnにリネーム。

gflib2ソリューションフォルダ以外の全てのプロジェクト、ソリューションフォルダを削除。

R:\home\niji\git_program\gflib2\Animation\Sampleをコピーしてつくったフォルダ内の
実際のプロジェクトフォルダも不要になったものは削除。


3 既存物の追加
gflib2ソリューションフォルダに
gflib2の必要なプロジェクトを追加。


4 新規作成 
EvnConverterソリューションフォルダをつくり、そこに
Win32コンソールアプリケーション
としてEnvConverterプロジェクトをつくる。
特別なテンプレートは使っていないので、Visual Studio標準のプロジェクトです。


5 必要な設定をする
EnvConverterプロジェクトにgflib2用のプロパティシートpropsを追加。
これでインクルードパスが通るようになる。

EnvConverterプロジェクトのプロパティで文字セットをマルチバイト文字セットに変更(Debug/Releaseともに)。
これでmain関数の引数がマルチバイト文字になる。

EnvConverterプロジェクトのプロパティで下記のものから変わってしまっているところを
下記の通りにしておく(Debug/Releaseともに)。gflib2用のプロパティシートを
渡しているので変わっているところがある。

出力ディレクトリ
$(SolutionDir)$(Configuration)\
中間ディレクトリ
$(Configuration)\
ターゲット名
$(ProjectName)
ターゲットの拡張子
.exe
クリーン時に削除する拡張子
*.cdf;*.cache;*.obj;*.ilk;*.resources;*.tlb;*.tli;*.tlh;*.tmp;*.rsp;*.pgc;*.pgd;*.meta;*.tlog;*.manifest;*.res;*.pch;*.exp;*.idb;*.rep;*.xdc;*.pdb;*_manifest.rc;*.bsc;*.sbr;*.xml;*.metagen;*.bi
ビルドログファイル
$(IntDir)\$(MSBuildProjectName).log

EnvConverterプロジェクトのプロパティでgflib2のプロジェクトを参照に追加。


6 実行
EnvConverterプロジェクトをスタートアッププロジェクトにする。
Win32|DebugとWin32|Releaseしか使っていません。


////////////////////////////////////////////////////////////////////////////////

以上。
