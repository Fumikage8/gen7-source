#pragma once
//=================================================================================================
/**
 *  @file   BaseCollisionScene.h
 *  @brief  ベースコリジョンシーン
 *  @author yy-ikeuchi@gamefreak.co.jp
 *  @date   2015.02.17
 */
//=================================================================================================
#include <types/include/gfl2_Typedef.h>
#include <math/include/gfl2_Vector4.h>
#include "RaycastCustomCallback.h"

class BaseSolver;
class BaseActor;
class StaticActor;
class DynamicActor;

namespace gfl2 {
  namespace gfx {
    class IGLAllocator;
  }
  namespace renderingengine { namespace scenegraph { namespace instance {
    class InstanceNode;
  } } }
}

//----------------------------------------------------------------------------------------
//! @brief コリジョンシステム
//----------------------------------------------------------------------------------------
class BaseCollisionScene
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  BaseCollisionScene();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~BaseCollisionScene();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  初期化
  *
  *  @param  pAllocator  利用するアロケータ
  *  @param  pHeap       利用するヒープ
  */
  //-----------------------------------------------------------------------------
  virtual void Setup(gfl2::gfx::IGLAllocator* pAllocator,gfl2::heap::HeapBase* pHeap);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  削除
  */
  //-----------------------------------------------------------------------------
  virtual void Terminate(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  コリジョン判定
  */
  //-----------------------------------------------------------------------------
  virtual void Update(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突されるアクターの作成
  *
  *  @return アクター
  */
  //-----------------------------------------------------------------------------
  StaticActor* CreateStaticActor(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突するアクターの作成
  *
  *  @return アクター
  */
  //-----------------------------------------------------------------------------
  DynamicActor* CreateDynamicActor(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突されるアクターの追加
  *
  *  @param  pActor  コリジョンシステムに登録したいアクター
  */
  //-----------------------------------------------------------------------------
  void RegistStaticActor(StaticActor *pActor);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突するアクターの追加
  *
  *  @param  pActor  コリジョンシステムに登録したいアクター
  */
  //-----------------------------------------------------------------------------
  void RegistDynamicActor(DynamicActor *pActor);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突されるアクターの削除
  *
  *  @param  pActor  コリジョンシステムから削除したいアクター
  */
  //-----------------------------------------------------------------------------
  void UnRegistStaticActor(StaticActor *pActor);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突するアクターの削除
  *
  *  @param  pActor  コリジョンシステムから削除したいアクター
  */
  //-----------------------------------------------------------------------------
  void UnRegistDynamicActor(DynamicActor *pActor);

  //----------------------------------------------------------------------------
  /**
  *  @brief  シーンに登録されている衝突されるメッシュに対してのレイキャスト
  *
  *  @param  start     レイ開始位置
  *  @param  end       レイ終了位置
  *  @param  pHitData  レイの結果を受け取るための構造体(スタートからの最近接点が返ってきます)
  *  @return           レイキャストがヒットしたかどうか
  */
  //-----------------------------------------------------------------------------
  b32 RaycastFromStaticActorsMesh(gfl2::math::Vector4& start,gfl2::math::Vector4& end,RaycastCustomCallback::HIT_DATA* pHitData);

private:

  //----------------------------------------------------------------------------
  /**
  *  @brief   解決者の作成
  *
  *  @return  solver
  *  @note    この関数をオーバーライドすることにより衝突の挙動を変更できます
  */
  //-----------------------------------------------------------------------------
  virtual BaseSolver* CreateSolver(void);

protected:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  ヒープを取得
  *
  *  @return ヒープ
  */
  //-----------------------------------------------------------------------------
  gfl2::heap::HeapBase* GetHeap(void){ return m_pHeap; }

private:

  gfl2::gfx::IGLAllocator*                                   m_pAllocator;
  gfl2::heap::HeapBase*                                      m_pHeap;
  gfl2::renderingengine::scenegraph::instance::InstanceNode* m_rootStaticActorRoot;
  gfl2::renderingengine::scenegraph::instance::InstanceNode* m_rootDynamicActorRoot;
  BaseSolver*                                                m_pSolver;

};
