#ifndef __GAMEEVENT_H__
#define __GAMEEVENT_H__
//===================================================================
/**
 * @file    GameEvent.h
 * @brief   ゲームイベントクラス  このクラスを継承してイベントを作ってください
            以前のイベントと異なり、起動検査、初期化、実行関数の３つが
            仮想関数として用意してありますので、上手に実装してください。
            GameEventクラス自体は閉鎖的なHEAPで確保が行われ、
            HEAP全体が虫食いにならないようにとりあつかいます
            変数があるのでインターフェイスとしては作っていません
 * @author  k.ohno
 * @date    11.3.8
 */
//===================================================================

#pragma once

#include <base/include/gfl2_Singleton.h>
#include <heap/include/gfl2_Heap.h>
#include "GameSystem/include/GameEventManager.h"


//#define RO_VALID TODO RO実装するまでコメントアウト

namespace GameSystem {

  class GameManager;  //GameEvent自体はGameManagerを持っていない 引数としてもらうだけ

  class GameEvent
  {
    GFL_FORBID_COPY_AND_ASSIGN(GameEvent); //コピーコンストラクタ＋代入禁止

    friend class GameEventManager;  //
    private:
    //-----------------------------------------------------------------------------
    /**
     *    定数
     */
    //-----------------------------------------------------------------------------
    //! 状態
    enum{
      STATE_BOOT_CHECK,   ///< 起動チェック
      STATE_MAIN,         ///< メイン
      STATE_END,          ///< 終了
    };

    //-----------------------------------------------------------------------------
    /**
     *    隠蔽変数
     */
    //-----------------------------------------------------------------------------
    GameEvent* mParent;	///< 親（呼び出し元）のイベントへのポインタ
    unsigned int mSeq;				///< シーケンスワーク
    gfl2::heap::HeapBase *mWorkHeap;		///<制御関数毎に固有ワークを作るためのHEAP
    u32         mState;
#ifdef RO_VALID    
    nn::ro::Module* mpModule; ///< DLL
#endif //RO_VALID

    //-----------------------------------------------------------------------------
    /**
     *    隠蔽関数
     */
    //-----------------------------------------------------------------------------
    //----------------------------------------------------------------------------
    /**
     *	@brief  イベント更新
     */
    //-----------------------------------------------------------------------------
    GMEVENT_RESULT UpdateFunc( GameManager* gmgr );

    //----------------------------------------------------------------------------
    /**
     *	@brief  イベント破棄をコール
     */
    //-----------------------------------------------------------------------------
    void CallEnd( GameManager* gmgr );


  public:
    //--------------------------------------------------------------
    /**
     * @brief   コンストラクタ
     * @param   heap       workをとるためのメモリクラス
     */
    //--------------------------------------------------------------
    GameEvent(gfl2::heap::HeapBase* heap);
    //デストラクタ
    virtual ~GameEvent();

    //--------------------------------------------------------------
    /**
     * @brief   イベントを動かしてよいかどうかの判定関数 純粋仮想関数
     * @param   gmgr       ゲームマネージャークラス
     * @retval  true  起動してよい
     * @retval  false 起動しない
     */
    //--------------------------------------------------------------
    virtual bool BootChk(GameManager* gmgr) = 0;

    //--------------------------------------------------------------
    /**
     * @brief   bootchkがtrueの場合にすぐ呼び出される初期化関数 純粋仮想関数
     * @param   gmgr       ゲームマネージャークラス
     */
    //--------------------------------------------------------------
    virtual void InitFunc(GameManager* gmgr) = 0;

    //--------------------------------------------------------------
    /**
     * @brief   呼び出される関数 純粋仮想関数
     * @param   gmgr       ゲームマネージャークラス
     * @return  GMEVENT_RESULT  イベント制御関数の戻り値
     */
    //--------------------------------------------------------------
    virtual GMEVENT_RESULT MainFunc(GameManager* gmgr) = 0;

    //--------------------------------------------------------------
    /**
     * @brief   呼び出される関数 純粋仮想関数
     * @param   gmgr       ゲームマネージャークラス
     */
    //--------------------------------------------------------------
    virtual void EndFunc(GameManager* gmgr) = 0;

    //--------------------------------------------------------------
    /**
     * @brief   Parentのポインタを得る
     * @return   イベントのクラスのポインタ
     */
    //--------------------------------------------------------------
    inline GameEvent* GetParentEventPointer(void){ return mParent; };

    //--------------------------------------------------------------
    /**
     * @brief   workに割り当てるメモリが確保できるヒープクラスを得る
     * @return  heapクラス
     */
    //--------------------------------------------------------------
    inline gfl2::heap::HeapBase* GetWorkHeap(void){ return mWorkHeap; };

    //--------------------------------------------------------------
    /**
     * @brief   シーケンス番号を得る
     * @return   シーケンス番号
     */
    //--------------------------------------------------------------
    inline int GetSeqNo(void){ return mSeq; }
    //--------------------------------------------------------------
    /**
     * @brief   シーケンス番号を設定
     * @param   no       シーケンス番号
     */
    //--------------------------------------------------------------
    inline void SetSeqNo(const int no){ mSeq = no; }
    //--------------------------------------------------------------
    /**
     * @brief   シーケンス番号を加算
     */
    //--------------------------------------------------------------
    inline void AddSeqNo(void){ mSeq++; }

#ifdef RO_VALID
    //--------------------------------------------------------------
    /**
     * @brief   DLLモジュールを設定
     */
    //--------------------------------------------------------------
    inline void SetRoModule( nn::ro::Module* pModule ) { mpModule = pModule; };
    inline nn::ro::Module* GetRoModule( void ) const { return mpModule; };
#endif //RO_VALID
  protected:

    //--------------------------------------------------------------
    /**
     * @brief   Parentのポインタを渡す
     * @param   渡す元イベントのクラスのポインタ
     */
    //--------------------------------------------------------------
    inline void CopyParentEventPointer(const GameEvent* event){ mParent = event->mParent; };

    //--------------------------------------------------------------
    /**
     * @brief   Parentのポインタを設定する
     * @param   イベントのクラスのポインタ
     */
    //--------------------------------------------------------------
    inline void SetParentEventPointer(GameEvent* event){ mParent = event; };

  };

}


#endif //__GAMEEVENT_H__

