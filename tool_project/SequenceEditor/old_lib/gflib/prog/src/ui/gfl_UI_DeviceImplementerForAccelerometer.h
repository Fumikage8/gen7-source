//=============================================================================
/**
 * @file   gfl_UI_DeviceImplementerForAccelerometer.h
 * @brief  加速度センサ入力の検出クラス専用インターフェース
 * @author obata_toshihiro
 * @date   2011.03.24
 */
//=============================================================================
#ifndef __GFL_UI_DEVICE_IMPLEMENTER_FOR_ACCELEROMETER_H__
#define __GFL_UI_DEVICE_IMPLEMENTER_FOR_ACCELEROMETER_H__
#include "./gfl_UI_DeviceImplementer.h"


namespace gfl {
  namespace ui {


    class DeviceImplementerForAccelerometer : public DeviceImplementer
    { 
      GFL_FORBID_COPY_AND_ASSIGN( DeviceImplementerForAccelerometer );

      public: 
      //-----------------------------------------------------------------------
      /**
       * @brief コンストラクタ
       */
      //-----------------------------------------------------------------------
      DeviceImplementerForAccelerometer( void );

      //-----------------------------------------------------------------------
      /**
       * @brief デストラクタ
       */
      //-----------------------------------------------------------------------
      virtual ~DeviceImplementerForAccelerometer( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 検出データのサイズを取得する
       */
      //-----------------------------------------------------------------------
      virtual u32 GetDetectiveDataSize( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 実効データのサイズを取得する
       */
      //-----------------------------------------------------------------------
      virtual u32 GetEffectiveDataSize( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief メイン処理
       */
      //-----------------------------------------------------------------------
      virtual void Main( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値の「遊び」幅を設定する
       */
      //-----------------------------------------------------------------------
      virtual void SetPlayRange( s16 value ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値の「遊び」幅を取得する
       */
      //-----------------------------------------------------------------------
      virtual s16 GetPlayRange( void ) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 検出感度を設定する
       */
      //-----------------------------------------------------------------------
      virtual void SetSensitivity( s16 value ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 検出感度を取得する
       */
      //-----------------------------------------------------------------------
      virtual s16 GetSensitivity( void ) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値へのオフセットを有効にする
       */
      //-----------------------------------------------------------------------
      virtual void EnableOffset( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値へのオフセットを無効にする
       */
      //-----------------------------------------------------------------------
      virtual void DisableOffset( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値へのオフセットが有効かどうかを調べる
       *
       * @retval true   オフセットが有効
       * @retval false  オフセットが無効
       */
      //-----------------------------------------------------------------------
      virtual bool IsOffsetEnable( void ) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 現在のオフセット値を取得する
       *
       * @param[out] buffer  取得したオフセット値を格納するバッファ
       */
      //-----------------------------------------------------------------------
      virtual void GetOffset( gfl::math::VEC3* buffer ) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 測定値へのオフセット値を直接指定する
       *
       * @param offset  測定値に加算するオフセット値
       *
       * @note 測定値に単純に加算されます
       */
      //-----------------------------------------------------------------------
      virtual void SetOffset( const gfl::math::VEC3& offset ) = 0;


      //-----------------------------------------------------------------------
      /**
       * @brief オフセット値をリセットする( オフセットが無効な値にする )
       */
      //-----------------------------------------------------------------------
      virtual void ResetOffset( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転を有効にする
       */
      //-----------------------------------------------------------------------
      virtual void EnableAxisRotation( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転を無効にする
       */
      //-----------------------------------------------------------------------
      virtual void DisableAxisRotation( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転が有効かどうかを調べる
       *
       * @retval true  軸回転が有効
       * @retval false 軸回転が無効
       */
      //-----------------------------------------------------------------------
      virtual bool IsAxisRotationEnable( void ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転に使用している回転行列を取得する
       *
       * @param buffer  取得した行列の格納先
       */
      //-----------------------------------------------------------------------
      virtual void GetAxisRotationMatrix( gfl::math::MTX34* buffer ) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転に使用する回転行列を設定する
       *
       * @param matrix  軸回転に使用する回転行列
       */
      //-----------------------------------------------------------------------
      virtual void SetAxisRotationMatrix( const gfl::math::MTX34& matrix ) = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 軸回転に使用する回転行列をリセットする( 軸回転しない状態にする )
       */
      //-----------------------------------------------------------------------
      virtual void ResetAxisRotationMatrix( void ) = 0;
    };


  } //namespace ui
} //namespace gfl


#endif  //__GFL_UI_DEVICE_IMPLEMENTER_FOR_ACCELEROMETER_H__
