#ifndef __GFL_MATHTRIANGULAR_H__
#define __GFL_MATHTRIANGULAR_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_MathTriangular.h
 *	@brief  三角関数　演算
 *	@author	tomoya takahashi
 *	@date		2010.10.13
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once


#include <nn/math.h>

#include <math/gfl_MathType.h>


namespace gfl {
namespace math {
  
//-----------------------------------------------------------------------------
/**
 *    
 */
//-----------------------------------------------------------------------------
#define GFL_MATH_RAD_TO_FIDX(rad) (NN_MATH_RAD_TO_FIDX(rad))
#define GFL_MATH_DEG_TO_FIDX(deg) (NN_MATH_DEG_TO_FIDX(deg))
#define GFL_MATH_DEG_TO_RAD(deg) (NN_MATH_DEG_TO_RAD(deg))
#define GFL_MATH_RAD_TO_DEG(rad) (NN_MATH_RAD_TO_DEG(rad))
#define GFL_MATH_FIDX_TO_RAD(fidx) (NN_MATH_FIDX_TO_RAD(fidx))
#define GFL_MATH_FIDX_TO_DEG(fidx) (NN_MATH_FIDX_TO_DEG(fidx))

//-----------------------------------------------------------------------------
/**
 *        
 */
//-----------------------------------------------------------------------------
/*!--------------------------------------------------------------------------*
  @brief        正弦の値を求めます

  @param[in]    fidx  1 円周を 256.0 とする角度

  @return       fidx に対する正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 SinFIdx( f32 fidx) { return nn::math::SinFIdx( fidx); }

/*!--------------------------------------------------------------------------*
  @brief        余弦の値を求めます

  @param[in]    fidx  1 円周を 256.0 とする角度

  @return       fidx に対する余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 CosFIdx( f32 fidx) { return nn::math::CosFIdx( fidx); }

/*!--------------------------------------------------------------------------*
  @brief        正弦と余弦の値を求めます

  @param[out]   pSin  正弦の値を格納するバッファへのポインタ
  @param[out]   pCos  余弦の値を格納するバッファへのポインタ
  @param[in]    fidx  1 円周を 256.0 とする角度

  @return       なし
 *---------------------------------------------------------------------------*/
inline void SinCosFIdx( f32* pSin, f32* pCos, f32 fidx) { nn::math::SinCosFIdx( pSin,pCos,fidx); }

/*!--------------------------------------------------------------------------*
  @brief        正接の値を求めます

  @param[in]    fidx  1 円周を 256.0 とする角度

  @return       fidx に対する正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 TanFIdx( f32 fidx) { return nn::math::TanFIdx( fidx); }


/*!--------------------------------------------------------------------------*
  @brief        正弦の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 SinRad( f32 rad) { return nn::math::SinRad( rad); }

/*!--------------------------------------------------------------------------*
  @brief        余弦の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 CosRad( f32 rad) { return nn::math::CosRad( rad); }

/*!--------------------------------------------------------------------------*
  @brief        正弦と余弦の値を求めます。

  @param[out]   s    正弦の値を格納するバッファへのポインタ
  @param[out]   c    余弦の値を格納するバッファへのポインタ
  @param[in]    rad  ラジアン単位の角度

  @return       なし
 *---------------------------------------------------------------------------*/
inline void SinCosRad( f32* s, f32* c, f32 rad) { nn::math::SinCosRad( s,c,rad); }

/*!--------------------------------------------------------------------------*
  @brief        正接の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 TanRad( f32 rad) { return nn::math::TanRad( rad); }


/*!--------------------------------------------------------------------------*
  @brief        正弦の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 SinDeg( f32 deg) { return nn::math::SinDeg( deg); }

/*!--------------------------------------------------------------------------*
  @brief        余弦の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 CosDeg( f32 deg) { return nn::math::CosDeg( deg); }

/*!--------------------------------------------------------------------------*
  @brief        正弦と余弦の値を求めます。

  @param[out]   s    正弦の値を格納するバッファへのポインタ
  @param[out]   c    余弦の値を格納するバッファへのポインタ
  @param[in]    deg  1 円周を 360.0 とする角度

  @return       なし
 *---------------------------------------------------------------------------*/
inline void SinCosDeg( f32* s, f32* c, f32 deg) { nn::math::SinCosDeg( s,c,deg); }

/*!--------------------------------------------------------------------------*
  @brief        正接の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 TanDeg( f32 deg) { return nn::math::TanDeg( deg); }



/*!--------------------------------------------------------------------------*
  @brief        逆正弦の値を求めます。

  @param[in]    x  逆正弦を求める値

  @return       1 円周を 256.0 とする角度で逆正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 AsinFIdx( f32 x) { return nn::math::AsinFIdx( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆余弦の値を求めます。

  @param[in]    x  逆余弦を求める値

  @return       1 円周を 256.0 とする角度で逆余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 AcosFIdx( f32 x) { return nn::math::AcosFIdx( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    x  逆正接を求める値

  @return       1 円周を 256.0 とする角度で逆正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 AtanFIdx( f32 x) { return nn::math::AtanFIdx( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    y  正接の値の分子
  @param[in]    x  正接の値の分母

  @return       y/x の逆正接の値を1 円周を 256.0 とする角度で返します
 *---------------------------------------------------------------------------*/
inline f32 Atan2FIdx( f32 y, f32 x) { return nn::math::Atan2FIdx( y,x); }


/*!--------------------------------------------------------------------------*
  @brief        逆正弦の値を求めます。

  @param[in]    x  逆正弦を求める値

  @return       x に対する逆正弦の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AsinRad( f32 x) { return nn::math::AsinRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆余弦の値を求めます。

  @param[in]    x  逆余弦を求める値

  @return       x に対する逆余弦の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AcosRad( f32 x) { return nn::math::AcosRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    x  逆正接を求める値

  @return       x に対する逆正接の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AtanRad( f32 x) { return nn::math::AtanRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    y  正接の値の分子
  @param[in]    x  正接の値の分母

  @return       y/x の逆正接の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 Atan2Rad( f32 y, f32 x) { return nn::math::Atan2Rad( y,x); }






/*!--------------------------------------------------------------------------*
  @brief        逆正弦の値を求めます。

  @param[in]    x  逆正弦を求める値

  @return       x に対する逆正弦の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AsinDeg( f32 x) { return nn::math::AsinDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆余弦の値を求めます。

  @param[in]    x  逆余弦を求める値

  @return       x に対する逆余弦の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AcosDeg( f32 x) { return nn::math::AcosDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    x  逆正接を求める値

  @return       x に対する逆正接の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AtanDeg( f32 x) { return nn::math::AtanDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    y  正接の値の分子
  @param[in]    x  正接の値の分母

  @return       y/x の逆正接の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 Atan2Deg( f32 y, f32 x) { return nn::math::Atan2Deg( y,x); }


  
} /* end of namespace math */
} /* end of namespace gfl */




#endif // __GFL_MATHTRIANGULAR_H__
