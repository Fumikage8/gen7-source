#ifndef __GFL_MATHRANDOM_H__
#define __GFL_MATHRANDOM_H__
//============================================================================================
/**
 *	GAME FREAK inc.
 *	@file		gfl_MathRandom.h
 *	@brief  乱数管理    任天堂乱数のラッパーに変更 2012.9.25 k.ohno
 *	@author	k.ohno
 *	@date		2010.12.14
 *
 */
//============================================================================================
#pragma once


//#include <math/tinymt32.h>

namespace gfl{
namespace math{

  class Random {
    GFL_FORBID_COPY_AND_ASSIGN(Random); //コピーコンストラクタ＋代入禁止

  private:
//    tinymt32_t mtinymt32;  ///< TinyMT

    nn::math::TinyMt mTinymt;

  public:
    typedef nn::math::TinyMt::State Context;

    
    static const int CONTEXT_SIZE = 16;  //この乱数の内部情報サイズ

  public:
    //------------------------------------------------------------------
    /**
    * @name     Randomコンストラクタ
    * @brief    何もしません。 Initializeを呼ばないとNextのときにASSERTでとまります
                hasしたときに勝手にコンストラクタが走るのを避けたいためです
    */
    //------------------------------------------------------------------
    Random(void);
    ~Random();

    //------------------------------------------------------------------
    /**
    * @name     RandomInitialize
    * @brief    tinymtの初期化を32bit幅で行います  
                種はCreateGeneralSeedです
      @return  CreateGeneralSeed値
    */
    //------------------------------------------------------------------
    u32 Initialize(void);
    //------------------------------------------------------------------
    /**
    * @name     RandomInitialize
    * @brief    tinymtの初期化を32bit幅で行います
    * @param    seed    初期値として設定する乱数の種
    */
    //------------------------------------------------------------------
    void Initialize(const u32 seed);
    //------------------------------------------------------------------
    /**
    * @name     RandomInitialize
    * @brief    tinymtの初期化を64bit幅で行います
    * @param    seed    初期値として設定する乱数の種
    */
    //------------------------------------------------------------------
    void Initialize(const u64 seed);
    //------------------------------------------------------------------
    /**
    * @name     RandomInitialize
    * @brief    tinymtの初期化をコンテキストで行います
    * @param    pContext    初期値として設定するコンテキスト CONTEXT_SIZE
     *   コンテキストとは 乱数の生成における内部情報の事です。
     *   内部情報に好き勝手にランダムな数字を入れても、乱数としては機能しません。
     *   あくまでGetContextしたものでなければいけません
      
    */
    //------------------------------------------------------------------
    void Initialize(const u32* pContext);
    void Initialize(const Context* pContext);
    //------------------------------------------------------------------
    /**
    * @name     Next
    * @brief    tinymtによる32bit乱数取得関数
    * @return   u32型 32bitのランダム値
    */
    //------------------------------------------------------------------
    u32 Next(void);
    //------------------------------------------------------------------
    /**
    * @name     Next
    * @brief    tinymtによる64bit乱数取得関数
    * @return   u64型 64bitのランダム値
    */
    //------------------------------------------------------------------
    u64 Next64(void);
    //------------------------------------------------------------------
    /**
    * @name     Next
    * @brief    tinymtによる32bit乱数取得関数 範囲指定
    * @param    maxValue  最大（含まれない）
    * 0 以上 num 未満の整数の範囲で乱数を生成します。 返り値の種類は num 種類になります。
    * 各値の返る確率は完全に均等ではないことに注意してください。
    * 例えば num に 6 を指定した場合、 0, 1, 3, 4 が返る確率は 0x2AAAAAAB / 0x100000000 ですが、
    * 2, 5 が返る確率は 0x2AAAAAAA / 0x100000000 となり、
    * 2, 5 が出る確率は 0, 1, 3, 4 が出る確率の 0x2AAAAAAA / 0x2AAAAAAB 倍ということになります。
    * 確率の偏りは num が大きくなるほど大きくなり num に最大値である 0xFFFF を指定した場合は
    *  0 が出る確率が 0 以外が出る確率の 65538 / 65537 倍（1.0000153 倍）となります。
    * num が 2 の整数乗である場合には偏りは発生しません。
     * @return   u32型 32bitのランダム値
    */
    //------------------------------------------------------------------
    u32 Next(const u32 maxValue);
    //----------------------------------------------------------------------------
    /**
     *  @brief  コンテキストを得る
     *  @param  コンテキスト CONTEXT_SIZE
     */
    //----------------------------------------------------------------------------
    void GetContext(u32* pContext);
    void GetContext(Context* pContext);
    //----------------------------------------------------------------------------
    /**
     *  @brief  コンテキストを与える
     *  @param  コンテキスト CONTEXT_SIZE  void Initialize(const u32* pContext);とおなじ
     */ 
    //----------------------------------------------------------------------------
    void SetContext(const u32* pContext);
    void SetContext(const Context* pContext);
    //----------------------------------------------------------------------------
    /**
     *  @brief  任天堂推奨の乱数初期生成  3DS時間と3DS時間調整値を使用
     *  @return u32型の乱数の種
     */
    //----------------------------------------------------------------------------
    static u32 CreateGeneralSeed(void);
    

  };




  class MTRandom {

    GFL_FORBID_COPY_AND_ASSIGN(MTRandom); //コピーコンストラクタ＋代入禁止

  private:
    nn::math::MersenneTwister mMT;

  public:

    //------------------------------------------------------------------
    /**
    * @name     Randomコンストラクタ
    * @brief    何もしません。 Initializeを呼ばないとNextのときにASSERTでとまります
                hasしたときに勝手にコンストラクタが走るのを避けたいためです
    */
    //------------------------------------------------------------------
    MTRandom(void);
    ~MTRandom();
    //------------------------------------------------------------------
    /**
    * @name     Initialize
    * @brief    MTによる32bit乱数を初期化します
                種はCreateGeneralSeed
      @return   種に使用した変数を返します これを使えば同じ乱数を生成します
    */
    //------------------------------------------------------------------
    u32 Initialize(void);
    //------------------------------------------------------------------
    /**
    * @name     Initialize
    * @brief    MTによる32bit乱数を初期化します
    * @param    seed    初期値として設定する乱数の種
    */
    //------------------------------------------------------------------
    void Initialize(const u32 seed);
    //------------------------------------------------------------------
    /**
    * @name     Initialize
    * @brief    MTによる32bit乱数を初期化します
    * @param    seed    初期値として設定する乱数の種
    */
    //------------------------------------------------------------------
    void Initialize(const u64 seed);
    //------------------------------------------------------------------
    /**
    * @name     Next
    * @brief    MTによる32bit乱数取得関数
    * @return   int型 32bitのランダム値
    */
    //------------------------------------------------------------------
    u32 Next(void);
    //------------------------------------------------------------------
    /**
    * @name     Next64
    * @brief    MTによる32bit乱数取得関数
    * @return   int型 32bitのランダム値
    */
    //------------------------------------------------------------------
    u64 Next64(void);
    //------------------------------------------------------------------
    /**
    * @name     Next
    * @brief    MTによる32bit乱数取得関数 範囲指定
    * @param    maxValue  最大（含まれない）
    * @return   int型 32bitのランダム値
    */
    //------------------------------------------------------------------
    u32 Next(const u32 maxValue);
  };


}
}
#endif // __GFL_MATHRANDOM_H__
