#ifndef __GFL_DEVICECAMERA_CONTROLLER_H__
#define __GFL_DEVICECAMERA_CONTROLLER_H__
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @file   gfl_DeviceCamera_Controller.h
 * @brief  カメラコントローラ
 * @author obata_toshihiro
 * @date   2010.11.19
 */
/////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <device/camera/gfl_DeviceCamera_Types.h>


namespace gfl {
  namespace device { 
    namespace camera {

      class System;


      class Controller 
      {
        GFL_FORBID_COPY_AND_ASSIGN( Controller ); // コピーコンストラクタ, 代入演算子を禁止
        friend class System; // カメラシステムに対して公開する


        public:
        //-------------------------------------------------------------------------------
        /**
         * @brief カメラを起動する
         */
        //-------------------------------------------------------------------------------
        void Activate( void );

        //-------------------------------------------------------------------------------
        /**
         * @brief すべてのカメラを停止する
         */
        //-------------------------------------------------------------------------------
        void DeactivateAllCamera( void );


        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャを開始する
         */
        //-------------------------------------------------------------------------------
        void StartCapture( void );

        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャを停止する
         */
        //-------------------------------------------------------------------------------
        void StopCapture( void );

        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャ中かどうかを調べる
         */
        //-------------------------------------------------------------------------------
        bool IsCapturing( void ) const;


        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャした画像データ( RGBフォーマット )を取得する
         */
        //-------------------------------------------------------------------------------
        const void* GetImage( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャ画像( RGBフォーマット )のサイズを取得する
         */
        //-------------------------------------------------------------------------------
        u32 GetImageSize( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャした画像データ( YUVフォーマット )を取得する
         */
        //-------------------------------------------------------------------------------
        const void* GetYuvImage( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief キャプチャ画像( YUVフォーマット )のサイズを取得する
         */
        //-------------------------------------------------------------------------------
        u32 GetYuvImageSize( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief 露光を設定します。
         * @param[in] exposure  露出量を指定します。指定可能な値の範囲は [-5, +5] です。
         */
        //-------------------------------------------------------------------------------
        void SetExposure(s8 exposure);


        protected:
        CameraID m_cameraID;     // どのカメラなのか？
        System* m_pCameraSystem; // システムへのポインタ


        private:
        struct SetupParam {
          CameraID cameraID;      // どのカメラなのか？
          System*  pCameraSystem; // システムへのポインタ
        };
        //-------------------------------------------------------------------------------
        /**
         * @brief コンストラクタ
         */
        //-------------------------------------------------------------------------------
        Controller( const SetupParam& param );

        //-------------------------------------------------------------------------------
        /**
         * @brief デストラクタ
         */
        //-------------------------------------------------------------------------------
        virtual ~Controller(); 
      };

    } // namespace camera
  } // namespace device
} // namespace gfl
#endif // __GFL_DEVICECAMERA_CONTROLLER_H__
