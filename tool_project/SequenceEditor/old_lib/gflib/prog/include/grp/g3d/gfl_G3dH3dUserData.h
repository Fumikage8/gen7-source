#ifndef __GFL_G3DH3DUSERDATA_H__
#define __GFL_G3DH3DUSERDATA_H__
#pragma once
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_G3dH3dUserData.h
 *	@brief  H3Dユーザデータ
 *	@author	Koji Kawada
 *	@date		2012.08.02
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


#if 0
/*説明
このH3dUserDataでは
nw::h3d::res::MetaData
を扱います。
nw::h3d::res::ModelContentやnw::h3d::res::MaterialContent、nw::h3d::res::MeshDataなどの
リソースに含まれるメタデータにアクセスするクラスです。*/
#endif


// CTR_SDK

// NW4C
#include <nw/gfx.h>

// gflib
#include <gfl_Heap.h>
#include <gfl_Macros.h>
#include <gfl_fs.h>

// gflib grp
#include <grp/gfl_GraphicsType.h>

// gflib grp g3d
#include <grp/g3d/gfl_G3dDefine.h>



#if GFL_GRP_G3D_H3D_USE

// NW4C
#include <nw/h3d.h>
// gflib grp g3dh3d



namespace gfl {
namespace grp {
namespace g3d {

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	H3Dユーザデータクラス
//=====================================
class H3dUserData
{
  GFL_FORBID_COPY_AND_ASSIGN(H3dUserData);


  friend class H3dModel;
  friend class H3dResAnim;


public:
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 型
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  // @brief  Oriented Bounding Box
  //         コンバート時にオプションを指定することで、メッシュのメタデータから取得できます。
  //         メタデータの名前 (res::MetaData::name) は "OBBox" です。
  typedef nw::h3d::fnd::OrientedBoundingBox OrientedBoundingBox;
  //struct OrientedBoundingBox
  //{
  //  gfl::math::VEC3  center;
  //  gfl::math::MTX33 orientation;
  //  gfl::math::VEC3  size;
  //};

  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 定数
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  // @brief  データの型
  enum DataType
  {
    DATA_TYPE_INT                   = nw::h3d::MetaDataType::INT_ARRAY,              // 整数
    DATA_TYPE_FLOAT                 = nw::h3d::MetaDataType::FLOAT_ARRAY,            // 実数
    DATA_TYPE_STRING                = nw::h3d::MetaDataType::STRING_ARRAY,           // 文字列
    DATA_TYPE_WSTRING               = nw::h3d::MetaDataType::WSTRING_ARRAY,          // 2バイト文字列
    DATA_TYPE_ORIENTED_BOUNDING_BOX = nw::h3d::MetaDataType::ORIENTED_BOUNDING_BOX,  // Oriented Bounding Box
    DATA_TYPE_INVALID               = -2                                             // 無効
  };


public:
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // コンストラクタ / デストラクタ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         コンストラクタ
   */
  //-----------------------------------------------------------------------------
  H3dUserData(void);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~H3dUserData();


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 設定 / 取得
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-------------------------------------
  // 共通
  //-------------------------------------
  // 【注意】ユーザーデータは先頭に $ (ダラー) を付加した名前のメタデータとして保持されます。
  //         $が付くことを忘れないように。
  const char*  GetName(void) const;
  DataType     GetDataType(void) const;
  s32          GetValueCount(void) const;

  //-------------------------------------
  // 整数
  //-------------------------------------
  // 正常に取得できなかった場合、戻り値は不定 
  s32  GetIntValue(const s32 index) const;
  // 正常に設定できたときtrueを返す
  //Setは禁止
  //kujiraBTS6180、GFBTS2202対処のために許可してもらいました
  //H3Dの設計方針に反する点
  //UserDataのポインタにconstがついて、変更がそもそも不可になる可能性がある点
  //上記のことから、この修正方法で未来永劫OKなわけでないことに留意してください
  b32  SetIntValue(const s32 index, const s32 value);
  
  //-------------------------------------
  // 実数
  //-------------------------------------
  // 正常に取得できなかった場合、戻り値は不定 
  f32  GetFloatValue(const s32 index) const;
  // 正常に設定できたときtrueを返す
  //Setは禁止b32  SetFloatValue(const s32 index, const f32 value);
  
  //-------------------------------------
  // 文字列
  //-------------------------------------
  // 正常に取得できなかった場合、NULLを返す
  const char*     GetStringValue(const s32 index) const;

  //-------------------------------------
  // 2バイト文字列
  //-------------------------------------
  // 正常に取得できなかった場合、NULLを返す
  const wchar_t*  GetWStringValue(const s32 index) const;

  //-------------------------------------
  // Oriented Bounding Box
  //-------------------------------------
  // 正常に取得できなかった場合、NULLを返す
  //const OrientedBoundingBox*  GetOBB(void);


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendには公開している非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  void SetNwMetaData(nw::h3d::res::MetaData* meta_data)
  {
    m_meta_data = meta_data;
  }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendにも公開していない非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  nw::h3d::res::MetaData*  m_meta_data;
  //const nw::h3d::fnd::OrientedBoundingBox&  m_obb;
};


}  // namespace g3d
}  // namespace grp
}  // namespace gfl



#endif  // GFL_GRP_G3D_H3D_USE



#endif // __GFL_G3DH3DUSERDATA_H__

