#ifndef __GFL_G3DH3DRESTEXTURE_H__
#define __GFL_G3DH3DRESTEXTURE_H__
#pragma once
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_G3dH3dResTexture.h
 *	@brief  H3Dリソーステクスチャ
 *	@author	Koji Kawada
 *	@date		2012.08.02
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


#if 0
/*説明
このH3dResTextureでは
nw::h3d::res::TextureConent
を扱います。
H3dResourceを使うテクスチャです。

H3dResTextureとH3dDynamicTextureの基底クラスとなる
H3dTextureをつくりたかったのだが、
H3dResTextureが多重継承になってしまうので断念した。*/
#endif


// CTR_SDK

// NW4C
#include <nw/gfx.h>

// gflib
#include <gfl_Heap.h>
#include <gfl_Macros.h>
#include <gfl_fs.h>

// gflib grp
#include <grp/gfl_GraphicsType.h>

// gflib grp g3d
#include <grp/g3d/gfl_G3dDefine.h>



#if GFL_GRP_G3D_H3D_USE

// NW4C
#include <nw/h3d.h>
// gflib grp g3dh3d
#include <grp/g3d/gfl_G3dH3dResource.h>
#include <grp/g3d/gfl_G3dH3dContent.h>



namespace gfl {
namespace grp {
namespace g3d {

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	H3Dテクスチャコンテントクラス
//=====================================
class H3dResTexture : public H3dContent
{
  GFL_FORBID_COPY_AND_ASSIGN(H3dResTexture);


  friend class H3dModel;


public:
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // コンストラクタ / デストラクタ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         コンストラクタ
   */
  //-----------------------------------------------------------------------------
  H3dResTexture(void);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~H3dResTexture();



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 生成 / 破棄
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  // 基底クラスのまま



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 設定 / 取得
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
public:
  // @attention VRAMに配置してDelete○○Section(DeleteSomeSectionなど)していると値が取得できません。
  void* GetPhysicalAddress(void) const;

  // @attention VRAMに配置してDelete○○Section(DeleteSomeSectionなど)していると値が取得できません。
  u16   GetWidth(void) const;

  // @attention VRAMに配置してDelete○○Section(DeleteSomeSectionなど)していると値が取得できません。
  u16   GetHeight(void) const;

  gfl::grp::g3d::TextureFormat GetFormat(void) const;
  u8    GetMipmap(void) const;

  const char* GetName(void) const;


  //////////////////////////
  // 便利関数
  //////////////////////////
public:
  // @attention VRAMに配置してDelete○○Section(DeleteSomeSectionなど)していると値が取得できません。
  void* GetVirtualAddress(void) const;
  gfl::grp::g3d::Texture::Format GetFormatAsTexture(void) const;
  // @attention VRAMに配置してDelete○○Section(DeleteSomeSectionなど)していると値が取得できません。
  // @note ミップマップを考慮していないので注意して下さい。
  u32 GetByteSize(void) const;
  // ミップマップを考慮した版
  u32 GetByteSizeWithMipmap(void) const;


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendには公開している非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  const nw::h3d::res::TextureContent* GetNwTextureContent(void) const
  {
    return m_cont;
  }



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendにも公開していない非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  // @brief  生成内部用
  virtual b32 createInternal(gfl::heap::NwAllocator* heap_allocator, gfl::heap::NwAllocator* device_allocator, const H3dResource* resource, const char* name);
  virtual b32 createInternal(gfl::heap::NwAllocator* heap_allocator, gfl::heap::NwAllocator* device_allocator, const H3dResource* resource, s32 index_in_resource);
  // @brief  破棄内部用
  virtual void destroyInternal(void);

private:
  const nw::h3d::res::TextureContent*  m_cont;  // m_res内のコンテント
};


}  // namespace g3d
}  // namespace grp
}  // namespace gfl



#endif  // GFL_GRP_G3D_H3D_USE



#endif // __GFL_G3DH3DRESTEXTURE_H__

