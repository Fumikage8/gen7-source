#ifndef __GFL_G3DH3DANIMATIONMANAGER_H__
#define __GFL_G3DH3DANIMATIONMANAGER_H__
#pragma once
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_G3dH3dAnimationManager.h
 *	@brief  H3Dアニメーションマネージャ
 *	@author	Koji Kawada
 *	@date		2012.04.09
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

// CTR_SDK

// NW4C
#include <nw/gfx.h>

// gflib
#include <gfl_Heap.h>
#include <gfl_Macros.h>
#include <gfl_fs.h>

// gflib grp
#include <grp/gfl_GraphicsType.h>

// gflib grp g3d
#include <grp/g3d/gfl_G3dDefine.h>



#if GFL_GRP_G3D_H3D_USE

// NW4C
#include <nw/h3d.h>
// gflib grp g3dh3d
#include <grp/g3d/gfl_G3dH3dAnimationSlot.h>



namespace gfl {
namespace grp {
namespace g3d {

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	H3Dアニメーションマネージャクラス
//=====================================
class H3dAnimationManager
{
  GFL_FORBID_COPY_AND_ASSIGN(H3dAnimationManager);


public:
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // コンストラクタ / デストラクタ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         コンストラクタ
   */
  //-----------------------------------------------------------------------------
  H3dAnimationManager(void);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~H3dAnimationManager();



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 生成 / 破棄
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         生成
   */
  //-----------------------------------------------------------------------------
  b32 CreateAnimationManagerAndAnimationSlot(gfl::heap::NwAllocator* heap_allocator, H3dModel* model, s32 slot_num, const H3dAnimationSlot::Description* slot_desc_array);
  b32 CreateAnimationManager(gfl::heap::NwAllocator* heap_allocator, s32 slot_num);
  b32 CreateAnimationSlot(gfl::heap::NwAllocator* heap_allocator, H3dModel* model, s32 slot_index, const H3dAnimationSlot::Description* slot_desc);
  b32 IsAnimationSlotCreated(s32 slot_index) const;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         破棄
   */
  //-----------------------------------------------------------------------------
  void Destroy(void);
  void DestroyAnimationSlot(s32 slot_index);



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 計算
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         計算
   */
  //-----------------------------------------------------------------------------

  ///////////////////////////
  // 全部入り
  ///////////////////////////
  void Calculate(void);

  ////////////////////////////////////////////////////////////////////////////////
  // 【注意】全部入りと個別は1フレームにどちらかしか使わないようにして下さい。
  ////////////////////////////////////////////////////////////////////////////////
 
  ///////////////////////////
  // 個別
  ///////////////////////////
  // ローカルスケルタルアニメーション更新
  void CalculateLocalSkeletalAnimation(void);
  // ビジビリティアニメーション更新
  void CalculateVisibilityAnimation(void);
  // マテリアルアニメーション更新
  void CalculateMaterialAnimation(void);
  // アニメーションフレーム更新
  void CalculateAnimationFrame(void);
  // ワールドスケルタルアニメーション更新
  void CalculateWorldSkeletalAnimation(void);




  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // アニメーション
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーション変更
   */
  //-----------------------------------------------------------------------------
  H3dAnimationSlot::ChangeAnimationResult ChangeAnimationByResAnim(s32 slot_index, H3dResAnim* res_anim);
  H3dAnimationSlot::ChangeAnimationResult ChangeAnimationByResAnimListIndex(s32 slot_index, s32 list_index);

  //-----------------------------------------------------------------------------
  /**
   *  @brief         今設定されているアニメーションを得る
   *  @param[in]     slot_index  スロット
   *  @retval        アニメーションが設定されていないときはNULLを返す
   *                 H3dResAnimでないアニメーションが設定されているときもNULLを返す
   */
  //-----------------------------------------------------------------------------
  H3dResAnim* GetAnimationAsResAnim(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションのフレームを設定する
   *  @param[in]     frame           フレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimationFrame(s32 slot_index, f32 frame);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションのフレームを取得する
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimationFrame(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの更新フレームを設定する
   *                 0.0fで停止、1.0fで等倍、2.0fで2倍速、-1.0fで逆等倍再生
   *
   *  @param[in]     step_frame      更新フレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimationStepFrame(s32 slot_index, f32 step_frame);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの更新フレームを取得する
   *  @retval        更新フレーム
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimationStepFrame(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームを設定する
   *  @param[in]     frame           フレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimationStartFrame(s32 slot_index, f32 start_frame);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームを取得する
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimationStartFrame(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの終了フレームを設定する
   *  @param[in]     frame           フレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimationEndFrame(s32 slot_index, f32 end_frame);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの終了フレームを取得する
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimationEndFrame(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームと終了フレームを設定する
   *  @param[in]     start_frame     開始フレーム
   *  @param[in]     end_frame       終了フレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimationStartAndEndFrame(s32 slot_index, f32 start_frame, f32 end_frame);

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームが開始フレームか否か判定する
   *  @retval        bool    現在のフレームが開始フレームの場合tureを返す
   */
  //-----------------------------------------------------------------------------
  b32 IsAnimationFrameStartFrame(s32 slot_index) const;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームが終了フレームか否か判定する
   *  @retval        bool    現在のフレームが終了フレームの場合tureを返す
   */
  //-----------------------------------------------------------------------------
  b32 IsAnimationFrameEndFrame(s32 slot_index) const;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームが
   *                     step_frame>0のときは終了フレームのときtrueを返す
   *                     step_frame<0のときは開始フレームのときtrueを返す
   *                     step_frame==0のときは開始フレームか終了フレームのときtrueを返し、それ以外のときfalseを返す
   *
   *  @retval        bool    現在のフレームがstep_frameから見て端フレームとなっている場合tureを返す
   */
  //-----------------------------------------------------------------------------
  b32 IsAnimationFrameStepTerminalFrame(s32 slot_index) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションがループ再生か否か取得する
   *                 今slot_indexに設定されているH3dResAnimのループ状態を取得するだけです。
   *  @retval        bool            ループのときtrue、ループでないときfalseを返す
   */
  //-----------------------------------------------------------------------------
  b32 IsAnimationLoop(s32 slot_index) const;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションにループ再生を設定する
   *                 今slot_indexに設定されているH3dResAnimのループ状態を変更します。
   *  @param[in]     loop            ループのときtrue、ループでないときfalseを設定する
   */
  //-----------------------------------------------------------------------------
  void SetAnimationLoop(s32 slot_index, b32 loop);



private:
  s32             m_slot_num;
  H3dAnimationSlot**  m_slot_array;
};


}  // namespace g3d
}  // namespace grp
}  // namespace gfl



#endif  // GFL_GRP_G3D_H3D_USE



#endif // __GFL_G3DH3DANIMATIONMANAGER_H__

