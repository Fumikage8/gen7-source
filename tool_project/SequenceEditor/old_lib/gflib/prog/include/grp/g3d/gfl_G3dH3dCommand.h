#ifndef __GFL_G3DH3DCOMMAND_H__
#define __GFL_G3DH3DCOMMAND_H__
#pragma once
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_G3dH3dCommand.h
 *	@brief  H3Dコマンド
 *	@author	Koji Kawada
 *	@date		2012.04.09
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


#if 0
/*説明
このH3dCommandでは
nw::h3d::DrawCommandIterator←これはまだ扱っていません
nn::gr::CTR::CommandBufferJumpHelper
nw::h3d::ShaderState
を扱います。*/
#endif


// CTR_SDK

// NW4C
#include <nw/gfx.h>

// gflib
#include <gfl_Heap.h>
#include <gfl_Macros.h>
#include <gfl_fs.h>

// gflib grp
#include <grp/gfl_GraphicsType.h>

// gflib grp g3d
#include <grp/g3d/gfl_G3dDefine.h>



#if GFL_GRP_G3D_H3D_USE

// NW4C
#include <nw/h3d.h>
// gflib grp g3dh3d



namespace gfl {
namespace grp {
namespace g3d {

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	H3Dコマンドクラス
//=====================================
class H3dCommand
{
  GFL_FORBID_COPY_AND_ASSIGN(H3dCommand);


  friend class H3dModel;
  friend class H3dShaderExState;
  friend class H3dMaterialExState;
  friend class RenderSystem;

public:
  // 型
  typedef bit32  CommandType;  // = nn::gr::CTR::CommandBufferJumpHelper::command_type
  typedef bit32* AddressType;  // = nn::gr::CTR::CommandBufferJumpHelper::address_type


public:
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // コンストラクタ / デストラクタ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         コンストラクタ
   */
  //-----------------------------------------------------------------------------
  H3dCommand(void);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~H3dCommand();



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // 開始 / 終了
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////

  //-----------------------------------------------------------------------------
  /**
   *  @brief         開始
   */
  //-----------------------------------------------------------------------------
  void BegineDraw(void);
  //-----------------------------------------------------------------------------
  /**
   *  @brief         終了
   */
  //-----------------------------------------------------------------------------
  void EndDraw(void);



  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendには公開している非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  nn::gr::CTR::CommandBufferJumpHelper* GetNwDrawCommandStream(void) const { return m_dcs; }
  nw::h3d::ShaderState*       GetNwShaderState(void) const { return m_ss; }
 


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  //
  // friendにも公開していない非公開メンバ
  //
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
private:
  void flushCommandBuffer(void);
  //void updateCommandBuffer(void);

private:
// numberをalignmentでアラインメントした数を得る
#define ALIGN_NUMBER(number,alignment) ( ((number)+((alignment)-1)) & (~((alignment)-1)) )
  enum
  {
    ALIGNMENT           = 4,
    DCS_BUFF_BYTE_SIZE  = ALIGN_NUMBER( sizeof(nn::gr::CTR::CommandBufferJumpHelper), ALIGNMENT ),
    SS_BUFF_BYTE_SIZE   = ALIGN_NUMBER( sizeof(nw::h3d::ShaderState), ALIGNMENT )
  };
#undef ALIGN_NUMBER

private:
  u8  m_dcs_buff[DCS_BUFF_BYTE_SIZE];
  u8  m_ss_buff[SS_BUFF_BYTE_SIZE];
  nn::gr::CTR::CommandBufferJumpHelper*  m_dcs;
  nw::h3d::ShaderState*        m_ss;
  AddressType  m_begin_addr;
  AddressType  m_end_addr;
};



}  // namespace g3d
}  // namespace grp
}  // namespace gfl



#endif  // GFL_GRP_G3D_H3D_USE



#endif // __GFL_G3DH3DCOMMAND_H__

