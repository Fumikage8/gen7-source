#ifndef __GFL_G3DIANIMATION_H__
#define __GFL_G3DIANIMATION_H__
#pragma once
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_G3dIAnimation.h
 *	@brief  3Dアニメーションのインターフェース
 *	@author	Koji Kawada
 *	@date		2010.10.12
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#if 0
//純粋仮想関数(PV, Pure Virtual)を持つ抽象クラス(Abstract)でインターフェース(Interface)を提供する。
//ImplementもI始まりなので困る。
#endif

// CTR_SDK

// NW4C
#include <nw/gfx.h>

// gflib
#include <gfl_Macros.h>
#include <gfl_Heap.h>

// gflib grp g3d
#include <grp/g3d/gfl_G3dObject.h>
#include <grp/g3d/gfl_G3dResource.h>
#include <grp/g3d/gfl_G3dResAnim.h>

namespace gfl {
namespace grp {
namespace g3d {

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------
//-------------------------------------
///	3Dアニメーションのインターフェースクラス
//=====================================
class IAnimation : public Object
{
  GFL_FORBID_COPY_AND_ASSIGN(IAnimation);


  friend class Animation;
  friend class UnitAnimation;
  friend class AnimationSlot;
  friend class AnimationManager;


public:
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションのタイプを得る
   *
   *  @retval        Type     アニメーションのタイプ
   */
  //-----------------------------------------------------------------------------
  virtual ResAnim::Type GetType(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの数を得る
   *
   *  @retval        s32     アニメーションの数
   */
  //-----------------------------------------------------------------------------
  virtual s32 GetAnimationNum(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションのフレームを設定する
   *
   *  @param[in]     frame      フレーム
   */
  //-----------------------------------------------------------------------------
  virtual void SetFrame(f32 frame) = 0;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションのフレームを取得する
   *
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  virtual f32 GetFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの更新フレームを設定する
   *                 0.0fで停止、1.0fで等倍、2.0fで2倍速、-1.0fで逆等倍再生
   *
   *  @param[in]     step_frame      更新フレーム
   */
  //-----------------------------------------------------------------------------
  virtual void SetStepFrame(f32 step_frame) = 0;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの更新フレームを取得する
   *
   *  @retval        更新フレーム
   */
  //-----------------------------------------------------------------------------
  virtual f32 GetStepFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームを設定する
   *
   *  @param[in]     frame      フレーム
   */
  //-----------------------------------------------------------------------------
  virtual void SetStartFrame(f32 frame) = 0;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームを取得する
   *
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  virtual f32 GetStartFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの終了フレームを設定する
   *
   *  @param[in]     frame      フレーム
   */
  //-----------------------------------------------------------------------------
  virtual void SetEndFrame(f32 frame) = 0;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの終了フレームを取得する
   *
   *  @retval        フレーム
   */
  //-----------------------------------------------------------------------------
  virtual f32 GetEndFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの開始フレームと終了フレームを設定する
   *
   *  @param[in]     start_frame    開始フレーム
   *  @param[in]     end_frame      終了フレーム
   */
  //-----------------------------------------------------------------------------
  virtual void SetStartAndEndFrame(f32 start_frame, f32 end_frame) = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームが開始フレームか否か判定する
   *
   *  @retval        b32    現在のフレームが開始フレームの場合tureを返す
   */
  //-----------------------------------------------------------------------------
  virtual b32 IsFrameStartFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームが終了フレームか否か判定する
   *
   *  @retval        b32    現在のフレームが終了フレームの場合tureを返す
   */
  //-----------------------------------------------------------------------------
  virtual b32 IsFrameEndFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションの現在のフレームがstep_framから見て端フレームか否か判定する
   *
   *  @retval        b32    現在のフレームがstep_framから見て端フレームの場合tureを返す
   */
  //-----------------------------------------------------------------------------
  virtual b32 IsFrameStepTerminalFrame(void) const = 0;

  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションがループ再生か否か取得する
   *
   *  @retval        b32       ループのときtrue、ループでないときfalseを返す
   */
  //-----------------------------------------------------------------------------
  virtual b32 IsLoop(void) const = 0;
  //-----------------------------------------------------------------------------
  /**
   *  @brief         アニメーションにループ再生を設定する
   *
   *  @param[in]     loop    ループのときtrue、ループでないときfalseを設定する
   */
  //-----------------------------------------------------------------------------
  virtual void SetLoop(b32 loop) = 0;

  
protected:
  //-----------------------------------------------------------------------------
  /**
   *  @brief         コンストラクタ
   */
  //-----------------------------------------------------------------------------
  IAnimation(void) {}

  //-----------------------------------------------------------------------------
  /**
   *  @brief         デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~IAnimation() {}  // 抽象クラスには仮想デストラクタを宣言しておくべき


  // friendクラスからのみアクセスしてもよいprivateメンバ変数
private:
  //-----------------------------------------------------------------------------
  /**
   *  @brief         このクラスが保持しているnw::gfx::AnimObject*を取得
   *
   *  @retval        nw::gfx::AnimObject*    このクラスが保持しているnw::gfx::AnimObject
   */
  //-----------------------------------------------------------------------------
  virtual nw::gfx::AnimObject* GetNwAnimObject(void) const = 0;


  // Calculateは基底クラスObjectにある。


};

}  // namespace g3d
}  // namespace grp
}  // namespace gfl

#endif // __GFL_G3DIANIMATION_H__
