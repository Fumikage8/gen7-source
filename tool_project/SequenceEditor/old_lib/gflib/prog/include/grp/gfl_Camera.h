#ifndef __GFL_CAMERA_H__
#define __GFL_CAMERA_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_Camera.h
 *	@brief  シンプルなカメラクラス
 *	@author	tomoya takahashi
 *	@date		2010.10.26
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once

#include <nn.h>
#include <nw.h>

#include <gfl_Math.h>
#include <gfl_Macros.h>

namespace gfl {
namespace grp {


//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------
//-------------------------------------
///	ProjectionType
//=====================================
enum ProjectionType
{
  PROJECTION_FRUSTUM,         // ニアクリッピング面での視錐台を元にした射影行列
  PROJECTION_PERSPECTIVE,     // 視野角とアスペクト比から生成する射影行列
  PROJECTION_ORTHO,           // 正射影

  PROJECTION_TYPE_NUM
};

//デフォルト設定
static const f32 CAMERA_DEFAULT_FOVY   = GFL_MATH_DEG_TO_RAD(40);
static const f32 CAMERA_DEFAULT_ASPECT = 5.0f / 3.0f;
static const f32 CAMERA_DEFAULT_NEAR   = 0.1f;
static const f32 CAMERA_DEFAULT_FAR    = 800.0f;
static const gfl::math::PivotDirection CAMERA_DEFAULT_PIVOT  = gfl::math::PIVOT_UPSIDE_TO_TOP;

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------
//-------------------------------------
///	View情報
//=====================================
typedef struct {
  gfl::math::VEC3 pos;        //カメラ座標
  gfl::math::VEC3 up;         //上方向
  gfl::math::VEC3 target;     //ターゲット座標
} ViewParam;

//-------------------------------------
///	Projection情報
//=====================================
typedef struct {
  ProjectionType            proj_type;    //射影情報タイプ
  union
  {
    struct
    {
      f32 l;      // ニアクリッピング面の視錐台左辺のX座標
      f32 r;      // ニアクリッピング面の視錐台右辺のX座標
      f32 b;      // ニアクリッピング面の視錐台下辺のY座標
      f32 t;      // ニアクリッピング面の視錐台上辺のY座標
    }frustum;

    struct
    {
      f32 fovy;   // 縦方向の視野角(Radian)
      f32 aspect; // 視野のアスペクト比(幅/高さ)
    }perspective;

    struct
    {
      f32 l;      // ニアクリッピング面の視錐台左辺のX座標
      f32 r;      // ニアクリッピング面の視錐台右辺のX座標
      f32 b;      // ニアクリッピング面の視錐台下辺のY座標
      f32 t;      // ニアクリッピング面の視錐台上辺のY座標
    }ortho;
  };

  f32                       near;       //ニアの距離
  f32                       far;        //ファーの距離
  gfl::math::PivotDirection pivot;      //回転処理設定
} ProjectionParam;

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------
class Camera
{
  // コピーコンストラクタ＋代入演算子禁止
  GFL_FORBID_COPY_AND_ASSIGN(Camera);

public:
  //-----------------------------------------------------------------------------
  /**
   *      コンストラクタ/デストラクタ
   */
  //-----------------------------------------------------------------------------
  Camera(void);
  ~Camera();

  //----------------------------------------------------------------------------
  /**
   *	@brief  射影行列の初期化　Frustum方式
   *
   *	@param	l         // ニアクリッピング面の視錐台左辺のX座標
   *	@param  r         // ニアクリッピング面の視錐台右辺のX座標
   *	@param  b         // ニアクリッピング面の視錐台下辺のY座標
   *	@param  t         // ニアクリッピング面の視錐台上辺のY座標
   *	@param  near      // ニア面の距離
   *	@param  far       // ファー面の距離
   *	@param  pivot     // 回転処理設定
   */
  //-----------------------------------------------------------------------------
  void SetUpFrustum( f32 l, f32 r, f32 b, f32 t, f32 near, f32 far, gfl::math::PivotDirection pivot );

  //----------------------------------------------------------------------------
  /**
   *	@brief  射影行列の初期化　Perspective方式
   *
   *	@param	fovy      // 縦方向の視野角(Radian)
   *	@param  aspect    // 視野のアスペクト比（幅/高さ）
   *	@param  near      // ニア面の距離
   *	@param  far       // ファー面の距離
   *	@param  pivot     // 回転処理設定
   */
  //-----------------------------------------------------------------------------
  void SetUpPerspective( f32 fovy, f32 aspect, f32 near, f32 far, gfl::math::PivotDirection pivot );

  //----------------------------------------------------------------------------
  /**
   *	@brief  射影行列の初期化　Ortho方式
   *
   *	@param	l         // ニアクリッピング面の視錐台左辺のX座標
   *	@param  r         // ニアクリッピング面の視錐台右辺のX座標
   *	@param  b         // ニアクリッピング面の視錐台下辺のY座標
   *	@param  t         // ニアクリッピング面の視錐台上辺のY座標
   *	@param  near      // ニア面の距離
   *	@param  far       // ファー面の距離
   *	@param  pivot     // 回転処理設定
   */
  //-----------------------------------------------------------------------------
  void SetUpOrtho( f32 l, f32 r, f32 b, f32 t, f32 near, f32 far, gfl::math::PivotDirection pivot );

  //----------------------------------------------------------------------------
  /**
   *	@brief  行列直接渡しによる　射影行列の初期化
   *
   *	@param	projection  射影行列
   *	行列直接渡しの場合、const_dataモードとなり、値の変更が反映されません。
   */
  //-----------------------------------------------------------------------------
  void SetUpProjection( const gfl::math::MTX44& projection );


  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラ行列の初期化　
   *
   *	@param	pos         // カメラ座標
   *	@param	up          // カメラ上方向
   *	@param	target      // ターゲット座標
   */
  //-----------------------------------------------------------------------------
  void SetUpLookAt( const gfl::math::VEC3& pos, const gfl::math::VEC3& up, const gfl::math::VEC3& target );


  //----------------------------------------------------------------------------
  /**
   *	@brief  行列直接渡しによる　カメラ行列の初期化
   *
   *	@param	view  ビュー行列
   *	行列直接渡しの場合、const_dataモードとなり、値の変更が反映されません。
   */
  //-----------------------------------------------------------------------------
  void SetUpLookAt( const gfl::math::MTX34& view );

  //----------------------------------------------------------------------------
  /**
   *	@brief  Projectionパラメータを使用したProjection行列初期化
   *
   *	@param	param Projectionパラメータ
   */
  //-----------------------------------------------------------------------------
  void SetUpProjectionParam( const ProjectionParam& param );

  //----------------------------------------------------------------------------
  /**
   *	@brief  Viewパラメータを使用したView行列初期化
   *
   *	@param	param Viewパラメータ
   */
  //-----------------------------------------------------------------------------
  void SetUpViewParam( const ViewParam& param );


  //----------------------------------------------------------------------------
  /**
   *	@brief  ViewParamを取得
   *
   *	@return ViewParam
   */
  //-----------------------------------------------------------------------------
  const ViewParam& GetViewParam( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  ProjectionParamを取得
   *
   *	@return ProjectionParam
   */
  //-----------------------------------------------------------------------------
  const ProjectionParam& GetProjectionParam( void ) const;
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  ViewMtxを取得
   *
   *	@return ViewMtx
   */
  //-----------------------------------------------------------------------------
  const gfl::math::MTX34& GetViewMtx( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  ProjectionMtxを取得
   *
   *	@return ProjectionMtx
   */
  //-----------------------------------------------------------------------------
  const gfl::math::MTX44& GetProjectionMtx( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  パラメータの変更をView行列に反映する。
   */
  //-----------------------------------------------------------------------------
  void UpdateLookAt(void);

  //----------------------------------------------------------------------------
  /**
   *	@brief  パラメータの変更をProjection行列に反映する。
   */
  //-----------------------------------------------------------------------------
  void UpdateProjection(void);

  //----------------------------------------------------------------------------
  /**
   *	@brief  ファークリップ面の距離を設定
   *
   *	@param	far
   */
  //-----------------------------------------------------------------------------
  void SetFar( f32 far );

  //----------------------------------------------------------------------------
  /**
   *	@brief  ファークリップ面の距離を取得
   *
   *	@return　ファークリップ面の距離
   */
  //-----------------------------------------------------------------------------
  f32 GetFar( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  ニアクリップ面の距離を設定
   *
   *	@param	near
   */
  //-----------------------------------------------------------------------------
  void SetNear( f32 near );

  //----------------------------------------------------------------------------
  /**
   *	@brief  ニアクリップ面の距離を取得
   *
   *	@return　ニアクリップ面の距離
   */
  //-----------------------------------------------------------------------------
  f32 GetNear( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  Frustum形式の情報を設定
   *
   *	@param	l         // ニアクリッピング面の視錐台左辺のX座標
   *	@param  r         // ニアクリッピング面の視錐台右辺のX座標
   *	@param  b         // ニアクリッピング面の視錐台下辺のY座標
   *	@param  t         // ニアクリッピング面の視錐台上辺のY座標
   */
  //-----------------------------------------------------------------------------
  void SetFrustum( f32 l, f32 r, f32 b, f32 t );

  //----------------------------------------------------------------------------
  /**
   *	@brief  射影行列の初期化　Perspective方式
   *
   *	@param	fovy      // 縦方向の視野角(Radian)
   *	@param  aspect    // 視野のアスペクト比（幅/高さ）
   */
  //-----------------------------------------------------------------------------
  void SetPerspective( f32 fovy, f32 aspect );

  //----------------------------------------------------------------------------
  /**
   *	@brief  射影行列の初期化　Ortho方式
   *
   *	@param	l         // ニアクリッピング面の視錐台左辺のX座標
   *	@param  r         // ニアクリッピング面の視錐台右辺のX座標
   *	@param  b         // ニアクリッピング面の視錐台下辺のY座標
   *	@param  t         // ニアクリッピング面の視錐台上辺のY座標
   */
  //-----------------------------------------------------------------------------
  void SetOrtho( f32 l, f32 r, f32 b, f32 t );


  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラ座標を設定
   *
   *	@param	pos   カメラ座標
   */
  //-----------------------------------------------------------------------------
  void SetCameraPos( const gfl::math::VEC3& pos );

  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラ座標を取得
   *
   *	@retval	カメラ座標
   */
  //-----------------------------------------------------------------------------
  const gfl::math::VEC3& GetCameraPos( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラ上方向を設定
   *
   *  @param  up  カメラ上方向
   */
  //-----------------------------------------------------------------------------
  void SetCameraUp( const gfl::math::VEC3& up );

  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラ上方向を取得
   *
   *  @retval  カメラ上方向
   */
  //-----------------------------------------------------------------------------
  const gfl::math::VEC3& GetCameraUp( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラターゲットを設定
   *
   *  @param  target  カメラターゲット
   */
  //-----------------------------------------------------------------------------
  void SetCameraTarget( const gfl::math::VEC3& target );

  //----------------------------------------------------------------------------
  /**
   *	@brief  カメラターゲットを取得
   *
   *  @retval  カメラターゲット
   */
  //-----------------------------------------------------------------------------
  const gfl::math::VEC3& GetCameraTarget( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  デバッグ用パラメータ表示
   *
   *  @retval  カメラターゲット
   */
  //-----------------------------------------------------------------------------
  void Dump( void ) const;

private:
  // カメラパラメータ
  ViewParam           m_viewParam;
  ProjectionParam     m_projParam;

  // 値の変更が可能かどうか
  bool                m_const_view;
  bool                m_const_proj;


  // 行列
  gfl::math::MTX34 m_view;
  gfl::math::MTX44 m_proj;
};



} /* namespace end grp */
} /* namespace end gfl */
#endif // __GFL_CAMERA_H__
