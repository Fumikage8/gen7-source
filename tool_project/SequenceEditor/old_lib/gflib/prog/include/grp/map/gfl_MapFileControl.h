#ifndef __GFL_MAPFILECONTROL_H__
#define __GFL_MAPFILECONTROL_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_MapFileControl.h
 *	@brief  マップ管理　ファイルコントロール
 *	@author	tomoya takahashi
 *	@date		2011.01.28
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once


#include <gfl_Macros.h>
#include <gfl_Math.h>

namespace gfl{
namespace grp{
namespace map{

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	一度のアトリビュート取得最大数
//=====================================
static const u32 ATTR_INFO_BUFF_MAX = 16;

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-------------------------------------
///	シグネチャタイプ
//=====================================
typedef u16 SignatureType;


//-------------------------------------
///	アトリビュートタイプ
//=====================================
typedef u32 Attr;

//-------------------------------------
///	アトリビュート定義
//=====================================
struct AttrData{
  gfl::math::VEC3 normal;     // 地面の法泉
  Attr            attr;       // アトリビュート
  f32             height;     // 高さ
  s32             height_map_id;// 地面データID
};

//-------------------------------------
///	アトリビュート情報
//=====================================
struct AttrInfo{
  AttrData  mapAttr[ ATTR_INFO_BUFF_MAX ];  // アトリビュート配列
  u32       mapAttrCount;                   // ヒットしたアトリビュートの数
};



//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

// 仮想宣言
class FileControl;
class System;

//-------------------------------------
///	ファイルコントロール配列
//=====================================
class FileControlArray{
  GFL_FORBID_COPY_AND_ASSIGN( FileControlArray );

public:
  //-----------------------------------------------------------------------------
  /**
   *    コンストラクタ・デストラクタ
   */
  //-----------------------------------------------------------------------------
  FileControlArray( void );
  ~FileControlArray();

  //-----------------------------------------------------------------------------
  /**
   *  @brief  初期化
   *
   *  @param  arrayNum    配列数
   *  @param  p_heap      ヒープ
   */
  //-----------------------------------------------------------------------------
  void Initialize( u32 arrayNum, gfl::heap::HeapBase* p_heap );
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  破棄処理
   */
  //-----------------------------------------------------------------------------
  void Finalize( void );

  //-----------------------------------------------------------------------------
  /**
   *    ファイルコントロールの登録
   */
  //-----------------------------------------------------------------------------
  b32 SetFileControl( FileControl* p_control );


  //-----------------------------------------------------------------------------
  /**
   *    シグネチャのファイルコントロール取得
   */
  //-----------------------------------------------------------------------------
  FileControl* GetFileControl( SignatureType signature ) const;

private:
  FileControl** m_ppFileControl;
  u32           m_FileControlNum;




  // あいているバッファINDEXを取得
  u32 GetClearIndex( void ) const;
};



//-------------------------------------
///	ファイルコントロール
//
//
//  ファイルタイプのセットアップに必要な処理、
//  情報を管理するクラスの基底クラス。
//　
//　ファイル識別のため、
//  それぞれのファイルタイプごとに、
//  固有のu16サイズのSignatureを設定する必要があります。
//
//  各ブロックのファイル読み込みが完了すると、Systemクラスから、SetUp関数がコールされます。
//  SetUp関数ないで、描画できる状態にセットアップしてください。
//
//  アトリビュートを取得するための処理は、GetAttr関数をオーバーライトしてください。
//=====================================
class FileControl{
  GFL_FORBID_COPY_AND_ASSIGN( FileControl );

public:
  //-----------------------------------------------------------------------------
  /**
   *      コンストラクタ・デストラクタ
   */
  //-----------------------------------------------------------------------------
  FileControl( void ){}
  virtual ~FileControl(){}

  //----------------------------------------------------------------------------
  /**
   *	@brief  シグネチャの取得
   *
   *	@return シグネチャ
   */
  //-----------------------------------------------------------------------------
  virtual SignatureType GetSignature( void ) const{ return 0; }

  //----------------------------------------------------------------------------
  /**
   *	@brief  ブロック情報を設定  ブロックのファイル読み込みが完了すると
   *	　　　　この関数がコールされる。　この内部で、描画環境を整える必要がある。
   *
   *	@param  p_map   マップブロック情報
   *
   *	@retval true  完了
   *	@retval false 途中
   */
  //-----------------------------------------------------------------------------
  virtual b32 SetUp( gfl::grp::map::System* p_map );

  //----------------------------------------------------------------------------
  /**
   *	@brief    アトリビュート情報を取得
   *
   *	@param	cp_map      マップブロック情報
   *	@param  p_attrInfo  アトリビュート情報格納先
   *	@param  cp_pos      座標をあらわすワーク
   *	@param  cp_way      地面方向（Default　(0,-1,0)
   *	@param  map_width   マップブロックのサイズ
   */
  //-----------------------------------------------------------------------------
  virtual void GetAttr( const gfl::grp::map::System* cp_map, AttrInfo* p_attrInfo, const void* cp_pos, const gfl::math::VEC3* cp_way, f32 map_width );


  //----------------------------------------------------------------------------
  /**
   *	@brief    アトリビュート情報の初期化処理
   *
   *	@param  p_attrInfo  アトリビュート情報格納先
   */
  //-----------------------------------------------------------------------------
  static void ClearAttrInfo( AttrInfo* p_attrInfo );

private:

};



} // namespace map
} // namespace grp
} // namespace gfl


#endif // __GFL_MAPFILECONTROL_H__
