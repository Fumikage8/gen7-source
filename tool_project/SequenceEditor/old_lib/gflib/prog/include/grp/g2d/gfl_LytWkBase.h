#ifndef __GFL_LYTWKBASE_H__
#define __GFL_LYTWKBASE_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_LytWkBase.h
 *	@brief  レイアウトワークベース
 *	@author	tomoya takahshi
 *	@date		2010.10.08
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once

#include <nw.h>
#include <nw/lyt.h>

#include <gflib.h>

#include <grp/g2d/gfl_G2dEnv.h>

#include <grp/g2d/gfl_LytRes.h>

#include <gfl_Math.h>
#include <gfl_Heap.h>
#include <gfl_Macros.h>

namespace gfl {
namespace grp {
namespace g2d {

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------


//-------------------------------------
///	不正値
//=====================================
enum {
  LYTWKBASE_ANIMEIDX_ERROR = 0xffff,

  LYTWKBASE_ENUM_END
} ;



//-------------------------------------
///	全レイアウトワーク　共有情報
//=====================================
typedef struct {
  nw::lyt::GraphicsResource*  p_globalResource;
  nw::lyt::Drawer*            p_drawer;
  Env                         env[DISPLAY_NORMAL_MAX];
} LytWkBaseGlobalData;


//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
/**
 *      アニメーション管理クラス
 */
//-----------------------------------------------------------------------------
class LytWkAnime
{
  // コピーコンストラクタ＋代入演算子禁止
  GFL_FORBID_COPY_AND_ASSIGN(LytWkAnime);


public:
  // コンストラクタ・デストラクタ
  LytWkAnime(void);
  ~LytWkAnime();
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  初期化
   *
   *	@param  lytwk           NWレイアウトワーク
   *	@param  animTransform   設定アニメトランスフォーム
   *	@param  res             リソース
   *	@param  lytDataID       リソースデータID
   */
  //-----------------------------------------------------------------------------
  void Initialize( nw::lyt::Layout* lytwk, nw::lyt::AnimTransform* animTransform, const LytRes* res, u32 lytDataID, bool isUsingHash, nw::lyt::Layout* layout=NULL );


  //----------------------------------------------------------------------------
  /**
   *	@brief  初期化　共有アニメーションの初期化
   *
   *	@param	lytwk           NWレイアウトワーク
   *  @param  animTransform   設定アニメトランスフォーム
   *	@param  res             リソース
   *	@param  lytDataID       リソースデータID
   *	@param  shareIdx        シェアペインインデックス
   *	@param  ppSrcPane       ソースペイン格納先
   *
   *	@retval true    登録成功
   *	@retval false   登録失敗（基準Paneだった）
   */
  //-----------------------------------------------------------------------------
  bool InitializeShare( nw::lyt::Layout* lytwk, const LytRes* res, void * p_animeRes, u32 shareIdx, nw::lyt::PaneLinkList::Iterator it, nw::lyt::Pane * pSrcPane, nw::lyt::Group* pGroup );



  //----------------------------------------------------------------------------
  /**
   *	@brief  破棄
   */
  //-----------------------------------------------------------------------------
  void Finalize( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief  初期化づみチェック
   */
  //-----------------------------------------------------------------------------
  bool IsInitialized( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  通常バインド処理
   *
   *	@param	lytwk ワーク
   *	@param  is_enable 初期状態　
   */
  //-----------------------------------------------------------------------------
  void Bind( nw::lyt::Layout* lytwk, bool is_enable = false, bool is_useHash=false );

  //----------------------------------------------------------------------------
  /**
   *	@brief  共有アニメーションのバインド処理
   *
   *	@param	lytwk ワーク
   *	@param  res   リソースクラス
   *	@param  pSrcPane  ソースペイン
   */
  //-----------------------------------------------------------------------------
  void BindShare( nw::lyt::Layout* lytwk, const LytRes* res, nw::lyt::Pane * pSrcPane );

  //----------------------------------------------------------------------------
  /**
   *	@brief  通常アンバインド処理
   *
   *	@param	lytwk ワーク
   */
  //-----------------------------------------------------------------------------
  void UnBind( nw::lyt::Layout* lytwk );

  //----------------------------------------------------------------------------
  /**
   *	@brief  共有アニメーションのアンバインド処理
   *
   *	@param	lytwk ワーク
   */
  //-----------------------------------------------------------------------------
  void UnBindShare( nw::lyt::Layout* lytwk );


  //----------------------------------------------------------------------------
  /**
   *	@brief  アニメーションの有効・無効設定
   */
  //-----------------------------------------------------------------------------
  void SetEnable( nw::lyt::Layout* lytwk, bool flag );

  //----------------------------------------------------------------------------
  /**
   *	@brief  アニメーションが有効かチェック
   */
  //-----------------------------------------------------------------------------
  bool IsEnable( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  リソースから　ShareInfo内のグループを取得
   *
   *  @param  lytwk         レイアウトワーク
   *	@param	res           リソース
   *	@param	lytDataID     リソースデータID
   *	@param  shareGroupIdx Shareグループインデックス
   */
  //-----------------------------------------------------------------------------
  static bool GetResShareInfoInPaneNum( const nw::lyt::Layout* lytwk, const nw::lyt::AnimResource& animRes, const LytRes* res, u32 shareGroupIdx, nw::lyt::Pane** ppSrcPane, nw::lyt::Group** ppGroup, const char ** ppGroupName, u32 groupIndex );



  //----------------------------------------------------------------------------
  /**
   *	@brief  shareグループ内での、グループIDを取得
   *
   *  @param  lytwk         レイアウトワーク
   *	@param	res           リソース
   *	@param	animRes       アニメーションリソース
   *	@param  shareGroupIdx Shareグループインデックス
   *	@param  cp_panename   ペイン名
   *
   *	@return グループ内のペインインデックス
   */
  //-----------------------------------------------------------------------------
  static s32 GetResShareGroupInPaneIndex( const nw::lyt::Layout* lytwk, const LytRes* res, const nw::lyt::AnimResource& animRes, u32 shareGroupIdx, const char* cp_panename, nw::lyt::Pane** ppSrcPane, nw::lyt::Group** ppGroup );
  



  

  //----------------------------------------------------------------------------
  /**
   *	@brief  アニメーションフレームを進める
   *
   *	@param	frame 進めるフレーム数
   *
   *	@retval true      アニメーション終了
   *	@retval false     アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool AddAnimeFrame( f32 frame );


  //----------------------------------------------------------------------------
  /**
   *	@brief  アニメーションフレームの終了をチェック
   *
   *	@retval true      アニメーション終了
   *	@retval false     アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeEnd( void ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアニメーション設定
   *
   *	@param	flag  true  オートアニメON    false オートアニメ
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnime( bool flag );

  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアニメーション設定　取得
   *
   *	@retval true    オートアニメON
   *	@retval false   オートアニメOFF
   */
  //-----------------------------------------------------------------------------
  bool IsAutoAnime( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアニメーションスピード設定
   *
   *	@param	speed オートアニメーションスピード
   */
  //-----------------------------------------------------------------------------
  inline void SetAutoAnimeSpeed( f32 speed ){ m_AutoAnimeSpeed = speed; }

  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアニメーションスピード取得
   *	@return オートアニメーションスピード
   */ 
  //-----------------------------------------------------------------------------
  inline f32 GetAutoAnimeSpeed( void ) const { return m_AutoAnimeSpeed; }

  //----------------------------------------------------------------------------
  /**
   *	@brief Lytのアニメーションクラスを取得
   */
  //-----------------------------------------------------------------------------
  nw::lyt::AnimTransform* GetAnimeWork( void ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief  共有アニメーションかチェック
   */
  //-----------------------------------------------------------------------------
  bool IsShareAnime(void) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief  バインドされているかチェック
   */
  //-----------------------------------------------------------------------------
  bool IsBindAnime( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアンバインド設定
   */
  //-----------------------------------------------------------------------------
  inline void SetAutoUnbind( bool flag ) { m_IsAutoUnbind = flag; }

  //----------------------------------------------------------------------------
  /**
   *	@brief  オートアンバインドなのかチェック
   *
   *	@retval true    オートアンバインド
   *	@retval false   オートアンバインドではない
   */
  //-----------------------------------------------------------------------------
  inline bool IsAutoUnbind( void ) const { return m_IsAutoUnbind; }

private:
  

private:
  bool                    m_Initialize;     // 初期化フラグ
  bool                    m_AutoAnime;      // オートアニメーションフラグ
  bool                    m_BindFlag;      // バインドされているか？
  bool                    m_Enable;         // アニメーション有効状態か？
  bool                    m_IsAutoUnbind;   // アニメーション完了後、にオートアンバインド
  nw::lyt::AnimTransform* m_AnimTransform;  // アニメーション管理クラス
  nw::lyt::AnimResource m_AnimRes;

  f32                     m_AutoAnimeSpeed; // オートアニメスピード

  // 共有アニメーションでの設定
  bool                    m_Share;      // 共有アニメか。
  int                     m_ShareIndex; // シェアインデックス
  nw::lyt::Pane*          m_Pane;       // シェアペイン
};

class LytWk;
//-----------------------------------------------------------------------------
/**
 *					LytWkBaseクラス宣言
 *
 *					・レイアウトワーク　生成・破棄
 *					・各種ペイン操作
 *					・Group単位の操作
 *					・アニメーション操作
*/
//-----------------------------------------------------------------------------
class LytWkBase
{
  // コピーコンストラクタ＋代入演算子禁止
  GFL_FORBID_COPY_AND_ASSIGN(LytWkBase);


public:

  // コンストラクタ・デストラクタ
  LytWkBase(void);
  ~LytWkBase();


  //----------------------------------------------------------------------------
  /**
   *	@brief    レイアウトワーク　初期化
   *
   *  @param  heap_allocator        アロケータ−
   *  @param  device_allocator      デバイスアロケータ−
   *	@param  res                   リソース情報
   *	@param  lytDataID             レイアウトデータID
   *	@param  animeNum              アニメーション最大登録数
   *	@param  globalData            共有情報
   *	@param  createPaneTbl         ペインテーブル生成
   *	@param  createPaneTblWithHash 高速検索用にハッシュキーを作る（消費メモリ増）
   */
  //-----------------------------------------------------------------------------
  void Initialize( heap::NwAllocator* heap_allocator, heap::NwAllocator* device_allocator,
                   const LytRes* res, u32 lytDataID, u32 animeNum, LytWkBaseGlobalData* globalData,
                   b32 createPaneTblFlag, b32 createPaneTblWithHash = false );


  //----------------------------------------------------------------------------
  /**
   *	@brief    レイアウトワーク　破棄
   */
  //-----------------------------------------------------------------------------
  void Finalize( void );
  
  //----------------------------------------------------------------------------
  /**
   *	@brief    レイアウトワーク　初期化済みチェック
   *
   *	@retval true    初期化完了
   *	@retval false   初期化前
   */
  //-----------------------------------------------------------------------------
  bool IsInitialized(void) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief    レイアウトワーク　更新
   */
  //-----------------------------------------------------------------------------
  void Update( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief    レイアウトワーク　描画
   *
   *	@param  lod           描画面
   *	@param  cameraType    カメラタイプ
   *	@param  renderTarget  レンダーターゲット
   */
  //-----------------------------------------------------------------------------
  void Draw( DisplayType lod, Env::CameraType cameraType, const RenderTarget& renderTarget );


  //----------------------------------------------------------------------------
  /**
   *	@brief  レイアウトワーク　グループIDの設定
   *
   *	@param	groupID   グループID
   */
  //-----------------------------------------------------------------------------
  void SetWkGroupID( u16 groupID );

  //----------------------------------------------------------------------------
  /**
   *	@brief  レイアウトワーク  グループIDの取得
   *
   *	@return グループID
   */
  //-----------------------------------------------------------------------------
  u16 GetWkGroupID( void ) const;
  

  //----------------------------------------------------------------------------
  /**
   *	@brief  UpperLowerに対応したユーザー描画環境データ設定
   *
   *	@param	upperEnv    上画面用ENV
   *	@param	lowerEnv    下画面用ENV
   *
   *	*描画にGlobalEnvではなく引数のENVを使用するようになります。
   *	*戻すには、SetGlobalEnv()を呼んでください。
   *
   */
  //-----------------------------------------------------------------------------
  void SetUserEnv( const gfl::grp::g2d::Env* upperEnv, const gfl::grp::g2d::Env* lowerEnv );

  //----------------------------------------------------------------------------
  /**
   *	@brief  グローバルENVを使用するように設定
   */
  //-----------------------------------------------------------------------------
  void SetGlobalEnv( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief  リンクリスト　1つ前のワーク設定<LytWk型>
   *
   *	@param	１つ前のワーク
   */
  //-----------------------------------------------------------------------------
  void SetPrev( LytWk* prev );

  //----------------------------------------------------------------------------
  /**
   *	@brief  リンクリスト　1つ前のワーク取得<LytWk型>
   *
   *	@retval	１つ前のワークreinterpret_cast<LytWk*>として使用してください。
   */
  //-----------------------------------------------------------------------------
  LytWk* GetPrev( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  リンクリスト　1つ次のワーク設定<LytWk型>
   *
   *	@param	１つ次のワーク
   */
  //-----------------------------------------------------------------------------
  void SetNext( LytWk* next );

  //----------------------------------------------------------------------------
  /**
   *	@brief  リンクリスト　1つ次のワーク取得<LytWk型>
   *
   *	@retval	１つ次のワークreinterpret_cast<LytWk*>として使用してください。
   */
  //-----------------------------------------------------------------------------
  LytWk* GetNext( void ) const;


  //============================================================================
  /**
   *	ペイン操作
   */
  //=============================================================================
  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのペインを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval ペイン
   *	@retval NULL    Indexが不正
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Pane* GetPane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのピクチャーペインを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval ピクチャーペイン
   *	@retval NULL Indexが不正か、PicturePaneでない
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Picture* GetPicturePane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのテキストボックスペインを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval テキストボックスペイン
   *	@retval NULL Indexが不正か、TextBoxPaneでない
   */
  //-----------------------------------------------------------------------------
  nw::lyt::TextBox* GetTextBoxPane( u32 paneIndex ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのテキストボックスペイン　ストリングバッファの確保
   *
   *	@param	paneIndex ペインインデックス
   *	@param  minLen    文字列数
   */
  //-----------------------------------------------------------------------------
  void AllocTextBoxPaneStringBuffer( u16 paneIndex, u16 minLen ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのwindowペインを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval windowペイン
   *	@retval NULL Indexが不正かwindowPaneでない
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Window* GetWindowPane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのバウンディングボックスペインを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval バウンディングボックスペイン
   *	@retval NULL Indexが不正かboundingPaneでない
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Bounding* GetBoundingPane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  PaneIndexのマテリアルを取得
   *
   *	@param	paneIndex GFL_LytSys_ResrouceConv.rbから出力される.._pane.hのインデックス
   *
   *	@retval マテリアル情報
   *	@retval NULL  Indexが不正かマテリアルではない
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Material* GetMaterial( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  ヒットチェックが可能か取得
   *
   *	@retval true    可能
   *	@retval false   不可能
   */
  //-----------------------------------------------------------------------------
  bool IsHitCheckOK( void ) const;



  //============================================================================
  /**
   *	基本操作
   */
  //=============================================================================
  
  //----------------------------------------------------------------------------
  /**
   *	@brief    オート描画のON/OFF設定
   *  
   *	@param	  flag    フラグ  true:ON   false:OFF
   */
  //-----------------------------------------------------------------------------
  void SetAutoDrawFlag( bool flag );


  //----------------------------------------------------------------------------
  /**
   *	@brief    オート描画のON/OFF 取得
   *  
   *	@retval true    ON
   *	@retval false   OFF
   */
  //-----------------------------------------------------------------------------
  bool IsAutoDraw( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  処理優先順位の設定
   *
   *	@param	pri   優先順位（ 0 > 0xffff )
   *
   *	UpdateAllとDrawAllを行う際の優先順位です。
   */
  //-----------------------------------------------------------------------------
  void SetPriority( u16 pri );

  //----------------------------------------------------------------------------
  /**
   *	@brief  処理優先順位の取得
   *
   *	@retval	優先順位（ 0 > 0xffff )
   *
   *	UpdateAllとDrawAllを行う際の優先順位です。
   */
  //-----------------------------------------------------------------------------
  u16 GetPriority( void ) const;
  
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  座標の設定
   *
   *	@param	pos
   */
  //-----------------------------------------------------------------------------
  void SetTranslate( const gfl::math::VEC3& pos );

  //----------------------------------------------------------------------------
  /**
   *	@brief  座標の取得
   *
   *	@param	p_pos 座標格納先
   */
  //-----------------------------------------------------------------------------
  void GetTranslate( gfl::math::VEC3* p_pos ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  拡大の設定
   *
   *	@param	scale   スケーリング値
   */
  //-----------------------------------------------------------------------------
  void SetScale( const gfl::math::VEC2& scale );
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  拡大の取得
   *
   *	@param p_scale スケーリング値格納先
   */
  //-----------------------------------------------------------------------------
  void GetScale( gfl::math::VEC2* p_scale ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  回転の設定
   *
   *	@param	rotate   各軸の回転値
   */
  //-----------------------------------------------------------------------------
  void SetRotate( const gfl::math::VEC3& rotate );

  //----------------------------------------------------------------------------
  /**
   *	@brief  回転の取得
   *
   *	@param	p_rotate   各軸の回転値
   */
  //-----------------------------------------------------------------------------
  void GetRotate( gfl::math::VEC3* p_rotate ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  カリングフラグの設定
   *
   *	@param	flag  フラグ
   *
   *	カリングをfalseにするということは、
   *	左、右、下すべての画面でレンダリング処理が実行されるということですので、
   *	処理負荷に注意してください。
   */
  //-----------------------------------------------------------------------------
  void SetCullingFlag( bool flag );

  //----------------------------------------------------------------------------
  /**
   *	@brief  カリングフラグの取得
   *
   *	@retval	true  カリング処理ON
   *	@retval false カリング処理OFF
   */
  //-----------------------------------------------------------------------------
  bool IsCullingFlag( void ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  描画するディスプレイタイプを設定
   *
   *	@param	lod   描画するディスプレイタイプ
   */
  //-----------------------------------------------------------------------------
  void SetDrawDispType( DisplayType lod );

  //----------------------------------------------------------------------------
  /**
   *	@brief  描画するディスプレイタイプの取得
   *
   *	@return 描画するディスプレイタイプ
   */
  //-----------------------------------------------------------------------------
  DisplayType GetDrawDispType( void ) const;

  //============================================================================
  /**
   *	アニメーション関連
   */
  //=============================================================================
  //----------------------------------------------------------------------------
  /**
   *	@brief  空いているアニメーションインデックスを取得
   *	
   *	@retval 空いているアニメーションインデックス
   *	@retval LYTWKBASE_ANIMEIDX_ERROR    空いてない
   */
  //-----------------------------------------------------------------------------
  u32 GetClearAnimeIndex( void ) const;
  
  //----------------------------------------------------------------------------
  /**
   *	@brief    アニメーション情報の生成
   *
   *  @param  anmaIdx       生成先アニメーションインデックス
   *	@param  res           リソース情報
   *	@param  lytDataID     アニメーションリソースのデータID
   *	@param  is_bind       バインド状態で設定するか
   *	@param  is_useHash    ペインネームハッシュキーを利用するか
   *
   *	@retval アニメーション生成数
   */
  //-----------------------------------------------------------------------------
  void CreateAnime( u32 anmIdx, const LytRes* res, u32 lytDataID, bool is_bind = false, bool is_useHash=false );
  
  //----------------------------------------------------------------------------
  /**
   *	@brief    共有アニメーションの生成
   *
   *	@param	  anmStartIdx 生成開始アニメーションインデックス
   *	@param    res         リソース情報
   *	@param    lytDataID   アニメーションリソースのデータID
   *	@param  maxNum          登録最大数（0だとすべて登録）
   *	@param  groupIndex      登録グループインデックス（LYTSYS_PANEINDEX_ERRORだとすべて登録）
   *	@param  paneIndex       登録グループ内ペインインデックス（LYTSYS_PANEINDEX_ERRORだとすべて登録）
   *
   *	@return 登録数
   */
  //-----------------------------------------------------------------------------
  u32 CreateShareAnime( u32 anmStartIdx, const LytRes* res, u32 lytDataID, u32 maxNum, u32 groupIndex, u32 paneIndex );

  //----------------------------------------------------------------------------
  /**
   *	@brief    アニメーション情報の破棄
   *
   *  @param  anmaIdx       破棄するアニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  void DeleteAnime( u32 anmIdx );


  //----------------------------------------------------------------------------
  /**
   *	@brief    アニメーションインデックス最大値取得
   *
   *  @retval   アニメーションインデックス最大値
   */
  //-----------------------------------------------------------------------------
  u32 GetAnimeMax( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief    アニメーション情報があるかチェック
   *
   *  @param  anmaIdx       アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  bool IsAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの反映
   *
   *  @param  anmIdx    アニメーションIDX
   *  @param  is_auto_unbind   one time アニメーションの場合、アニメーション完了後、unbindする。
   */
  //-----------------------------------------------------------------------------
  void BindAnime( u32 anmIdx, bool is_auto_unbind ); 

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの反映解除
   *
   *  @param  anmIdx    登録先IDX
   */
  //-----------------------------------------------------------------------------
  void UnBindAnime( u32 anmIdx );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    全アニメーションの反映解除
   */
  //-----------------------------------------------------------------------------
  void UnBindAnimeAll( void );



  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションがバインドされているかチェック
   */
  //-----------------------------------------------------------------------------
  bool IsBindAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション設定
   *
   *  @param  anmIdx    アニメーションIDX
   *  @param  flag      ON/OFFフラグ
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnime( u32 anmIdx, bool flag );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーションかチェック
   *
   *  @param  anmIdx    アニメーションIDX
   *
   *  @retval true    オートアニメ
   *  @retval false   非オートアニメ
   */
  //-----------------------------------------------------------------------------
  bool IsAutoAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション スピード設定　（全オートアニメ共通）
   *
   *  @param  speed     アニメーションスピード
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnimeSpeed( f32 speed );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション スピード設定　（個別設定）
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  speed     アニメーションスピード
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnimeSpeed( u32 anmIdx, f32 speed );


  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム設定
   *
   *  @param  anmIdx    アニメーションIDX
   *  @param  frame     アニメーションフレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimeFrame( u32 anmIdx, f32 frame );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム　カウント
   *
   *  @param  anmIdx    アニメーションIDX
   *  @param  frame     アニメーションフレーム
   *
   *  @retval true    アニメーション終了（LOOP設定のときは常にfalse）
   *  @retval false   アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool AddAnimeFrame( u32 anmIdx, f32 frame );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム取得
   *
   *  @param  anmIdx    アニメーションIDX
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimeFrame( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーション最大フレーム取得
   *
   *  @param  anmIdx    アニメーションIDX
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimeMaxFrame( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    ループアニメーションかチェック
   *
   *  @param  anmIdx    アニメーションIDX
   *
   *  @retval true    ループアニメーション
   *  @retval false   ループアニメーションじゃない
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeLoop( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの完了チェック
   *
   *  @param  anmIdx    アニメーションIDX
   *
   *  @retval true    完了
   *  @retval false   途中
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeEnd( u32 anmIdx ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  非表示ペインのアニメーション更新を省略するフラグ
   *	（デフォルトON）
   */
  //-----------------------------------------------------------------------------
  void SetVisiblePaneNotAnimeOption( bool flag );

  //----------------------------------------------------------------------------
  /**
   *	@brief  非表示ペインのアニメーション更新を省略するフラグチェック
   *	@retval true  有効
   *	@retval false 無効
   */
  //-----------------------------------------------------------------------------
  bool IsVisiblePaneNotAnimeOption( void ) const;


  //-----------------使用注意-----------
  //-----------------------------------------------------------------------------
  /**
   *  @brief  コアシステムの取得
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Layout* GetCore(void) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief    描画インフォの取得
   *
   *	@return 描画インフォ
   */
  //-----------------------------------------------------------------------------
  const nw::lyt::DrawInfo* GetDrawInfo(void) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief    DrawInfoに非表示のペインに対して行列計算を行うかどうかを設定する
   *
   *	@return		none
   */
  //-----------------------------------------------------------------------------
	void SetInvisiblePaneCalculateMtx( bool flg );

  //----------------------------------------------------------------------------
  /**
   *	@brief  描画する必要があるかチェック
   *
   *	@retval true    必要がある。
   *	@retval false   必要がない。
   */
  //-----------------------------------------------------------------------------
  b32 IsDrawDisplayType( DisplayType lod ) const;

  //============================================================================
  /**
   *	詳細操作
   */
  //=============================================================================
  //-----------------------------------------------------------------------------
  /**
   *  @brief  IndexのGroupの取得
   *
   *  @retval Groupのインスタンス
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Group* GetGroup( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief    参照レイアウトリソース取得
   *
   *	@return   レイアウトリソース
   */
  //-----------------------------------------------------------------------------
  const LytRes* GetLytRes(void) const;
  
private:
  
  //============================================================================
  /**
   *  メンバ変数
   */
  //=============================================================================
  LytWkBaseGlobalData*          m_globalData;
  bool                          m_Initialize;
  bool                          m_AutoDrawFlag;
  bool                          m_useGlobalEnv;
  bool                          m_hitCheckOk;     // ヒットチェックが可能か
  bool                          m_CullingFlag;  // カリングを行うか。
  u16                           m_Priority;
  u16                           m_WkGroupID;
  nw::lyt::Layout*              m_LytSys;
  nw::lyt::DrawInfo             m_LytDrawInfo;
  const Env*                    m_UserEnv[DISPLAY_NORMAL_MAX];
  LytWkAnime*                   m_AnimArray;
  u32                           m_AnimMax;
  f32                           m_AutoAnimeSpeed;
  DisplayType                   m_DisplayType;  // 描画する面
  nw::lyt::AnimateOpt           m_AnimateOpt;   // アニメーションオプション

  const LytRes*                 m_res;        // 参照リソース保持

  LytWk*                         m_prev;
  LytWk*                         m_next;

  nw::lyt::Pane ** m_ppPaneTbl; ///< ペインテーブル
  
  // ユーザーアロケータ
  // NULLのときは、レイアウトシステムのアロケータを使用する。
  gfl::heap::NwAllocator*   m_pUserAllocator;
  gfl::heap::NwAllocator*   m_pUserDeviceAllocator;

  //============================================================================
  /**
   *  オートアニメ
   */
  //=============================================================================
  void UpdateAutoAnime( void );
  
  b32 IsCulling( const Camera& camera ) const ;
  static void GetRectCheckPos( const nw::ut::Rect& rect, u32 idx, gfl::math::VEC3* p_pos );


  //============================================================================
  /**
   *  ペイン名テーブル
   */
  //=============================================================================
  void initializePaneTbl( void );
  void finalizePaneTbl( void );
  void createPaneTbl( gfl::heap::HeapBase* p_heap, bool isUseHash );
  nw::lyt::Pane* getPaneTblPane( u32 paneIndex ) const;
  
};

} // g2d
} // grp
} // gfl
#endif // __GFL_LYTWKBASE_H__
