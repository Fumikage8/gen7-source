//============================================================================================
/**
 * @file    gfl_StreamingUncomp.h
 * @brief    LZ77圧縮データのストリーミング展開処理
 * @author  Hiroyuki Nakamura
 * @date    11.10.25
 */
//============================================================================================
#ifndef  __GFL_STREAMINGUNCOMP_H__
#define  __GFL_STREAMINGUNCOMP_H__
#pragma once


#include <fs/gfl_ArcFile.h>
#include <heap/gfl_HeapBase.h>

namespace gfl {
namespace cx {
  
  
//----------------------------------------------------------------------------
/**
 *  @brief  圧縮解凍後のメモリサイズを取得
 *
 *  @return 圧縮解凍後のメモリサイズ
 */
//-----------------------------------------------------------------------------
extern u32 GetUncompressedSize( const void* cpData );

//--------------------------------------------------------------------------------------------
/**
 * @brief    圧縮解凍処理
 *
 * @param    cpSrc    圧縮データ
 * @param    pDest    解凍先メモリ
 * @param    heap    ヒープ
 */
//--------------------------------------------------------------------------------------------
extern void Uncompress( const void * cpSrc, void * pDest, gfl::heap::HeapBase * heap=NULL );

//--------------------------------------------------------------------------------------------
/**
 * @brief    エラーチェック付き圧縮解凍処理（データタイプ指定）
 *
 * @param    cpSrc        圧縮データ
 * @param    cpSrcSize    圧縮データのサイズ
 * @param    type        圧縮データタイプ
 * @param    pDest        解凍先メモリ
 * @param    heap        ヒープ
 *
 * @retval  "0 なら成功"
 * @retval  "0 より大きいならエラーコード"
 */
//--------------------------------------------------------------------------------------------
extern s32 SecureUncompress( const void * cpSrc, u32 cpSrcSize, nn::cx::CompressionType type, void * pDest, gfl::heap::HeapBase * heap=NULL );


//--------------------------------------------------------------------------------------------
/**
 * @brief    エラーチェック付き圧縮解凍処理
 *
 * @param    cpSrc        圧縮データ
 * @param    cpSrcSize    圧縮データのサイズ
 * @param    pDest        解凍先メモリ
 * @param    heap        ヒープ
 *
 * @retval  "0 なら成功"
 * @retval  "0 より大きいならエラーコード"
 */
//--------------------------------------------------------------------------------------------
extern s32 SecureUncompress( const void * cpSrc, u32 cpSrcSize, void * pDest, gfl::heap::HeapBase * heap );



class StreamingUncomp {
public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief    コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  StreamingUncomp(void);

  //--------------------------------------------------------------------------------------------
  /**
  
   * @brief    デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  ~StreamingUncomp(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮データ展開準備
   *
   * @param    devHeap    デバイスヒープ(普通のヒープメモリでもOKです)
   * @param    src        圧縮データ
   * @param    src_size  圧縮データのサイズ
   * @param    dest      展開先
   *
   * @li  destは各自削除を。
   */
  //--------------------------------------------------------------------------------------------
  void InitUncomp( gfl::heap::HeapBase * devHeap, void * src, u32 src_size, void ** dest );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮データ展開
   *
   * @retval  "true = 処理中"
   * @retval  "false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool ReadUncomp(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    スレッドを使用した圧縮データ展開開始
   *
   * @param    arcID      アーカイブID
   * @param    datID      データID
   * @param    heap      ヒープ
   * @param    devHeap    デバイスヒープ(普通のヒープメモリでもOKです)
   * @param    dest      展開先
   * @param    priority  スレッドのプライオリティ
   *
   * @li  destは各自削除を。( = NULL の場合あり )
   */
  //--------------------------------------------------------------------------------------------
  void InitThreadUncomp(
        gfl::fs::ArcFile::ARCID arcID, gfl::fs::ArcFile::ARCDATID datID,
        gfl::heap::HeapBase * heap, gfl::heap::HeapBase * devHeap, void ** dest, u32 priority );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    スレッドを使用した圧縮データ展開
   *
   * @retval  "true = 処理中"
   * @retval  "false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool ReadThreadUncomp(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    スレッドを使用した圧縮データ展開をキャンセルする
   *
   * @retval  "true = 処理中"
   * @retval  "false = 完了"
   *
   * @li  展開先も削除されます
   */
  //--------------------------------------------------------------------------------------------
  bool CancelThreadUncomp(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮データ一括展開準備
   *
   * @param    devHeap    デバイスヒープ(普通のヒープメモリでもOKです)
   * @param    src        圧縮データ
   * @param    src_size  圧縮データのサイズ
   * @param    dest      展開先
   *
   * @li  destは各自削除を。
   */
  //--------------------------------------------------------------------------------------------
  void InitUncompPackage( gfl::heap::HeapBase * devHeap, void * src, u32 src_size, void ** dest );
  
  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮データ一括展開(エラーチェック)
   *
   * @return  変換に成功した場合は 0 を、失敗した場合には負のエラーコードを返します。
   */
  //--------------------------------------------------------------------------------------------
  s32 SecureUncomp(void);

private:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮タイプごとの設定
   *
   * @param    heap  ヒープ
   */
  //--------------------------------------------------------------------------------------------
  void InitCompType( gfl::heap::HeapBase * heap );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    圧縮タイプごとの設定削除
   */
  //--------------------------------------------------------------------------------------------
  void ExitCompType(void);

private:
  void ** pDest;    //!< 展開先
  void * pSrc;      //!< 圧縮データ
  u32  srcSize;     //!< 圧縮データサイズ

  nn::cx::CompressionType  compType;  //!< 圧縮タイプ
  void * context;                     //!< 展開コンテキスト

  gfl::fs::ArcFile * pArcFile;       //!< アークファイル
  gfl::heap::HeapBase * pDevHeap;    //!< デバイスヒープ

  int  seq;        //!< シーケンス
  int  cancelSeq;  //!< キャンセル用シーケンス
};






}    // cx
}    // gfl


#endif  // __GFL_STREAMINGUNCOMP_H__



