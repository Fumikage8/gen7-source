#ifndef __GFL_BINLINKERACCESSOR_H__
#define __GFL_BINLINKERACCESSOR_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_BinLinkerAccessor.h
 *	@brief  tools/tools/binlinker.rbで生成したデータへアクセスするためのクラス
 *	@author	tomoya takahashi
 *	@date		2011.01.27
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once


#include <gfl_Common.h>

namespace gfl{
namespace base{

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/**
 *    BinLinkerのデータAccessor
 */
//-----------------------------------------------------------------------------
class BinLinkerAccessor
{
  GFL_FORBID_COPY_AND_ASSIGN( BinLinkerAccessor );

public:

  
  //----------------------------------------------------------------------------
  /**
   *	@brief    コンストラクタ    初期化も行う。
   *
   *	@param	p_buff   BinLinkerで生成したデータのポインタ
   */
  //-----------------------------------------------------------------------------
  BinLinkerAccessor( void* p_buff );

  //----------------------------------------------------------------------------
  /**
   *	@brief    コンストラクタ    初期化は行わない
   */
  //-----------------------------------------------------------------------------
  BinLinkerAccessor(void);

  //----------------------------------------------------------------------------
  /**
   *	@brief    デストラクタ
   */
  //-----------------------------------------------------------------------------
  ~BinLinkerAccessor();


  //----------------------------------------------------------------------------
  /**
   *	@brief  初期化    何度呼んでも大丈夫です。
   *
   *	@param	p_buff   BinLinkerで生成したデータのポインタ
   */
  //-----------------------------------------------------------------------------
  void Initialize( void* p_buff );


  //----------------------------------------------------------------------------
  /**
   *	@brief  パッケージされているファイルの最大数を取得
   *
   *	@return パッケージされているファイルの最大数
   */
  //-----------------------------------------------------------------------------
  u16 GetDataMax( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  パッケージされているファイルのポインタを取得
   *
   *	@param	idx インデックス
   *
   *	@retval ファイルのポインタ
   *	@retval NULL idxが不正または、初期化されていない。
   */
  //-----------------------------------------------------------------------------
  u32 GetDataSize( u32 idx ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  パッケージされているファイルのポインタを取得
   *
   *	@param	idx インデックス
   *
   *	@retval ファイルのポインタ
   *	@retval NULL idxが不正または、初期化されていない。
   */
  //-----------------------------------------------------------------------------
  void* GetData( u32 idx ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  シグネチャの取得
   *
   *	@return データのシグネチャ
   */
  //-----------------------------------------------------------------------------
  u16 GetSignature( void ) const;


private:
  //-------------------------------------
  ///	ファイルヘッダー
  //=====================================
  struct BinLinkerHeader{
    u16 signature;
    u16 filenum;

    u32 offset[];
  };
  

private:

  BinLinkerHeader* m_pBuff;



};


} // namespace base
} // namespace gfl

#endif // __GFL_BINLINKERACCESSOR_H__
