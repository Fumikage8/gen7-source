#ifndef __GFL_BACKUPDATA_H__
#define __GFL_BACKUPDATA_H__
//========================================================================================
/**
 * @file   gfl_BackupData.h
 * @brief  バックアップデータ
 * @author obata_toshihiro
 * @date   2011.02.16
 */
//========================================================================================
#pragma once

#include <gfl_Heap.h>

namespace gfl {
  namespace fs { 




    /**
     * @class BackupData
     *
     *
     *
     *
     *
     *
     *
     *
     *
     * @attention 削除予定のクラスです。使用しないでください。
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     */
    class BackupData
    {
      GFL_FORBID_COPY_AND_ASSIGN( BackupData );

      public:
        typedef u32 FormId;                       //「何のデータなのか」を識別するID
        typedef u32 BlockIndex;                   // ブロックの管理インデックス
        typedef void (*DataClearFunc)(void*);     // データを初期化する関数
        typedef size_t (*DataSizeGetFunc)(void);  // データサイズを取得する関数


        /**
         * @brief 各ブロックを定義する情報
         */
        struct BlockForm {
          DataClearFunc clear_func;       // データを初期化する関数
          DataSizeGetFunc size_get_func;  // データサイズを取得する関数
        };

        /**
         * @brief バックアップデータを定義する情報
         */
        struct DataForm {
          FormId form_id;         //「何のデータなのか」を識別するID
          u32 block_num;          // ブロックの総数
          BlockForm* block_form;  // 各ブロックの定義情報
        };


        //--------------------------------------------------------------------------------
        /**
         * @brief コンストラクタ
         *
         * @param heap   バッファの確保に使用するヒープ
         * @param param  バックアップデータを定義する情報
         */
        //--------------------------------------------------------------------------------
        BackupData( gfl::heap::HeapBase* heap, const DataForm* param );

        //--------------------------------------------------------------------------------
        /**
         * @brief デストラクタ
         */
        //--------------------------------------------------------------------------------
        virtual ~BackupData( void );

        //--------------------------------------------------------------------------------
        /**
         * @brief 同じデータを持つインスタンスを生成する
         *
         * @param heap  インスタンスの生成に使用するヒープ
         *
         * @return 生成したインスタンス
         */
        //--------------------------------------------------------------------------------
        BackupData* CreateClone( gfl::heap::HeapBase* heap ) const;

        //--------------------------------------------------------------------------------
        /**
         * @brief データをコピーする
         *
         * @param dest  コピー先のインスタンス
         *
         * @retval true   コピー成功
         * @retval false  コピー失敗
         *
         * @note コピー元とコピー先は同じデータである必要があります.
         */
        //--------------------------------------------------------------------------------
        bool CopyTo( BackupData* dest ) const;

        //--------------------------------------------------------------------------------
        /**
         * @brief クリアする( 初期状態にする )
         */
        //--------------------------------------------------------------------------------
        void Clear( void );

        //--------------------------------------------------------------------------------
        /**
         * @brief バッファのアドレスを取得する
         */
        //--------------------------------------------------------------------------------
        inline void* GetBuffer( void ) const { return m_buffer; }

        //--------------------------------------------------------------------------------
        /**
         * @brief バッファのサイズを取得する
         */
        //--------------------------------------------------------------------------------
        size_t GetBufferSize( void ) const;

        //--------------------------------------------------------------------------------
        /**
         * @brief ブロックの先頭アドレスを取得する
         *
         * @param index  対象ブロックのインデックス
         */
        //--------------------------------------------------------------------------------
        void* GetBlockPointer( BlockIndex index ) const;

        //--------------------------------------------------------------------------------
        /**
         * @brief ブロックサイズを取得する
         *
         * @param index  対象ブロックのインデックス
         */
        //--------------------------------------------------------------------------------
        size_t GetBlockSize( BlockIndex index ) const;


      private:
        /**
         * @brief ブロック領域のアラインメント
         */
        static const size_t BLOCK_ALIGNMENT = 4;

        /**
         * @brief 指定したブロックを初期化する
         */
        void ClearBlock( BlockIndex index );

        /**
         * @brief ブロック情報
         */
        struct BlockInfo {
          u32 offset_address;  // バッファの先頭からのオフセットアドレス
        }; 

        const DataForm* m_data_form;
        BlockInfo* m_block_info;
        void* m_buffer;  // 実際にデータが格納されるバッファ
    }; 

  }  // namespace fs
}  // namespace gfl 

#endif  // __GFL_BACKUPDATA_H__ 
