#ifndef __GFL_ROMFILE_H__
#define __GFL_ROMFILE_H__
//=======================================================================================
/**
 * @brief  ROMファイルアクセス
 * @file   gfl_RomFile.h
 * @author obata_toshihiro
 * @date   2011.02.03
 */
//=======================================================================================
#pragma once
#include <nn.h>
#include <gfl_Base.h>
#include <fs/gfl_FileBase.h>


namespace gfl {
  namespace fs {


    class RomFile : public File {
      public:
        //-------------------------------------------------------------------------------
        /**
         * @brief コンストラクタ・デストラクタ
         */
        //-------------------------------------------------------------------------------
        RomFile( void );
        virtual ~RomFile( void ); 

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルを開く
         *
         * @param[in] path  ファイルパス (rom:/ で始まるパスを指定してください)
         * @param[in] mode  オープンモード
         *
         * @retval true   オープンに成功した場合
         * @retval false  オープンに失敗した場合
         *
         * @note パスの区切りには '/' を使用してください.
         */
        //-------------------------------------------------------------------------------
        virtual bool Open( const wchar_t* path, OpenMode mode );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルを閉じる
         */
        //-------------------------------------------------------------------------------
        virtual void Close( void );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルから読み込む
         *
         * @param[out] buffer  読み込んだデータの格納先
         * @param[in]  size    読み込むサイズ
         *
         * @return 実際に読み込んだサイズ
         */
        //-------------------------------------------------------------------------------
        virtual size_t Read( void* buffer, u32 size );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルをシークする
         *
         * @param[in] base_pos  シークの起点となる位置
         * @param[in] offset    起点位置からのオフセット
         */
        //-------------------------------------------------------------------------------
        virtual void Seek( SeekBasePos base_pos, s32 offset );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルサイズを取得する
         */
        //-------------------------------------------------------------------------------
        virtual size_t GetSize( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief 現在位置を取得する
         *
         * @return ファイル先頭からのオフセット[Byte]
         */
        //-------------------------------------------------------------------------------
        virtual u32 GetPosition( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルが開いているかどうかを調べる
         *
         * @retval true   ファイルを開いている
         * @retval false  ファイルを開いていない
         */
        //-------------------------------------------------------------------------------
        virtual bool IsOpen( void ) const { return m_file_open_flag; }
        
        //-------------------------------------------------------------------------------
        /**
         * @brief 読み込みが出来るかどうかを調べる
         *
         * @retval true   読み込み可能
         * @retval false  読み込み不可能
         */
        //-------------------------------------------------------------------------------
        virtual bool CanRead( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief 書き込みが出来るかどうかを調べる
         *
         * @retval true   書き込み可能
         * @retval false  書き込み不可能
         */
        //-------------------------------------------------------------------------------
        virtual bool CanWrite( void ) const;

        //----------------------------------------------------------------------------
        /**
         *	@brief  ファイル読み込み優先順位を設定する
         *
         *	@param	priority    優先順位
         *   PRIORITY_APP_REALTIME = nn::fs::PRIORITY_APP_REALTIME,  /// 利用注意！！！　ドキュメントを良く読むこと
         *   PRIORITY_APP_NORMAL   = nn::fs::PRIORITY_APP_NORMAL,    /// 普通
         *   PRIORITY_APP_LOW      = nn::fs::PRIORITY_APP_LOW,       /// 低い
         */
        //-----------------------------------------------------------------------------
        virtual bool SetPriority( s32 priority );
         

      private:
        nn::fs::FileStream m_nn_file_stream;
        b32 m_file_open_flag;  // ファイルが開いているか

#if GFL_FILE_DEBUG
        const wchar_t* m_file_path;    // ファイルパス修正
#endif // PM_DEBUG
    };


  } // namespace fs
} // namespace gfl
#endif // __GFL_ROMFILE_H__
