//=============================================================================
/**
 * @brief   SDカード管理
 * @file    gfl_SdmcManager.h
 * @auhtor  tamada
 * @date    2012.10.06
 */
//=============================================================================
#if !defined( __GFL_SDMCMANAGER_H__ )
#define __GFL_SDMCMANAGER_H__
#pragma once

#include <gfl_Macros.h>

namespace gfl {

namespace fs {

//=============================================================================
/**
 * @class SDMCEventListener
 * @brief SDMCイベントのリスナー
 *
 * @note  完全
 */
//=============================================================================
class ISDMCEventListener
{
public:
  /// SDカードが抜かれたときに呼び出されるコールバックメソッド
  virtual void OnEjectEvent( void ) = 0;

  /// SDカードが挿入されたときに呼び出されるコールバックメソッド
  virtual void OnInsertEvent( void ) = 0;
};

//=============================================================================
/**
 * @brief SDMC管理
 * 
 * @note  SDカードの状態監視を行う
 */
//=============================================================================
class SDMCManager : public gfl::base::Singleton<SDMCManager>
{
  GFL_FORBID_COPY_AND_ASSIGN( SDMCManager );

public:
  //-----------------------------------------------------------------------------
  ///  constructor
  //-----------------------------------------------------------------------------
  SDMCManager();

  //-----------------------------------------------------------------------------
  ///  destructor
  //-----------------------------------------------------------------------------
  ~SDMCManager();

  //-----------------------------------------------------------------------------
  /**
   * @brief   更新処理
   * @note    メインスレッドで毎フレーム呼び出す必要がある
   */
  //-----------------------------------------------------------------------------
  void Update( void );

  //-----------------------------------------------------------------------------
  /**
   * @brief   リスナー登録
   * @param[in]   pListener
   *
   * @attention リスナーは１つしか受け付けていない
   */
  //-----------------------------------------------------------------------------
  void AddEventListener( ISDMCEventListener * pListener );

  //-----------------------------------------------------------------------------
  /**
   * @brief   リスナー解除
   * @param[in] pListener
   */
  //-----------------------------------------------------------------------------
  void RemoveEventListener( ISDMCEventListener * pListener );

  //-----------------------------------------------------------------------------
  /**
   * @brief   書き込み可能かどうかの判定
   */
  //-----------------------------------------------------------------------------
  bool IsWritable( void ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   SDカードが差し込まれているかどうか判定
   */
  //-----------------------------------------------------------------------------
  bool IsInserted( void ) const;


//=============================================================================
//
//    以下は外部公開しないもの
//
//=============================================================================
private:
  bool                m_IsInserted;     ///<挿入されているかどうか
  bool                m_IsWritable;     ///<書込み可能かどうか
  nn::os::LightEvent  m_EjectEvent;     ///<システム用：排出通知イベント
  nn::os::LightEvent  m_InsertEvent;    ///<システム用：挿入通知イベント

  ISDMCEventListener * m_Listener;       ///<登録リスナー保持ポインタ
};

}  // namespace fs
}  // namespace gfl

#endif // __GFL_SDMCMANAGER_H__
