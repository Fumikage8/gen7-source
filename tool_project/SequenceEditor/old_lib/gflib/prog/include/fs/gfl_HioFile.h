#ifndef __GFL_HIOFILE_H__
#define __GFL_HIOFILE_H__
//=======================================================================================
/**
 * @brief  SDカードファイルアクセス
 * @file   gfl_HioFile.h
 * @author obata_toshihiro
 * @date   2011.02.03
 */
//=======================================================================================
#pragma once

#if GFL_HIO_ENABLE

#include <nn/hio.h>
#include <fs/gfl_FileBase.h>


namespace gfl {
  namespace fs {


    class HioFile : public File {
      public:
        //-------------------------------------------------------------------------------
        /**
         * @brief コンストラクタ・デストラクタ
         */
        //-------------------------------------------------------------------------------
        HioFile( void );
        virtual ~HioFile( void ); 

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルを開く
         *
         * @param[in] path  ファイルパス (絶対パスで指定してください)
         * @param[in] mode  オープンモード
         *
         * @retval true   オープンに成功した場合
         * @retval false  オープンに失敗した場合
         *
         * @note パスの区切りには '/' を使用してください.
         */
        //-------------------------------------------------------------------------------
        virtual bool Open( const wchar_t* path, OpenMode mode );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルを閉じる
         */
        //-------------------------------------------------------------------------------
        virtual void Close( void );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルから読み込む
         *
         * @param[out] buffer  読み込んだデータの格納先
         * @param[in]  size    読み込むサイズ
         *
         * @return 実際に読み込んだサイズ
         */
        //-------------------------------------------------------------------------------
        virtual size_t Read( void* buffer, u32 size );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルに書き込む
         *
         * @param[in] buffer  書き込むデータ
         * @param[in] size    書き込むサイズ
         *
         * @return 実際に書き込んだサイズ
         */
        //-------------------------------------------------------------------------------
        virtual size_t Write( const void* buffer, u32 size );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルをシークする
         *
         * @param[in] base_pos  シークの起点となる位置
         * @param[in] offset    起点位置からのオフセット
         */
        //-------------------------------------------------------------------------------
        virtual void Seek( SeekBasePos base_pos, s32 offset );

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルサイズを取得する
         */
        //-------------------------------------------------------------------------------
        virtual size_t GetSize( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief 現在位置を取得する
         *
         * @return ファイル先頭からのオフセット[Byte]
         */
        //-------------------------------------------------------------------------------
        virtual u32 GetPosition( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief ファイルが開いているかどうかを調べる
         *
         * @retval true   ファイルを開いている
         * @retval false  ファイルを開いていない
         */
        //-------------------------------------------------------------------------------
        virtual bool IsOpen( void ) const { return m_file_open_flag; }

        //-------------------------------------------------------------------------------
        /**
         * @brief 読み込みが出来るかどうかを調べる
         *
         * @retval true   読み込み可能
         * @retval false  読み込み不可能
         */
        //-------------------------------------------------------------------------------
        virtual bool CanRead( void ) const;

        //-------------------------------------------------------------------------------
        /**
         * @brief 書き込みが出来るかどうかを調べる
         *
         * @retval true   書き込み可能
         * @retval false  書き込み不可能
         */
        //-------------------------------------------------------------------------------
        virtual bool CanWrite( void ) const;

        //----------------------------------------------------------------------------
        /**
         *	@brief  ファイル読み込み優先順位を設定する
         *
         *	@param	priority    優先順位
         *   PRIORITY_APP_REALTIME = nn::fs::PRIORITY_APP_REALTIME,  /// 利用注意！！！　ドキュメントを良く読むこと
         *   PRIORITY_APP_NORMAL   = nn::fs::PRIORITY_APP_NORMAL,    /// 普通
         *   PRIORITY_APP_LOW      = nn::fs::PRIORITY_APP_LOW,       /// 低い
         */
        //-----------------------------------------------------------------------------
        virtual bool SetPriority( s32 priority );


      private: 
        nn::hio::HostFile m_nn_host_file;
        b32 m_file_open_flag;       // ファイルが開いているかどうか
        s64 m_file_size;            // 開いているファイルのサイズ
        s64 m_current_position;     // 現在位置
        OpenMode m_file_open_mode;  // オープンモード
    };


  } // namespace fs
} // namespace gfl

#endif //GFL_HIO_ENABLE

#endif // __GFL_HIOFILE_H__
