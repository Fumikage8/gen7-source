#if !defined( __PHOTOSELECT_H__ )
#define __PHOTOSELECT_H__
#pragma once

//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		PhotoSelect.h
 *	@brief  写真選択アプレット
 *	@author	Koji Kawada
 *	@date		2012.06.07
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]


// CTR-SDK
#include <nn.h>
#include <nn/phtsel.h>

// gflib
#include <gfl_Heap.h>


namespace gfl {
namespace std {


// @brief  写真選択アプレット
class PhotoSelect
{
  GFL_FORBID_COPY_AND_ASSIGN(PhotoSelect);
  

  //###########################
  //###########################
  //
  // 公開メンバ
  //
  //###########################
  //###########################
public:
  // @brief 定数
  enum
  {
    WORK_BUFFER_SIZE     = 950272,  // 使用するメモリサイズ(バイト)
    FILE_PATH_LENGTH_MAX = 513      // ファイルパス文字列最大値(終端文字1文字分も含みます)(2バイトを1文字というふうに数えた文字数)
  };

  // @brief 終了結果
  enum Result
  {
    RESULT_DECIDE,      // 写真を選択して終了
    RESULT_CANCEL,      // 写真を選択せずに終了
    RESULT_RETURN_CODE  // nn::phtsel::CTR::ReturnCodeをチェックする必要がある終了の仕方
  };
  
  // @brief 設定内容
  struct Description
  {
    bool enableSoftReset;   //!< ソフトリセットが有効かどうか
    bool enableHomeButton;  //!< ホームボタンが有効かどうか

    Description(void)
    {
      enableSoftReset  = true;
      enableHomeButton = true;
    }
  };

public:
  //-----------------------------------------------------------------------------
  /**
   *   @brief  コンストラクタ
   *           この時点ではメモリは確保されません。
   *           コンストラクタとStartを分けているのは、PreloadPhtsel, WaitForPreloadPhtsel, IsRegisteredPhtselに対応させるかもしれないから。
   *           
   *   @param[in]  description  設定内容
   */
  //-----------------------------------------------------------------------------
  PhotoSelect(
    const Description& description
  );

  //-----------------------------------------------------------------------------
  /**
   *   @brief  デストラクタ
   */
  //-----------------------------------------------------------------------------
  ~PhotoSelect();

  //-----------------------------------------------------------------------------
  /**
   *   @brief  起動
   *
   *   @param[in]  heap_memory  ヒープメモリ(デバイスメモリはダメです)(WORK_BUFFER_SIZEだけメモリを使用します)
   */
  //-----------------------------------------------------------------------------
  void Start(
    gfl::heap::HeapBase* heap_memory
  );

  //-----------------------------------------------------------------------------
  /**
   *   @brief  終了後に、終了結果を取得する
   *
   *   @retval  終了結果
   */
  //-----------------------------------------------------------------------------
  Result GetResult(void) const; 
  //-----------------------------------------------------------------------------
  /**
   *   @brief  終了後に、選択された写真のファイルパスを取得する
   *
   *   @retval  ファイルパス。NULLのとき、キャンセルされたかエラー(GetResult()の戻り値がRESULT_DECIDE以外になっている)。
   */
  //-----------------------------------------------------------------------------
  const wchar_t* GetFilePath(void) const;
  //-----------------------------------------------------------------------------
  /**
   *   @brief  終了後に、選択された写真のファイルパスを取得する
   *
   *   @param[out]  file_path  ファイルパスがコピーされるバッファ。確実に「GetFilePathLength()+終端文字1文字分」は確保しておいて下さい。
   *
   *   @retval  終了結果
   *            RESULT_DECIDE以外のときは、コピーをしません。
   */
  //-----------------------------------------------------------------------------
  Result GetFilePath(wchar_t* file_path) const;
  //-----------------------------------------------------------------------------
  /**
   *   @brief  終了後に、選択された写真のファイルパスの長さを取得する
   *
   *   @retval  ファイルパスの長さ。2バイトを1文字というふうに数えた文字数を返す。終端文字は含まれない文字数。
   *            GetResult()の戻り値がRESULT_DECIDE以外のときは、0を返します。
   */
  //-----------------------------------------------------------------------------
  u16 GetFilePathLength(void) const;
  //-----------------------------------------------------------------------------
  /**
   *   @brief  終了後に、リターンコードを取得する
   *
   *   @retval  リターンコード
   */
  //-----------------------------------------------------------------------------
  nn::phtsel::CTR::ReturnCode GetReturnCode() const;


  //###########################
  //###########################
  //
  // 非公開メンバ
  //
  //###########################
  //###########################
private:
  nn::phtsel::CTR::Parameter m_parameter;
};


} // namespace std
} // namespace gfl


#endif // __PHOTOSELECT_H__

