//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_Date.h
 *	@brief  日時管理クラス
 *	@author	tomoya takahashi
 *	@date		2011.09.10
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifndef __GFL_DATE_H__
#define __GFL_DATE_H__
#pragma once

#include <nn.h>

namespace gfl
{
namespace std
{

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

  //-----------------------------------------------------------------------------
  /**
   *					クラス宣言
   *
   *		時間管理システム
   *		
   *		□使用方法
   *		　?ゲーム初期化時に一度　gfl::std::DateTime::Initizlizeを呼ぶ。
   *
   *		  ?ゲームのメインループの１箇所で、gfl::std::DateTime::Updateを呼ぶ。
   *
   *		□フェイクモード
   *		　時間の進み方を調整するための、デバッグ機能です。
   *		  StartFakeTime( u32 rate );  rete倍のスピード時間を進めていく。
   *
   *		  StopFakeTime（）;フェイク時間を止めて、通常の時間に戻ります。
  */
  //-----------------------------------------------------------------------------
  class DateTime
  {
    // コピーコンストラクタ＋代入演算子禁止
    GFL_FORBID_COPY_AND_ASSIGN(DateTime);
    
  public:
    
#if GFL_DEBUG
    enum FakeMode{
      FAKE_NONE,
      FAKE_FIX,
      FAKE_FAST,
    };
#endif // GFL_DEBUG
    
    
    //----------------------------------------------------------------------------
    /**
     *	@brief  コンストラクタ
     *
     */
    //-----------------------------------------------------------------------------
    DateTime( s32 year, s32 month, s32 day, s32 hour = 0, s32 minute= 0, s32 second= 0, s32 millisecond = 0 );

    //----------------------------------------------------------------------------
    /**
     *	@brief  コンストラクタ
     *
     *	@param	second    2000/01/01/00:00からの経過秒数
     */
    //-----------------------------------------------------------------------------
    DateTime( s64 second );

    //----------------------------------------------------------------------------
    /**
     *	@brief  コンストラクタ
     */
    //-----------------------------------------------------------------------------
    DateTime( void );

    //----------------------------------------------------------------------------
    /**
     *	@brief  デストラクタ
     */
    //-----------------------------------------------------------------------------
    ~DateTime();


    //----------------------------------------------------------------------------
    /**
     *	@brief  現在日時の取得
     *
     *	@param	p_date    格納先
     */
    //-----------------------------------------------------------------------------
    static void GetNow( DateTime* p_date );


    //----------------------------------------------------------------------------
    /**
     *	@brief  情報のコピー
     *
     *	@param	cp_src    ソース
     *	@param	p_dst     格納先
     */
    //-----------------------------------------------------------------------------
    static void Copy( const DateTime* cp_src, DateTime* p_dst );

    //----------------------------------------------------------------------------
    /**
     *	@brief  最小日時の取得　1900-01-01 00:00:00.000　
     *
     *	@param	p_date    格納先
     */
    //-----------------------------------------------------------------------------
    static void GetMin( DateTime* p_date );

    //----------------------------------------------------------------------------
    /**
     *	@brief  最大日時の取得　2189-12-31 23:59:59.999　
     *
     *	@param	p_date    格納先
     */
    //-----------------------------------------------------------------------------
    static void GetMax( DateTime* p_date );


    //----------------------------------------------------------------------------
    /**
     *	@brief  データの設定・取得
     */
    //-----------------------------------------------------------------------------
    void SetYear( s32 year );
    void SetMonth( s32 month );
    void SetDay( s32 day );
    void SetHour( s32 hour );
    void SetMinute( s32 minute );
    void SetSecond( s32 second );
    void SetMilliSecond( s32 millisecond );

    s32 GetYear( void ) const;
    s32 GetMonth( void ) const;
    nn::fnd::Week GetWeek( void ) const;
    s32 GetDay( void ) const;
    s32 GetHour( void ) const;
    s32 GetMinute( void ) const;
    s32 GetSecond( void ) const;
    s32 GetMilliSecond( void ) const;

    nn::fnd::DateTimeParameters GetParameters( void ) const;

    //----------------------------------------------------------------------------
    /**
     *	@brief  日時を2000/1/1/00:00からの経過日数に変換する。
     *	@return　経過日数
     */
    //-----------------------------------------------------------------------------
    s64 GetDateTimeToDay( void ) const;


    //----------------------------------------------------------------------------
    /**
     *	@brief  日時を2000/1/1/00:00からの経過時間に変換する。
     *	@return　経過秒数
     */
    //-----------------------------------------------------------------------------
    s64 GetDateTimeToSecond( void ) const;

    //----------------------------------------------------------------------------
    /**
     *	@brief  日時を2000/1/1/00:00からの経過時間に変換する。
     *	@return　経過ミリ秒
     */
    //-----------------------------------------------------------------------------
    s64 GetDateTimeToMilliSecond( void ) const;


    //----------------------------------------------------------------------------
    /**
     *	@brief  2000/1/1/00:00からの経過秒数から、日時を設定する
     *  @param  second  秒数
     */
    //-----------------------------------------------------------------------------
    void SetDateTimeToSecond( s64 second );
    


    //----------------------------------------------------------------------------
    /**
     *	@brief  正常な日時か判断する。
     *
     *	@retval true    正常
     *	@retval false   おかしい
     */
    //-----------------------------------------------------------------------------
    bool IsValidDate( void ) const;

    //----------------------------------------------------------------------------
    /**
     *	@brief  うるう年か判断する。
     *
     *	@retval true    うるう年
     *	@retval false   ちがう
     */
    //-----------------------------------------------------------------------------
    bool IsLeapYear( void ) const;



    //-----------------------------------------------------------------------------
    /**
     *    システム部
     *
     *    Initialize関数：ゲームの最初に１回だけ読んでください。
     *    Update関数：ゲームのメインフレームの開始時or終了時に、１回読んでください。
     */
    //-----------------------------------------------------------------------------
    static void Initialize( void );
    static void Update( bool isForceUpdate=false );



    //-----------------------------------------------------------------------------
    /**
     *    Fakeモード
     *
     *    時間の進みをソフトウェアで、操作するシステム。
     */
    //-----------------------------------------------------------------------------
#if GFL_DEBUG

    //----------------------------------------------------------------------------
    /**
     *	@brief  フェイクタイム開始
     *
     *	@param	u32 rate  進むスピードの倍数
     */
    //-----------------------------------------------------------------------------
    static void StartFakeTime( u32 rate );
    //----------------------------------------------------------------------------
    /**
     *	@brief  フェイクモード終了
     */
    //-----------------------------------------------------------------------------
    static void StopFakeTime( void );
    //----------------------------------------------------------------------------
    /**
     *	@brief  時間と分をFixさせる。
     *
     *	@param	hour    時間
     *	@param	minute  分
     */
    //-----------------------------------------------------------------------------
    static void FixFakeTime( s32 hour, s32 minute );
    //----------------------------------------------------------------------------
    /**
     *	@brief  日時をすべて指定してとめる。
     */
    //-----------------------------------------------------------------------------
    static void FixFakeDate( const DateTime* p_date );
    //-----------------------------------------------------------------------------
    /**
     *	@brief  FakeModeの取得
     */
    //-----------------------------------------------------------------------------
    static FakeMode GetFakeMode( void );
    //-----------------------------------------------------------------------------
    /**
     *	@brief  Fakeレートの取得
     */
    //-----------------------------------------------------------------------------
    static u32 GetFakeRate( void );

#endif
    
  private:

    // このフレームに１回情報を更新する。
    static const s32 sc_DATE_UPDATE_WAIT = 10;


#if GFL_DEBUG
    //----------------------------------------------------------------------------
    /**
     *	@brief  フェイクデータ更新
     */
    //-----------------------------------------------------------------------------
    static void UpdateFake( void );
#endif

  private:

    // 日時情報
    nn::fnd::DateTime m_Date;

    // 日時コア情報
    static bool              m_Initialize;
    static nn::fnd::DateTime m_CoreDate;
    static s32               m_Wait;
    
#if GFL_DEBUG

    static FakeMode m_FakeMode;
    static u32      m_Rate;
    static s64      m_BeginSec;
    static s64      m_RecSec;
    static s64      m_CoreSec;
    static nn::fnd::DateTime m_FakeDate;
    
#endif
    
  };


} // namespace std
} //namespace gfl

#endif	// __GFL_DATE_H__

