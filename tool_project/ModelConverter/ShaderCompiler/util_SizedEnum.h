/*---------------------------------------------------------------------------*
  Project:  Horizon
  File:     util_SizedEnum.h

  Copyright (C)2009-2013 Nintendo Co., Ltd.  All rights reserved.

  These coded instructions, statements, and computer programs contain
  proprietary information of Nintendo of America Inc. and/or Nintendo
  Company Ltd., and are protected by Federal copyright law.  They may
  not be disclosed to third parties or copied or duplicated in any form,
  in whole or in part, without the prior written consent of Nintendo.

  $Rev: 50823 $
 *---------------------------------------------------------------------------*/

#ifndef NN_UTIL_UTIL_SIZEDENUM_H_
#define NN_UTIL_UTIL_SIZEDENUM_H_

#include "types.h"
//#include <nn/util/util_StaticAssert.h>

#ifdef __cplusplus

namespace nn { namespace util {

//---------------------------------------------------------------------------
//! :category   ユーティリティクラステンプレート
//!
//! @tparam StorageT    enum 値の格納に使う型
//! @tparam EnumT       対象の列挙体型
//!
//! @brief  固定サイズで列挙体型を扱うためのクラステンプレートです。
//! 
//! このクラスを使用することで enum 値のサイズを明示的に使用して扱うことができます。
//! 
//! EnumT 型の列挙体型を StorageT 型の変数に格納して扱えるようにします。
//---------------------------------------------------------------------------
template <typename StorageT, typename EnumT>
class SizedEnum
{
private:
    typedef SizedEnum<StorageT, EnumT> Self;
//    NN_STATIC_ASSERT(sizeof(EnumT) <= sizeof(StorageT));

private:
    StorageT        m_EnumValue;

public:
    //---------------------------------------------------------------------------
    //! @brief  コンストラクタです。
    //! 
    //! 初期化なしのコンストラクタです。
    //---------------------------------------------------------------------------
    SizedEnum() {}

    //---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! 指定した初期値で初期化するコンストラクタです。
    //! 
    //! @param[in]  e   このインスタンスの初期値
    //---------------------------------------------------------------------------
    SizedEnum(EnumT e) { Set(e); }


    //---------------------------------------------------------------------------
    //! @brief  列挙体型への型変換演算子です。
    //! 
    //! EnumT 型の値を直接読み取ることができます。
    //---------------------------------------------------------------------------
    operator EnumT() const { return Get(); }

    //---------------------------------------------------------------------------
    //! @brief  列挙体型を代入するための代入演算子です。
    //! 
    //! EnumT 型の値を代入演算子で直接設定できます。
    //! 
    //! @param[in]  e   新しく設定する値。
    //! 
    //! @return 自身の参照を返します。
    //---------------------------------------------------------------------------
    Self& operator =(EnumT e) { Set(e); return *this; }


    //---------------------------------------------------------------------------
    //! @brief  値を設定します。
    //! 
    //! このインスタンスが管理している値を更新します。
    //! 
    //! @param[in]  e   新しく設定する値。
    //---------------------------------------------------------------------------
    void Set(EnumT e) { m_EnumValue = static_cast<StorageT>(e); }

    //---------------------------------------------------------------------------
    //! @brief  値を取得します。
    //! 
    //! このインスタンスが管理している値を列挙体型で取得します。
    //! 
    //! @return このインスタンスの値を返します。
    //---------------------------------------------------------------------------
    EnumT Get() const { return static_cast<EnumT>(m_EnumValue); }
};

//---------------------------------------------------------------------------
//! :category   ユーティリティクラステンプレート
//!
//! @tparam EnumT       対象の列挙体型
//!
//! @brief  1 バイトサイズで SizedEnum を部分特殊化したクラステンプレートです。
//! 
//! EnumT 型の列挙体型を 1 バイトのサイズとして扱うためのクラスです。
//---------------------------------------------------------------------------
template <typename EnumT>
class SizedEnum1 : public SizedEnum<bit8, EnumT>
{
public:
    //---------------------------------------------------------------------------
    //! @brief  コンストラクタです。
    //! 
    //! 初期化なしのコンストラクタです。
    //---------------------------------------------------------------------------
    SizedEnum1() : SizedEnum<bit8, EnumT>() {}

    //---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! 指定した初期値で初期化するコンストラクタです。
    //! 
    //! @param[in]  e   このインスタンスの初期値
    //---------------------------------------------------------------------------
    SizedEnum1(EnumT e) : SizedEnum<bit8, EnumT>(e) {}
};

//---------------------------------------------------------------------------
//! :category   ユーティリティクラステンプレート
//!
//! @tparam EnumT       対象の列挙体型
//!
//! @brief  2 バイトサイズで SizedEnum を部分特殊化したクラステンプレートです。
//! 
//! EnumT 型の列挙体型を 2 バイトのサイズとして扱うためのクラスです。
//---------------------------------------------------------------------------
template <typename EnumT>
class SizedEnum2 : public SizedEnum<bit16, EnumT>
{
public:
    //---------------------------------------------------------------------------
    //! @brief  コンストラクタです。
    //! 
    //! 初期化なしのコンストラクタです。
    //---------------------------------------------------------------------------
    SizedEnum2() : SizedEnum<bit16, EnumT>() {}

    //---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! 指定した初期値で初期化するコンストラクタです。
    //! 
    //! @param[in]  e   このインスタンスの初期値
    //---------------------------------------------------------------------------
    SizedEnum2(EnumT e) : SizedEnum<bit16, EnumT>(e) {}
};

//---------------------------------------------------------------------------
//! :category   ユーティリティクラステンプレート
//!
//! @tparam EnumT       対象の列挙体型
//!
//! @brief  4 バイトサイズで SizedEnum を部分特殊化したクラステンプレートです。
//! 
//! EnumT 型の列挙体型を 4 バイトのサイズとして扱うためのクラスです。
//---------------------------------------------------------------------------
template <typename EnumT>
class SizedEnum4 : public SizedEnum<bit32, EnumT>
{
public:
    //---------------------------------------------------------------------------
    //! @brief  コンストラクタです。
    //! 
    //! 初期化なしのコンストラクタです。
    //---------------------------------------------------------------------------
    SizedEnum4() : SizedEnum<bit32, EnumT>() {}

    //---------------------------------------------------------------------------
    //! @brief  
    //! 
    //! 指定した初期値で初期化するコンストラクタです。
    //! 
    //! @param[in]  e   このインスタンスの初期値
    //---------------------------------------------------------------------------
    SizedEnum4(EnumT e) : SizedEnum<bit32, EnumT>(e) {}
};

}}


#endif // __cplusplus

#endif /* NN_UTIL_UTIL_SIZEDENUM_H_ */
