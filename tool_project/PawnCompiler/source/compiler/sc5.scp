/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2009
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id: sc5.sch 4057 2009-01-15 08:21:31Z thiadmer $
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {111,110}, {116,32}, {105,110}, {97,114}, {116,105}, {100,32}, {115,32}, {101,114}, {37,115}, {97,108}, {101,110}, {133,129}, {34,137}, {141,34}, {117,110},
  {114,101}, {115,105}, {110,111}, {97,116}, {121,32}, {111,114}, {97,110}, {32,142}, {109,98}, {115,116}, {100,101}, {109,139}, {98,108}, {101,134}, {140,32}, {143,99},
  {111,108}, {118,138}, {102,159}, {114,97}, {146,130}, {115,121}, {165,152}, {166,160}, {117,115}, {97,32}, {105,134}, {103,32}, {115,145}, {97,156}, {132,163}, {149,32},
  {161,170}, {136,32}, {131,176}, {103,117}, {101,120}, {179,155}, {162,158}, {132,181}, {101,100}, {111,102}, {116,104}, {105,135}, {99,104}, {118,132}, {167,151}, {105,173},
  {189,191}, {154,102}, {116,111}, {99,129}, {174,148}, {185,32}, {109,97}, {101,135}, {112,144}, {183,130}, {98,128}, {153,147}, {44,32}, {190,41}, {40,205}, {168,130},
  {109,207}, {116,97}, {193,131}, {192,128}, {109,147}, {34,32}, {129,32}, {104,97}, {105,99}, {132,97}, {100,105}, {145,122}, {58,151}, {110,32}, {138,32}, {131,171},
  {101,108}, {117,108}, {99,111}, {108,111}, {112,136}, {102,149}, {195,153}, {97,115}, {150,130}, {108,128}, {162,140}, {131,32}, {150,32}, {200,172}, {208,202}, {109,101},
  {111,228}, {102,105}, {119,105}, {180,237}, {109,112}, {111,117}, {110,117}, {118,128}, {116,136}, {198,148}, {246,152}, {111,32}, {209,171}, {250,177}, {115,117}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "expected token: \"%s\", but found \"%s\"",
/*002*/  "only a single statement (or expression) can follow each \"case\"",
/*003*/  "declaration of a local variable must appear in a compound block",
/*004*/  "function \"%s\" is not implemented",
/*005*/  "function may not have arguments",
/*006*/  "must be assigned to an array",
/*007*/  "operator cannot be redefined",
/*008*/  "must be a constant expression; assumed zero",
/*009*/  "invalid array size (negative, zero or out of bounds)",
/*010*/  "invalid function or declaration",
/*011*/  "invalid outside functions",
/*012*/  "invalid function call, not a valid address",
/*013*/  "no entry point (no public functions)",
/*014*/  "invalid statement; not in switch",
/*015*/  "\"default\" case must be the last case in switch statement",
/*016*/  "multiple defaults in \"switch\"",
/*017*/  "undefined symbol \"%s\"",
/*018*/  "initialization data exceeds declared size",
/*019*/  "not a label: \"%s\"",
/*020*/  "invalid symbol name \"%s\"",
/*021*/  "symbol already defined: \"%s\"",
/*022*/  "must be lvalue (non-constant)",
/*023*/  "array assignment must be simple assignment",
/*024*/  "\"break\" or \"continue\" is out of context",
/*025*/  "function heading differs from prototype",
/*026*/  "no matching \"#if...\"",
/*027*/  "invalid character constant",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"",
/*029*/  "invalid expression, assumed zero",
/*030*/  "compound statement not closed at the end of file (started at line %d)",
/*031*/  "unknown directive",
/*032*/  "array index out of bounds (variable \"%s\")",
/*033*/  "array must be indexed (variable \"%s\")",
/*034*/  "argument does not have a default value (argument %d)",
/*035*/  "argument type mismatch (argument %d)",
/*036*/  "empty statement",
/*037*/  "invalid string (possibly non-terminated string)",
/*038*/  "extra characters on line",
/*039*/  "constant symbol has no size",
/*040*/  "duplicate \"case\" label (value %d)",
/*041*/  "invalid ellipsis, array size is not known",
/*042*/  "invalid combination of class specifiers",
/*043*/  "character constant exceeds range for packed string",
/*044*/  "positional parameters must precede all named parameters",
/*045*/  "too many function arguments",
/*046*/  "unknown array size (variable \"%s\")",
/*047*/  "array sizes do not match, or destination array is too small",
/*048*/  "array dimensions do not match",
/*049*/  "invalid line continuation",
/*050*/  "invalid range",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions",
/*052*/  "multi-dimensional arrays must be fully initialized",
/*053*/  "exceeding maximum number of dimensions",
/*054*/  "unmatched closing brace (\"}\")",
/*055*/  "start of function body without function header",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")",
/*057*/  "unfinished expression before compiler directive",
/*058*/  "duplicate argument; same argument is passed twice",
/*059*/  "function argument may not have a default value (variable \"%s\")",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive",
/*062*/  "number of operands does not fit the operator",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"",
/*064*/  "cannot change predefined operators",
/*065*/  "function argument may only have a single tag (argument %d)",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")",
/*068*/  "invalid rational number precision in #pragma",
/*069*/  "rational number format already defined",
/*070*/  "rational number support was not enabled",
/*071*/  "user-defined operator must be declared before use (function \"%s\")",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols",
/*073*/  "function argument must be an array (argument \"%s\")",
/*074*/  "#define pattern must start with an alphabetic character",
/*075*/  "input line too long (after substitutions)",
/*076*/  "syntax error in the expression, or invalid function call",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s",
/*078*/  "function uses both \"return\" and \"return <value>\"",
/*079*/  "inconsistent return types (array & non-array)",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")",
/*082*/  "user-defined operators and native functions may not have states",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")",
/*085*/  "no states are defined for symbol \"%s\"",
/*086*/  "unknown automaton \"%s\"",    //!!!
/*087*/  "unknown state \"%s\" for automaton \"%s\"",   //!!!
/*088*/  "public variables and local variables may not have states (symbol \"%s\")",
/*089*/  "state variables may not be initialized (symbol \"%s\")",
/*090*/  "public functions may not return arrays (symbol \"%s\")",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")",
/*092*/  "invalid number format"
#else
  "*",
  "\264pect\235\302k\213\334\314bu\202fo\217\206\216",
  "\201l\224\251s\203g\351\313e\233\202(\257\363\201) c\354f\240\343w ea\274 \042c\347e\042",
  "\232cl\331\236\305\251\343c\336\323\320appe\204 \353\251\342\364o\217\206\234ock",
  "\352\227 \273\244i\364le\233t\270",
  "\266\371\244\327\367\267ts",
  "\356a\254gn\235\302 \354\256y",
  "\360\223\257c\226\244\312\220\322\270",
  "\356\251\346\350\363\201; \347\376m\235z\210o",
  "\262\304\333\200(nega\205ve\314z\210\373\257\365\202\305bo\217ds)",
  "\262\266\257\232cl\331\214",
  "\262\365t\221d\200\352s",
  "\262\266c\212l\314\244\251\260add\220ss",
  "\222 \213tr\224po\203\202(\222 pu\234\330 \352s)",
  "\262\313e\233t; \244\353s\362t\274",
  "\042\301a\341t\325c\347\200\356\272\200l\347\202c\347\200\353s\362t\274 \313e\233t",
  "m\341\205p\351\301a\341t\207\353\042s\362t\274\042",
  "\217\322\235\276",
  "\203i\205\212iza\236d\223\251\264ce\270\207\232cl\204\235\333e",
  "\244\251lab\340\334",
  "\262\247 nam\200\216",
  "\247 \212\220ad\224\322\270\334",
  "\356l\241u\200(n\201-\346\226t)",
  "\304a\254gn\233\202\356\221\364\351a\254gn\233t",
  "\042b\220ak\325\257\042\303t\203ue\325\273\365\202\305\303t\264t",
  "\266head\337\332ff\210\207from pro\302type",
  "\222 \324\274\337\042#if...\042",
  "\262\274\331ct\261\346\226t",
  "\262\376bscrip\202(\244\354\304\257\302\373m\226\224\376bscripts)\334",
  "\262\363\201\314\347\376m\235z\210o",
  "\342\364o\217\206\313e\233\202\244c\343s\235a\202\272\200\213\206\305\361\351(\231\204t\235a\202l\203\200%d)",
  "\217k\222w\335\332\220c\205ve",
  "\304\203\232x \365\202\305bo\217d\207(\323\216)",
  "\304\356\203\232x\235(\323\216)",
  "\311do\307\244\327\367\251\301a\341\202\241u\200(\311%d)",
  "\311typ\200mis\324\274 (\311%d)",
  "e\364t\224\313e\233t",
  "\262\231r\337(po\254\234\224n\201-\370m\203\223\235\231r\203g)",
  "\264t\243 \274\331c\370\207\326l\203e",
  "\346\350\247 \327\207\222 \333e",
  "dupl\330\223\200\042c\347e\325lab\340 (\241u\200%d)",
  "\262\340lip\221s\314\304\333\200\273\244k\222wn",
  "\262\342\230\203a\236\305cl\347\207speci\361\210s",
  "\274\331ct\261\346\350\264ce\270\207r\226g\200f\257pack\235\231r\203g",
  "po\221\214\336p\331\357\370\207\320\310c\270\200\212l nam\235p\331\357\370s",
  "\302\373m\226\224\266\267ts",
  "\217k\222w\335\304\333\200(\323\216)",
  "\304\333\307d\373\244\324\274\314\257\232\231\203a\236\304\273\302\373sm\212l",
  "\304\332\233\221\201\207d\373\244\324\274",
  "\262l\203\200\303t\203ua\214",
  "\262r\226ge",
  "\262\376bscript\314\250\200\042[ ]\325\360\223\225\207\326\306j\257\332\233\221\201s",
  "m\341\205-\332\233\221\201\336\256y\207\356f\341l\224\203i\205\212iz\270",
  "\264ce\270\337\306ximum \375\305\332\233\221\201s",
  "\217\324\274\235c\343s\337b\243c\200(\042}\042)",
  "\231\204\202\305\266bod\224\362\272\365\202\266head\210",
  "\256ys\314\343c\336\300\307\226\206\266\267t\207c\226\244\312pu\234\330 (\323\216)",
  "\217f\203ish\235\363\326be\345\200\342\364il\261\332\220c\205ve",
  "dupl\330\223\200\267t; sam\200\311\273p\347s\235tw\330e",
  "\266\311\371\244\327\367\251\301a\341\202\241u\200(\323\216)",
  "m\341\205p\351\042#\340se\325\332\220c\205v\307betwe\213 \042#if ... #\213\332f\042",
  "\042#\340seif\325\332\220c\205\367f\240\343w\207\354\042#\340se\325\332\220c\205ve",
  "\375\305\360\226d\207do\307\244\361\202\272\200\360\223\225",
  "\266\220s\341\202\374\305\360\223\225\227 \356\216",
  "c\226\244\274\226g\200\310\322\235\360\223\225s",
  "\266\311\371\201l\224\327\367\251s\203g\351\374(\311%d)",
  "\266\311\371\244\312\251\220f\210\213c\200\311\257\354\304(\311\216)",
  "\323c\226\244\312bo\272 \251\220f\210\213c\200\226\206\354\304(\323\216)",
  "\262\243\214\336\375\310ci\221\326\353#p\243g\306",
  "\243\214\336\375\345\306\202\212\220ad\224\322\270",
  "\243\214\336\375\376pp\225\202wa\207\244\213\255\270",
  "\250\210-\322\235\360\223\257\356\232cl\204\235be\345\200\250\200(\352\227)",
  "\042\333e\271\325\360\223\257\273\262\326\042\352\325\247s",
  "\266\311\356\354\304(\311\216)",
  "#\322\200p\223\370\335\320\231\204\202\362\272 \354\212p\327be\205c \274\331c\370",
  "\203pu\202l\203\200\302\373l\201\253(aft\261\376bs\205tu\214s)",
  "\245n\321x \210r\257\353\272\200\363\201\314\257\262\266c\212l",
  "m\212\345m\235UTF-8 \213\342d\203g\314\257c\225rupt\235\361le: \211",
  "\266\250\307bo\272 \042\220turn\325\226\206\042\220tur\335<\241ue>\042",
  "\203\303\221\231\213\202\220tur\335typ\307(\304& n\201-\256y)",
  "\217k\222w\335\247\314\257\244\251\346\350\247 \316",
  "c\226\244\321k\200\251\374a\207\251\301a\341\202\241u\200f\257\354\203\232x\235\304p\331\357t\261\316",
  "\250\210-\322\235\360\223\225\207\226\206na\205\367\352\207\371\244\327\367\313es",
  "\251\266\257\323\371\201l\224b\340\201\253\302 \251s\203g\351au\302\324\326\316",
  "\313\200\303fl\330t: \201\200\305\272\200\313\307\273\212\220ad\224a\254gn\235\302 a\222\272\261i\364le\233\321\236\316",
  "\222 \313\307\204\200\322\235f\257\276",
  "\217k\222w\335au\302\324\201\227",
  "\217k\222w\335\313\200\216 f\257au\302\324\201\227",
  "pu\234\330 \300\307\226\206\343c\336\300\307\371\244\327\367\313\307\316",
  "\313\200\300\307\371\244\312\203i\205\212iz\235\316",
  "pu\234\330 \352\207\371\244\220tur\335\256y\207\316",
  "a\230i\263\365\207\346\226t; \374ov\210rid\200\273\220qui\220\206\316",
  "\262\375\345\324"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"",
/*101*/  "cannot write to file: \"%s\"",
/*102*/  "table overflow: \"%s\"",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory",
/*104*/  "invalid assembler instruction \"%s\"",
/*105*/  "numeric overflow, exceeding capacity",
/*106*/  "compiled script exceeds the maximum memory size (%ld bytes)",
/*107*/  "too many error messages on one line",
/*108*/  "codepage mapping file not found",
/*109*/  "invalid path: \"%s\"",
/*110*/  "assertion failed: %s",
/*111*/  "user error: %s"
/*112*/  "overlay function exceeds limit by %ld bytes"
#else
  "c\226\244\220a\206from \361le\334",
  "c\226\244writ\200\302 \361le\334",
  "t\255\200ov\210f\343w\334",
  "\203\376ff\330i\213\202\357m\225y",
  "\262\347se\230l\261\203\231ruc\214\227",
  "\366m\210\330 ov\210f\343w\314\264ce\270\337capacity",
  "\342\364il\235scrip\202\264ce\270\207\272\200\306ximum \357m\225\224\333\200(%l\206bytes)",
  "\302\373m\226\224\210r\257\357ssag\307\326\201\200l\203e",
  "\342\232pag\200\306pp\337\361\351\244fo\217d",
  "\262p\223h\334",
  "\347s\210\236fail\270: \211",
  "\250\261\210r\225: \211",
  "ov\210la\224\266\264ce\270\207limi\202b\224%l\206bytes"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters",
/*201*/  "redefinition of constant/macro (symbol \"%s\")",
/*202*/  "number of arguments does not match definition",
/*203*/  "symbol is never used: \"%s\"",
/*204*/  "symbol is assigned a value that is never used: \"%s\"",
/*205*/  "redundant code: constant expression is zero",
/*206*/  "redundant test: constant expression is non-zero",
/*207*/  "unknown #pragma",
/*208*/  "function with tag result used before definition, forcing reparse",
/*209*/  "function \"%s\" should return a value",
/*210*/  "possible use of symbol before initialization: \"%s\"",
/*211*/  "possibly unintended assignment",
/*212*/  "possibly unintended bitwise operation",
/*213*/  "tag mismatch",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"",
/*215*/  "expression has no effect",
/*216*/  "nested comment",
/*217*/  "loose indentation",
/*218*/  "old style prototypes used with optional semicolons",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level",
/*220*/  "expression with tag override must appear between parentheses",
/*221*/  "label name \"%s\" shadows tag name",
/*222*/  "number of digits exceeds rational number precision",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")",
/*225*/  "unreachable code",
/*226*/  "a variable is assigned to itself (symbol \"%s\")",
/*227*/  "more initiallers than enum fields",
/*228*/  "length of initialler exceeds size of the enum field",
/*229*/  "index tag mismatch (symbol \"%s\")",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back",
/*231*/  "state specification on forward declaration is ignored",
/*232*/  "output file is written, but with compact encoding disabled",
/*233*/  "state variable \"%s\" shadows a global variable",
/*234*/  "function is deprecated (symbol \"%s\") %s",
/*235*/  "public function lacks forward declaration (symbol \"%s\")",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)",
/*237*/  "recursive function \"%s\"",
/*238*/  "mixing string formats in concatenation"
#else
  "\276 \273tr\237\223\235\302 %\206\274\331c\370s",
  "\220\322i\236\305\346\226t/\306cr\373\316",
  "\375\305\267t\207do\307\244\324\274 \322i\214",
  "\247 \273nev\261\250\270\334",
  "\247 \273a\254gn\235\251\241u\200\272a\202\273nev\261\250\270\334",
  "\220d\217d\350\342\232: \346\350\363\326\273z\210o",
  "\220d\217d\350te\231: \346\350\363\326\273n\201-z\210o",
  "\217k\222w\335#p\243g\306",
  "\266\362\272 \374\220s\341\202\250\235be\345\200\322i\214\314\345c\337\220p\204se",
  "\352\227 sho\341\206\220tur\335\251\241ue",
  "po\254\234\200\250\200\305\247 be\345\200\203i\205\212iza\214\334",
  "po\254\234\224\217\203t\213\232\206a\254gn\233t",
  "po\254\234\224\217\203t\213\232\206bit\362s\200\360a\214",
  "\374mis\324\274",
  "po\254\234\224\251\042\346\325\304\311wa\207\203t\213\232d\334",
  "\363\326\327\207\222 effect",
  "ne\231\235\342m\233t",
  "\343os\200\203d\213\321\214",
  "\240\206\231y\351pro\302typ\307\250\235\362\272 op\214\336sem\330\240\201s",
  "\343c\336\323\216 s\327dow\207\251\323a\202\251\310c\270\337lev\340",
  "\363\326\362\272 \374ov\210rid\200\320appe\204 betwe\213 p\204\213\272eses",
  "lab\340 nam\200\216 s\327dow\207\374na\357",
  "\375\305\332git\207\264ce\270\207\243\214\336\375\310ci\221\201",
  "\220d\217d\350\042\333e\271\042: \311\333\200\273\212way\2071 \316",
  "\203\232\370m\203\223\200\304\333\200\353\042\333e\271\325\363\326\316",
  "\217\220a\274\255\200\342\232",
  "\251\323\273a\254gn\235\302 its\340f \316",
  "m\225\200\203i\205\212l\210\207\272\354\213um \361\340ds",
  "l\213g\272 \305\203i\205\212l\261\264ce\270\207\333\200\305\272\200\213um \361\340d",
  "\203\232x \374mis\324\274 \316",
  "\222 i\364le\233\321\236f\257\313\200\216 \353\352\227\314\222 f\212l-back",
  "\313\200specif\330a\236\326\345w\204\206\232cl\331\236\273ig\222\220d",
  "\365tpu\202\361\351\273writt\213\314bu\202\362\272 \342\364ac\202\213\342d\337\332s\255\270",
  "\313\200\323\216 s\327dow\207\251g\343b\336\300e",
  "\266\273\232\310c\223\235\316 \211",
  "pu\234\330 \266lack\207\345w\204\206\232cl\331\236\316",
  "\217k\222w\335p\331\357t\261\353\376bs\205tu\236(\203c\225\220c\202#\322\200p\223\370n)",
  "\220cur\221\367\352\227",
  "mix\337\231r\337\345\324\207\353\303c\223\213a\214"
#endif
       };

static char *noticemsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "did you mean \"%s\"?"
/*002*/  "perhaps you meant to use double quotes"
#else
  "*",
  "d\252y\365 \357\226\227?",
  "\344\327p\207y\365 \357\350\302 \250\200d\365\234\200quotes"
#endif
       };
