//=============================================================================
/**
 * @brief  ジャイロセンサのインターフェース
 * @file   gfl2_UI_Gyroscope.h
 * @author obata_toshihiro
 * @date   2011.03.24
 */
//=============================================================================
#ifdef GFL2_UI_USE_GYROSCOPE

#ifndef __gfl2_UI_GYROSCOPE_H__
#define __gfl2_UI_GYROSCOPE_H__
#pragma once

#include <heap/include/gfl2_Heap.h>
#include <macro/include/gfl2_Macros.h>
#include <math/include/gfl2_MathType.h>
#include <ui/include/gfl2_UI_Types.h>
#include "ui/include/gfl2_UI_Device.h"

namespace gfl2 {
  namespace ui {

    class DeviceImplementerForGyroscope;


    class Gyroscope : public Device
    {
      GFL_FORBID_COPY_AND_ASSIGN( Gyroscope );
      friend class DeviceManager;


      public:

      // 検出データ
      struct DetectiveData 
      {
        bool is_valid;                // 有効なデータかどうか
        gfl2::math::VEC3 speed;        // 角速度
        gfl2::math::VEC3 angle;        // 回転角
        gfl2::math::VEC3 direction_x;  // 姿勢ベクトル( x軸 )
        gfl2::math::VEC3 direction_y;  // 姿勢ベクトル( y軸 )
        gfl2::math::VEC3 direction_z;  // 姿勢ベクトル( z軸 )
      }; 

      // 実効データ
      struct EffectiveData 
      {
        bool is_valid;                // 有効なデータかどうか
        gfl2::math::VEC3 speed;        // 角速度
        gfl2::math::VEC3 angle;        // 回転角
        gfl2::math::VEC3 direction_x;  // 姿勢ベクトル( x軸 )
        gfl2::math::VEC3 direction_y;  // 姿勢ベクトル( y軸 )
        gfl2::math::VEC3 direction_z;  // 姿勢ベクトル( z軸 )
      }; 



      //-----------------------------------------------------------------------
      /**
       * @brief 有効なデータを持っているかどうかを調べる
       * @retval true   有効なデータを持っている
       * @retval false  有効なデータを持っていない
       */
      //-----------------------------------------------------------------------
      bool IsValid( void ) const;




      //-----------------------------------------------------------------------
      /**
       * @brief 角速度を取得する
       *
       * @retval[x] ピッチ方向の値
       * @retval[y] ヨー方向の値
       * @retval[z] ロール方向の値
       *
       * @note 各成分の値は, 360dpsを1.0とする値です.
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetSpeed( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度を計算する際に掛ける倍率を取得する
       *
       * @retval[x] ピッチ方向の角速度計算の倍率
       * @retval[y] ヨー方向の角速度計算の倍率
       * @retval[z] ロール方向の角速度計算の倍率
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetAngleMagnification( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度を計算する際に掛ける倍率を設定する
       *
       * @retval[x] ピッチ方向の角速度計算の倍率
       * @retval[y] ヨー方向の角速度計算の倍率
       * @retval[z] ロール方向の角速度計算の倍率
       *
       * @note デフォルト値は(1.0, 1.0, 1.0)
       */
      //-----------------------------------------------------------------------
      void SetAngleMagnification( const gfl2::math::VEC3& value );

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度に対する軸回転が有効かどうかを調べる
       *
       * @retval true   角速度への回転処理が有効
       * @retval false  角速度への回転処理が無効
       *
       * @note デフォルトは無効
       */
      //-----------------------------------------------------------------------
      bool IsAxisRotationEnable( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度に対する軸回転を有効にする
       */
      //-----------------------------------------------------------------------
      void EnableAxisRotation( void );

      //-----------------------------------------------------------------------
      /*
       * @brief 角速度に対する軸回転を無効にする
       */
      //-----------------------------------------------------------------------
      void DisableAxisRotation( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度に対する軸回転行列を取得する
       * @param[out] 回転行列の格納先
       */
      //-----------------------------------------------------------------------
      void GetAxisRotationMatrix( gfl2::math::MTX34* buffer ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度に対する軸回転行列を設定する
       * @param matrix 設定する回転行列
       */
      //-----------------------------------------------------------------------
      void SetAxisRotationMatrix( const gfl2::math::MTX34& matrix );

      //-----------------------------------------------------------------------
      /**
       * @brief 角速度に対する軸回転行列を初期化( 回転しない状態に )する
       */
      //-----------------------------------------------------------------------
      void ResetAxisRotationMatrix( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 各軸が現在の姿勢ベクトルになるような軸回転行列を設定する
       */
      //-----------------------------------------------------------------------
      void SetAxisRotationMatrixFromCurrentDirection( void );




      //-----------------------------------------------------------------------
      /**
       * @brief 回転角を取得する
       *
       * @retval[x] ピッチ方向の値
       * @retval[y] ヨー方向の値
       * @retval[z] ロール方向の値
       *
       * @note 各成分の値は, 360度を1.0とする値です.
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetAngle( void ) const;



      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトル( x軸 )を取得する
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetDirectionOfX( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトル( y軸 )を取得する
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetDirectionOfY( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトル( z軸 )を取得する
       */
      //-----------------------------------------------------------------------
      const gfl2::math::VEC3& GetDirectionOfZ( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトルを設定する
       */
      //-----------------------------------------------------------------------
      void SetDirection( const gfl2::math::MTX33& mtx );

      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトルの計算に使用する角速度に適用する倍率を取得する
       */
      //-----------------------------------------------------------------------
      f32 GetDirectionMagnification( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトルの計算に使用する角速度に適用する倍率を設定する
       *
       * @note デフォルト値は1.0
       */
      //-----------------------------------------------------------------------
      void SetDirectionMagnification( f32 value );




      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正が有効かどうかを調べる
       *
       * @retval true   ゼロ点ドリフトの補正が有効
       * @retval false  ゼロ点ドリフトの補正が無効
       *
       * @note デフォルトは有効
       */
      //-----------------------------------------------------------------------
      bool IsZeroDriftEnable( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正を有効にする
       */
      //-----------------------------------------------------------------------
      void EnableZeroDrift( void );

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正を無効にする
       */
      //-----------------------------------------------------------------------
      void DisableZeroDrift( void );


      // ゼロ点ドリフトの補正モード
      enum ZeroDriftMode 
      {
        // センサの値がある程度変動していても
        // 安定しているとみなして修正が行われるモード
        ZERO_DRIFT_MODE_LOOSE,

        // ZERO_DRIFT_MODE_LOOSE と
        // ZERO_DRIFT_MODE_TIGHT の中間にあたるモード
        ZERO_DRIFT_MODE_STANDARD,

        // センサの値が定められた閾値以内の変動でないと
        // 安定しているとみなさない厳密な修正が行われるモード
        ZERO_DRIFT_MODE_TIGHT,
      };

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正モードを取得する
       */
      //-----------------------------------------------------------------------
      ZeroDriftMode GetZeroDriftMode( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正モードを設定する
       *
       * @note デフォルトは ZERO_DRIFT_MODE_STANDARD
       */
      //-----------------------------------------------------------------------
      void SetZeroDriftMode( ZeroDriftMode next_mode );

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフト補正処理の働き具合を取得する
       *
       * @retval 負数  補正処理が無効の場合
       * @retval 正数  0.0は補正が行われなかった( 動きを検知した )ことを示す
       *               1.0に近づくほど安定している( 動きが少ない )ことを示す
       */
      //-----------------------------------------------------------------------
      f32 GetZeroDriftEffect( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正が有効かどうかを調べる
       *
       * @retval true   ゼロ点の遊び補正が有効
       * @retval false  ゼロ点の遊び補正が無効
       *
       * @note デフォルトは無効
       */
      //-----------------------------------------------------------------------
      bool IsZeroPlayParamEnable( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正を有効にする
       */
      //-----------------------------------------------------------------------
      void EnableZeroPlayParam( void );

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正を無効にする
       */
      //-----------------------------------------------------------------------
      void DisableZeroPlayParam( void );

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正の閾値を取得する
       */
      //-----------------------------------------------------------------------
      f32 GetZeroPlayParam( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正の閾値を設定する
       */
      //-----------------------------------------------------------------------
      void SetZeroPlayParam( f32 value );

      //-----------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正処理の働き具合を取得する
       *
       * @retval 負数  補正処理が無効の場合
       * @retval 正数  角速度が設定値に近くなるほど0.0に近づく
       *               0.0の場合は補正が行われなかったことを示す
       */
      //-----------------------------------------------------------------------
      f32 GetZeroPlayEffect( void ) const;




      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正が有効かどうかを調べる
       *
       * @retval true   加速度による三次元姿勢の補正が有効
       * @retval false  加速度による三次元姿勢の補正が無効
       *
       * @note デフォルトは有効
       */
      //-----------------------------------------------------------------------
      bool IsRevisionByAccelerationEnable( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正を有効にする
       */
      //-----------------------------------------------------------------------
      void EnableRevisionByAcceleration( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正を無効にする
       */
      //-----------------------------------------------------------------------
      void DisableRevisionByAcceleration( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みを取得する
       *
       * @note デフォルト値は0.03
       */
      //-----------------------------------------------------------------------
      f32 GetRevisionPowerByAcceleration( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みを設定する
       *
       * @note 値が大きいほど急激な補正が掛かります
       */
      //-----------------------------------------------------------------------
      void SetRevisionPowerByAcceleration( f32 value );

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の有効範囲を取得する
       *
       * @note デフォルト値は0.4
       */
      //-----------------------------------------------------------------------
      f32 GetRevisionRangeByAcceleration( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の有効範囲を設定する
       *
       * @note
       * 例えば, 0.4 を指定した場合は 
       * 0.6G 〜 1.4G の範囲ならば補正計算に加速度を使用します.
       *
       * @note
       * 補正のパラメータはすべての方向に一様に適用されます.
       * 
       */
      //-----------------------------------------------------------------------
      void SetRevisionRangeByAcceleration( f32 value );

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みと有効範囲を初期化する
       */
      //-----------------------------------------------------------------------
      void ResetRevisionParamByAcceleration( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正処理の働き具合を取得する
       *
       * @retval 0      補正が無効の場合
       * @retval 0以上  1.0に近づくほど, 
       *                三次元姿勢の方向を加速度の方向に近づくように補正したことを示す
       */
      //-----------------------------------------------------------------------
      f32 GetRevisionEffectByAcceleration( void ) const;




      protected:

      /**
       * @brief コンストラクタ
       *
       * @param heap         使用するヒープ
       * @param implementer  実際に入力の読み取りを行うオブジェクト
       */
      Gyroscope( gfl2::heap::HeapBase* heap, DeviceImplementerForGyroscope* implementer );

      /**
       * @brief デストラクタ
       */
      virtual ~Gyroscope(); 

      /**
       * @brief 実効データを蓄積する
       * @param[out] buffer               データの格納先
       * @param[in]  detective_data       今回の検出データ
       * @param[in]  prev_detective_data  前回の検出データ
       */
      virtual void StoreEffectiveData( void* buffer, const void* detective_data, const void* prev_detective_data ) const;



      private:
      DeviceImplementerForGyroscope* m_pImplementer; 

      const EffectiveData& GetEffectiveData( void ) const;
    }; 


  } //namespace ui
} //namespace gfl2 

#endif //__gfl2_UI_GYROSCOPE_H__

#endif  // GFL2_UI_USE_GYROSCOPE
