//=============================================================================
/**
 * @file   gfl2_UI_LogPlayer.h
 * @brief  ログデータの再生管理
 * @author obata_toshihiro
 * @date   2010.10.21
 */
//=============================================================================
#ifndef __gfl2_UI_LOGPLAYER_H__
#define __gfl2_UI_LOGPLAYER_H__
#include <heap/include/gfl2_Heap.h>
#include <macro/include/gfl2_Macros.h>

namespace gfl2 {
  namespace ui {

    class LogRecorder;


    class LogPlayer 
    {
      GFL_FORBID_COPY_AND_ASSIGN( LogPlayer );

      public:

      //-----------------------------------------------------------------------
      /**
       * @brief コンストラクタ
       *
       * @param p_recorder  再生するログ
       */
      //-----------------------------------------------------------------------
      LogPlayer( const LogRecorder* p_recorder );

      //-----------------------------------------------------------------------
      /**
       * @brief デストラクタ
       */
      //-----------------------------------------------------------------------
      virtual ~LogPlayer();

      //-----------------------------------------------------------------------
      /**
       * @brief ログデータを取得する
       *
       * @param p_buffer  取り出したデータの格納先
       */
      //-----------------------------------------------------------------------
      void GetLogData( void* p_buffer ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief ログの再生箇所を変更する
       * @param pos 再生位置
       */
      //-----------------------------------------------------------------------
      void SetPlayPos( int pos );

      //-----------------------------------------------------------------------
      /**
       * @brief ログの再生位置を先頭にする
       */
      //-----------------------------------------------------------------------
      void SetPlayPosHead( void ){ this->SetPlayPos(0); }

      //-----------------------------------------------------------------------
      /**
       * @brief ログの再生終了位置を設定する
       * @param endPos  再生最終位置( 負数なら最後まで再生する )
       */
      //-----------------------------------------------------------------------
      void SetPlayEndPos( int endPos );

      //-----------------------------------------------------------------------
      /**
       * @brief ログの再生箇所を進める
       */
      //-----------------------------------------------------------------------
      void IncPlayPos( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 再生が終了したかどうかを調べる
       * @retval true   再生が終了した
       * @retval false  再生が終了していない
       */
      //-----------------------------------------------------------------------
      bool IsPlayEnd( void ) const;
      
      //--------------------------------------------------------------------
      /**
       *	@brief  ログのバッファを取得
       */
      //--------------------------------------------------------------------
      void* GetLogBuffer( void ) const;


      protected:
      const LogRecorder* m_pRecorder; // 再生するログ
      u32 m_playDataIdx;      // 再生するデータ位置
      s32 m_maxPlayDataIdx;   // 再生対象の最大データ位置

      private:
      u32 GetCurrentLogDataIndex( void ) const;
    };


  } //namespace ui 
} //namespace gfl2

#endif //__gfl2_UI_LOGPLAYER_H__
