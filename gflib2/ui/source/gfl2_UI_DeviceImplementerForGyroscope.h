//=============================================================================
/**
 * @file   gfl2_UI_DeviceImplementerForGyroscope.h
 * @brief  ジャイロセンサ入力を検出するクラスのインターフェース
 * @author obata_toshihiro
 * @date   2011.03.31
 */
//=============================================================================
#ifdef GFL2_UI_USE_GYROSCOPE

#ifndef __gfl2_UI_DEVICE_IMPLEMENTER_FOR_GYROSCOPE_H__
#define __gfl2_UI_DEVICE_IMPLEMENTER_FOR_GYROSCOPE_H__
#include "ui/include/gfl2_UI_Gyroscope.h"
#include "./gfl2_UI_DeviceImplementer.h"

namespace gfl2 {
  namespace ui {

    class DeviceImplementerForGyroscope : public DeviceImplementer {
      GFL_FORBID_COPY_AND_ASSIGN(DeviceImplementerForGyroscope);

    public:
      //-----------------------------------------------------------------------
      /**
       * @brief デフォルトコンストラクタ
       */
      //-----------------------------------------------------------------------
      DeviceImplementerForGyroscope(void);

      //-----------------------------------------------------------------------
      /**
       * @brief デストラクタ
       */
      //-----------------------------------------------------------------------
      virtual ~DeviceImplementerForGyroscope();

      //-----------------------------------------------------------------------
      /**
       * @brief 入力データを取得する
       *
       * @param buffer  取得したデータの格納先 
       */
      //-----------------------------------------------------------------------
      virtual void GetDetectiveData(void* buffer) const = 0;

      //-----------------------------------------------------------------------
      /**
       * @brief 入力データのサイズを取得する
       */
      //-----------------------------------------------------------------------
      virtual u32 GetDetectiveDataSize(void) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 実効データのサイズを取得する
       */
      //-----------------------------------------------------------------------
      virtual u32 GetEffectiveDataSize(void) const;

      //-----------------------------------------------------------------------
      /**
       * @brief メイン処理
       */
      //-----------------------------------------------------------------------
      virtual void Main(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度を計算する際に掛ける倍率を取得する
       *
       * @retval[x] ピッチ方向の角速度計算の倍率
       * @retval[y] ヨー方向の角速度計算の倍率
       * @retval[z] ロール方向の角速度計算の倍率
       */
      //--------------------------------------------------------------------------
      virtual const gfl2::math::VEC3& GetAngleMagnification(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度を計算する際に掛ける倍率を設定する
       *
       * @retval[x] ピッチ方向の角速度計算の倍率
       * @retval[y] ヨー方向の角速度計算の倍率
       * @retval[z] ロール方向の角速度計算の倍率
       *
       * @note デフォルト値は(1.0, 1.0, 1.0)
       */
      //--------------------------------------------------------------------------
      virtual void SetAngleMagnification(const gfl2::math::VEC3& value) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトルの計算に使用する角速度に適用する倍率を取得する
       */
      //--------------------------------------------------------------------------
      virtual f32 GetDirectionMagnification(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 
       */
      //--------------------------------------------------------------------------
      virtual void SetDirection( const gfl2::math::MTX33& mtx ) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 姿勢ベクトルの計算に使用する角速度に適用する倍率を設定する
       *
       * @note デフォルト値は1.0
       */
      //--------------------------------------------------------------------------
      virtual void SetDirectionMagnification(f32 value) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正が有効かどうかを調べる
       *
       * @retval true   ゼロ点ドリフトの補正が有効
       * @retval false  ゼロ点ドリフトの補正が無効
       *
       * @note デフォルトは有効
       */
      //--------------------------------------------------------------------------
      virtual bool IsZeroDriftEnable(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正を有効にする
       */
      //--------------------------------------------------------------------------
      virtual void EnableZeroDrift(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正を無効にする
       */
      //--------------------------------------------------------------------------
      virtual void DisableZeroDrift(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正モードを取得する
       */
      //--------------------------------------------------------------------------
      virtual Gyroscope::ZeroDriftMode GetZeroDriftMode(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフトの補正モードを設定する
       *
       * @note デフォルトは ZERO_DRIFT_MODE_STANDARD
       */
      //--------------------------------------------------------------------------
      virtual void SetZeroDriftMode(Gyroscope::ZeroDriftMode next_mode) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点ドリフト補正処理の働き具合を取得する
       *
       * @retval 負数  補正処理が無効の場合
       * @retval 正数  0.0は補正が行われなかった( 動きを検知した )ことを示す
       *               1.0に近づくほど安定している( 動きが少ない )ことを示す
       */
      //--------------------------------------------------------------------------
      virtual f32 GetZeroDriftEffect(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正が有効かどうかを調べる
       *
       * @retval true   ゼロ点の遊び補正が有効
       * @retval false  ゼロ点の遊び補正が無効
       *
       * @note デフォルトは無効
       */
      //--------------------------------------------------------------------------
      virtual bool IsZeroPlayParamEnable(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正を有効にする
       */
      //--------------------------------------------------------------------------
      virtual void EnableZeroPlayParam(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正を無効にする
       */
      //--------------------------------------------------------------------------
      virtual void DisableZeroPlayParam(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正の閾値を取得する
       */
      //--------------------------------------------------------------------------
      virtual f32 GetZeroPlayParam(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正の閾値を設定する
       */
      //--------------------------------------------------------------------------
      virtual void SetZeroPlayParam(f32 value) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief ゼロ点の遊び補正処理の働き具合を取得する
       *
       * @retval 負数  補正処理が無効の場合
       * @retval 正数  角速度が設定値に近くなるほど0.0に近づく
       *               0.0の場合は補正が行われなかったことを示す
       */
      //--------------------------------------------------------------------------
      virtual f32 GetZeroPlayEffect(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度の軸回転が有効かどうかを調べる
       *
       * @retval true   角速度への回転処理が有効
       * @retval false  角速度への回転処理が無効
       *
       * @note デフォルトは無効
       */
      //--------------------------------------------------------------------------
      virtual bool IsAxisRotationEnable(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度の軸回転を有効にする
       */
      //--------------------------------------------------------------------------
      virtual void EnableAxisRotation(void) = 0;

      //--------------------------------------------------------------------------
      /*
       * @brief 角速度の軸回転を無効にする
       */
      //--------------------------------------------------------------------------
      virtual void DisableAxisRotation(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度の軸回転行列を取得する
       */
      //--------------------------------------------------------------------------
      virtual void GetAxisRotationMatrix(gfl2::math::MTX34* buffer) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度の軸回転行列を設定する
       */
      //--------------------------------------------------------------------------
      virtual void SetAxisRotationMatrix(const gfl2::math::MTX34& matrix) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 角速度の軸回転行列を初期化( 回転しない状態に )する
       */
      //--------------------------------------------------------------------------
      virtual void ResetAxisRotationMatrix(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 各軸が現在の姿勢ベクトルになるような軸回転行列を設定する
       */
      //--------------------------------------------------------------------------
      virtual void SetAxisRotationMatrixFromCurrentDirection(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正が有効かどうかを調べる
       *
       * @retval true   加速度による三次元姿勢の補正が有効
       * @retval false  加速度による三次元姿勢の補正が無効
       *
       * @note デフォルトは有効
       */
      //--------------------------------------------------------------------------
      virtual bool IsRevisionByAccelerationEnable(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正を有効にする
       */
      //--------------------------------------------------------------------------
      virtual void EnableRevisionByAcceleration(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正を無効にする
       */
      //--------------------------------------------------------------------------
      virtual void DisableRevisionByAcceleration(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みを取得する
       *
       * @note デフォルト値は0.03
       */
      //--------------------------------------------------------------------------
      virtual f32 GetRevisionPowerByAcceleration(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みを設定する
       *
       * @note 値が大きいほど急激な補正が掛かります
       */
      //--------------------------------------------------------------------------
      virtual void SetRevisionPowerByAcceleration(f32 value) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の有効範囲を取得する
       *
       * @note デフォルト値は0.4
       */
      //--------------------------------------------------------------------------
      virtual f32 GetRevisionRangeByAcceleration(void) const = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の有効範囲を設定する
       *
       * @note
       * 例えば, 0.4 を指定した場合は 
       * 0.6G 〜 1.4G の範囲ならば補正計算に加速度を使用します.
       *
       * @note
       * 補正のパラメータはすべての方向に一様に適用されます.
       * 
       */
      //--------------------------------------------------------------------------
      virtual void SetRevisionRangeByAcceleration(f32 value) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正の重みと有効範囲を初期化する
       */
      //--------------------------------------------------------------------------
      virtual void ResetRevisionParamByAcceleration(void) = 0;

      //--------------------------------------------------------------------------
      /**
       * @brief 加速度による三次元姿勢の補正処理の働き具合を取得する
       *
       * @retval 0      補正が無効の場合
       * @retval 0以上  1.0に近づくほど, 
       *                三次元姿勢の方向を加速度の方向に近づくように補正したことを示す
       */
      //--------------------------------------------------------------------------
      virtual f32 GetRevisionEffectByAcceleration(void) const = 0;
    };


  } //namespace ui
} //namespace gfl2

#endif  //__gfl2_UI_DEVICE_IMPLEMENTER_FOR_GYROSCOPE_H__
#endif  // GFL2_UI_USE_GYROSCOPE
