//=============================================================================
/**
 * @file   gfl2_UI_LogRecorder.h
 * @brief  ログデータ管理
 * @author obata_toshihiro
 * @date   2010.10.21
 */
//=============================================================================
#ifndef __gfl2_UI_LOGRECORDER_H__
#define __gfl2_UI_LOGRECORDER_H__
#include <heap/include/gfl2_Heap.h>
#include <macro/include/gfl2_Macros.h>

namespace gfl2 {
  namespace ui {

    class DeviceImplementer; 


    class LogRecorder
    {
      GFL_FORBID_COPY_AND_ASSIGN( LogRecorder );

      public:

      //-----------------------------------------------------------------------
      /**
       * @brief コンストラクタ
       *
       * @param p_target  ログをとるデバイス
       */
      //-----------------------------------------------------------------------
      LogRecorder( const DeviceImplementer* p_target );

      //-----------------------------------------------------------------------
      /**
       * @brief デストラクタ
       */
      //-----------------------------------------------------------------------
      virtual ~LogRecorder();

      //-----------------------------------------------------------------------
      /**
       * @brief ログバッファを確保する
       *
       * @param heap         使用するヒープ
       * @param buffer_size  バッファのサイズ
       */
      //-----------------------------------------------------------------------
      void AllocBuffer( gfl2::heap::HeapBase* heap, u32 buffer_size );

      //-----------------------------------------------------------------------
      /**
       * @brief ログバッファをセットする ( バッファの解放は行いません )
       *
       * @param p_buffer     バッファ先頭へのポインタ
       * @param buffer_size  バッファのサイズ
       */
      //-----------------------------------------------------------------------
      void SetBuffer( void* p_buffer, u32 buffer_size );

      //-----------------------------------------------------------------------
      /**
       * @brief 現在の入力を記録する
       */
      //-----------------------------------------------------------------------
      void RecCurrentInput( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 記録可能かどうかを調べる
       */
      //-----------------------------------------------------------------------
      bool CanRec( void ) const; 

      //-----------------------------------------------------------------------
      /**
       * @brief 記録したデータをクリアする
       */
      //-----------------------------------------------------------------------
      void ClearLog( void );

      //-----------------------------------------------------------------------
      /**
       * @brief 記録データを取得する
       *
       * @param index     何番目のデータを取り出すか
       * @param p_buffer  取り出したデータの格納先
       */
      //-----------------------------------------------------------------------
      void GetLogData( u32 index, void* p_buffer ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief データの記録位置を設定する
       *
       * @param recPos  データの記録位置
       *
       * @note recPos 以降のデータは失われます
       */
      //-----------------------------------------------------------------------
      void SetLogRecPos( u32 recPos );

      //-----------------------------------------------------------------------
      /**
       * @brief 記録データの数を取得する
       */
      //-----------------------------------------------------------------------
      u32 GetLogDataNum( void ) const;

      //-----------------------------------------------------------------------
      /**
       * @brief 記録データの最大数を取得する
       */
      //-----------------------------------------------------------------------
      u32 GetRecordableLogDataNum( void ) const;

      //--------------------------------------------------------------------
      /**
       *	@brief  ログデータのバッファを取得する
       */
      //--------------------------------------------------------------------
      void* GetLogBuffer( void ) const;



      protected:
      const DeviceImplementer* m_pRecTarget; // ログをとるデバイス
      void* m_pLogBuffer; // 記録したデータのバッファ
      u32 m_recDataIdx; // 記録するデータ位置
      u32 m_maxDataNum; // 記録可能なデータの数
      bool m_bufAllocFlag; // バッファを確保したかどうか
      bool padding;

      private:
      void FreeAllocatedBuffer( void );
    }; 

  } //namespace ui
} //namespace gfl2

#endif //__gfl2_UI_LOGRECORDER_H__
