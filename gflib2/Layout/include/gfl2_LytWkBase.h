//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *  GAME FREAK inc.
 *
 *  @file   gfl2_LytWkBase.h
 *  @brief  レイアウトワークベース
 *  @author tomoya takahshi
 *  @date   2010.10.08
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#if !defined( GFL2_LYTWKBASE_H_INCLUDED )
#define GFL2_LYTWKBASE_H_INCLUDED

#pragma once

#if defined(GF_PLATFORM_WIN32)
#include <nw/lyt.h>
#elif defined(GF_PLATFORM_CTR)
#include <nw/lyt2.h>
#endif

#include <layout/include/gfl2_G2dEnv.h>
#include <layout/include/gfl2_LytRes.h>
#include <layout/include/gfl2_LytSys.h>

#include <math/include/gfl2_math.h>
#include <heap/include/gfl2_Heap.h>
#include <heap/include/gfl2_NwAllocator.h>
#include <macro/include/gfl2_Macros.h>


GFL_NAMESPACE_BEGIN(gfl2)
GFL_NAMESPACE_BEGIN(lyt)

//-----------------------------------------------------------------------------
/**
 *          定数宣言
 */
//-----------------------------------------------------------------------------


//-------------------------------------
///  不正値
//=====================================
enum {
  LYTWKBASE_ANIMEIDX_ERROR = 0xffff,

  LYTWKBASE_ENUM_END
} ;



//-------------------------------------
///  全レイアウトワーク　共有情報
//=====================================
typedef struct {
  nw::lyt::GraphicsResource*  p_globalResource;
#if defined(GF_PLATFORM_CTR)  //!< cafeではdrawerが存在しない
  nw::lyt::Drawer*            p_drawer;
#endif
  Env                         env[gfl2::lyt::DISPLAY_NORMAL_MAX];
} LytWkBaseGlobalData;


//-----------------------------------------------------------------------------
/**
 *          構造体宣言
 */
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
/**
 *      アニメーション管理クラス
 */
//-----------------------------------------------------------------------------
class LytWkAnime
{
  // コピーコンストラクタ＋代入演算子禁止
  GFL_FORBID_COPY_AND_ASSIGN(LytWkAnime);


public:
  //-----------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //-----------------------------------------------------------------------------
  LytWkAnime(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //-----------------------------------------------------------------------------
  ~LytWkAnime();
  
  //-----------------------------------------------------------------------------
  /**
   * @brief   初期化
   *
   * @param   layout        レイアウト
   * @param   animTransform アニメクラス
   * @param   res           リソース
   * @param   multi_id      リソース登録ID
   * @param   lytDataID     リソースデータID
   * @param   isUsingHash   ハッシュを使用するか
   * @param   custom_lyt    カスタマイズNWで使用するレイアウト
   */
  //-----------------------------------------------------------------------------
  void Initialize(
    nw::lyt::Layout * layout,
    nw::lyt::AnimTransform * animTransform,
    const LytRes * res,
    u32 multi_id,
    u32 lytDataID,
    bool isUsingHash,
    nw::lyt::Layout * custom_lyt );

  //-----------------------------------------------------------------------------
  /**
   * @brief   破棄
   */
  //-----------------------------------------------------------------------------
  void Finalize(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   初期化済みチェック
   *
   * @retval  "true = 初期化済み"
   * @retval  "false = それ以外"
   */
  //-----------------------------------------------------------------------------
  bool IsInitialized(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief  バインド処理
   *
   * @param   layout      レイアウト
   * @param   is_enable   アニメを無効状態で関連付ける場合 = false
   * @param   is_useHash  ハッシュを使用するか
   */
  //-----------------------------------------------------------------------------
  void Bind( nw::lyt::Layout * layout, bool is_enable=false, bool is_useHash=false );

  //-----------------------------------------------------------------------------
  /**
   * @brief   バインド解除
   */
  //-----------------------------------------------------------------------------
  void UnBind(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief  バインドされているかチェック
   *
   * @retval  "true = バインドされている"
   * @retval  "false = それ以外"
   */
  //-----------------------------------------------------------------------------
  bool IsBindAnime(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   アニメの有効/無効設定
   *
   * @param   flag  true = 有効, false = 無効
   */
  //-----------------------------------------------------------------------------
  void SetEnable( bool flag );

  //-----------------------------------------------------------------------------
  /**
   * @brief   アニメが有効かチェック
   *
   * @retval  "true = 有効"
   * @retval  "false = 無効"
   */
  //-----------------------------------------------------------------------------
  bool IsEnable(void) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief  アニメーションフレームを進める
   *
   *  @param  frame 進めるフレーム数
   *
   *  @retval true      アニメーション終了
   *  @retval false     アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool AddAnimeFrame( f32 frame );

  //-----------------------------------------------------------------------------
  /**
   *  @brief  アニメーションフレームの終了をチェック
   *
   *  @retval true      アニメーション終了
   *  @retval false     アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeEnd( void ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアニメーション設定
   *
   *  @param  flag  true  オートアニメON    false オートアニメ
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnime( bool flag );

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアニメーション設定　取得
   *
   *  @retval true    オートアニメON
   *  @retval false   オートアニメOFF
   */
  //-----------------------------------------------------------------------------
  bool IsAutoAnime( void ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアニメーションスピード設定
   *
   *  @param  speed オートアニメーションスピード
   */
  //-----------------------------------------------------------------------------
  inline void SetAutoAnimeSpeed( f32 speed ){ m_AutoAnimeSpeed = speed; }

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアニメーションスピード取得
   *  @return オートアニメーションスピード
   */ 
  //-----------------------------------------------------------------------------
  inline f32 GetAutoAnimeSpeed( void ) const { return m_AutoAnimeSpeed; }

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアンバインド設定
   */
  //-----------------------------------------------------------------------------
  inline void SetAutoUnbind( bool flag ) { m_IsAutoUnbind = flag; }

  //-----------------------------------------------------------------------------
  /**
   *  @brief  オートアンバインドなのかチェック
   *
   *  @retval true    オートアンバインド
   *  @retval false   オートアンバインドではない
   */
  //-----------------------------------------------------------------------------
  inline bool IsAutoUnbind( void ) const { return m_IsAutoUnbind; }

  //-----------------------------------------------------------------------------
  /**
   * @brief   アニメーションクラスを取得
   *
   * @return  アニメーションクラス
   */
  //-----------------------------------------------------------------------------
  nw::lyt::AnimTransform * GetAnimeWork(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトを取得
   *
   * @return  レイアウト
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Layout * GetLayout(void) const;
 

private:
  bool                    m_Initialize;     // 初期化フラグ
  bool                    m_AutoAnime;      // オートアニメーションフラグ
  bool                    m_BindFlag;      // バインドされているか？
  bool                    m_Enable;         // アニメーション有効状態か？
  bool                    m_IsAutoUnbind;   // アニメーション完了後、にオートアンバインド
  nw::lyt::AnimTransform* m_AnimTransform;  // アニメーション管理クラス
  nw::lyt::AnimResource m_AnimRes;

  f32                     m_AutoAnimeSpeed; // オートアニメスピード

  // 部品対応
  nw::lyt::Layout * m_layout;   // バインドしたレイアウト
};

class LytWk;
//-----------------------------------------------------------------------------
/**
 *          LytWkBaseクラス宣言
 *
 *          ・レイアウトワーク　生成・破棄
 *          ・各種ペイン操作
 *          ・Group単位の操作
 *          ・アニメーション操作
*/
//-----------------------------------------------------------------------------
class LytWkBase
{
  // コピーコンストラクタ＋代入演算子禁止
  GFL_FORBID_COPY_AND_ASSIGN(LytWkBase);

  friend class LytWk;
  friend class LytSys;
private:
  //-----------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //-----------------------------------------------------------------------------
  LytWkBase(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //-----------------------------------------------------------------------------
  ~LytWkBase();

  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワーク初期化
   *
   * @param   heap_allocator        アロケーター
   * @param   device_allocator      デバイスアロケーター
   * @param   res                   リソース情報
   * @param   res_multi_id          リソース登録ID
   * @param   lytDataID             レイアウトデータID
   * @param   animeNum              アニメーション最大登録数
   * @param   globalData            共有情報
   * @param   createPaneTbl         ペインテーブル生成
   * @param   createPaneTblWithHash 高速検索用にハッシュキーを作る（消費メモリ増）
   */
  //-----------------------------------------------------------------------------
  void Initialize(
    gfl2::heap::NwAllocator * heap_allocator,
    gfl2::heap::NwAllocator * device_allocator,
    const LytRes * res,
    u32 res_multi_id,
    u32 lytDataID,
    u32 animeNum,
    LytWkBaseGlobalData * globalData,
    b32 createPaneTblFlag,
    b32 createPaneTblWithHash = false );

  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワーク破棄
   */
  //-----------------------------------------------------------------------------
  void Finalize( void );
  
  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワーク初期化済みチェック
   *
   * @retval  true  初期化完了
   * @retval  false 初期化前
   */
  //-----------------------------------------------------------------------------
  bool IsInitialized(void) const;

public:
  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワーク更新
   */
  //-----------------------------------------------------------------------------
  void Update( void );

private:
  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワーク描画
   *
   * @param   lod           描画面
   * @param   cameraType    カメラタイプ
   * @param   renderTarget  レンダーターゲット
   *
   * @return  実際に描画したらtrue、描画していないときはfalse
   */
  //-----------------------------------------------------------------------------
  bool Draw( gfl2::lyt::DisplayType lod, Env::CameraType cameraType );

public:
  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワークグループIDの設定
   *
   * @param   groupID   グループID
   */
  //-----------------------------------------------------------------------------
  void SetWkGroupID( u16 groupID );

  //-----------------------------------------------------------------------------
  /**
   * @brief   レイアウトワークグループIDの取得
   *
   * @return  グループID
   */
  //-----------------------------------------------------------------------------
  u16 GetWkGroupID( void ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   UpperLowerに対応したユーザー描画環境データ設定
   *
   * @param   upperEnv  上画面用ENV
   * @param   lowerEnv  下画面用ENV
   *
   *  *描画にGlobalEnvではなく引数のENVを使用するようになります。
   *  *戻すには、SetGlobalEnv()を呼んでください。
   */
  //-----------------------------------------------------------------------------
  void SetUserEnv( const Env* upperEnv, const Env* lowerEnv );

  //-----------------------------------------------------------------------------
  /**
   * @brief   グローバルENVを使用するように設定
   */
  //-----------------------------------------------------------------------------
  void SetGlobalEnv( void );

  //-----------------------------------------------------------------------------
  /**
   *  @brief  リンクリスト　1つ前のワーク設定<LytWk型>
   *
   *  @param  １つ前のワーク
   */
  //-----------------------------------------------------------------------------
  void SetPrev( LytWk* prev );

  //-----------------------------------------------------------------------------
  /**
   * @brief   リンクリスト: 1つ前のワーク取得<LytWk型>
   *
   * @retval  １つ前のワークreinterpret_cast<LytWk*>として使用してください。
   */
  //-----------------------------------------------------------------------------
  LytWk* GetPrev( void ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   リンクリスト: 次のワーク設定<LytWk型>
   *
   * @param   next  次のワーク
   */
  //-----------------------------------------------------------------------------
  void SetNext( LytWk* next );

  //-----------------------------------------------------------------------------
  /**
   * @brief   リンクリスト: 次のワーク取得<LytWk型>
   *
   * @retval  次のワークreinterpret_cast<LytWk*>として使用してください。
   */
  //-----------------------------------------------------------------------------
  LytWk* GetNext( void ) const;


  //=============================================================================
  /**
   * ペイン操作
   */
  //=============================================================================

  //-----------------------------------------------------------------------------
  /**
   * @brief   ペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != ペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Pane* GetPane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   * @brief   ピクチャーペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != ピクチャーペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Picture* GetPicturePane( u32 paneIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   テキストボックスペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != テキストボックスペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::TextBox* GetTextBoxPane( u32 paneIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   テキストボックスペインの文字列バッファを確保
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   * @param   minLen        文字数
   */
  //-----------------------------------------------------------------------------
  void AllocTextBoxPaneStringBuffer( u32 paneIndex, u32 minLen ) const;
  void AllocTextBoxPaneStringBuffer( gfl2::lyt::LytTextBox* pTextBoxPain, u32 minLen ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   ウィンドウペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != ウィンドウペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Window* GetWindowPane( u32 paneIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   バウンディングペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != バウンディングペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Bounding* GetBoundingPane( u32 paneIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペインを取得
   *
   * @param   paneIndex     コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != 部品ペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Parts* GetPartsPane( u32 paneIndex ) const;

  //----------------------------------------------------------------------------
  /**
   * @brief   マテリアル情報を取得
   *
   * @param   materialIndex   コンバータから出力されるインデックス ( *_pane.h )
   *
   * @retval  "NULL != マテリアル情報"
   * @retval  "NULL = マテリアルが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Material* GetMaterial( u32 materialIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != ペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Pane * GetPane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のピクチャーペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != ピクチャーペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Picture * GetPicturePane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のテキストボックスペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != テキストボックスペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::TextBox * GetTextBoxPane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のテキストボックスペインの文字列バッファを確保
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   * @param   minLen        文字数
   */
  //-----------------------------------------------------------------------------
  void AllocTextBoxPaneStringBuffer( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id, u32 minLen ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のウィンドウペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != ウィンドウペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Window * GetWindowPane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のバウンディングペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != バウンディングペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Bounding * GetBoundingPane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内の部品ペインを取得
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     patrs内のペインインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != 部品ペイン"
   * @retval  "NULL = ペインが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Parts * GetPartsPane( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //----------------------------------------------------------------------------
  /**
   * @brief   部品ペイン内のマテリアル情報を取得
   *
   * @param   parts         部品ペイン
   * @param   materialIndex patrs内のマテリアルインデックス ( *_pane.h )
   * @param   res_multi_id  partsのリソース登録ID
   *
   * @retval  "NULL != マテリアル情報"
   * @retval  "NULL = マテリアルが存在しない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Material* GetMaterial( nw::lyt::Parts * parts, u32 materialIndex, u32 res_multi_id ) const;


  //-----------------------------------------------------------------------------
  /**
   * @brief   ヒットチェックが可能か取得
   *
   * @retval  true  可能
   * @retval  false 不可能
   */
  //-----------------------------------------------------------------------------
  bool IsHitCheckOK( void ) const;



  //============================================================================
  /**
   *  基本操作
   */
  //=============================================================================
  
  //----------------------------------------------------------------------------
  /**
   *  @brief    オート描画のON/OFF設定
   *  
   *  @param    flag    フラグ  true:ON   false:OFF
   */
  //-----------------------------------------------------------------------------
  void SetAutoDrawFlag( bool flag );


  //----------------------------------------------------------------------------
  /**
   *  @brief    オート描画のON/OFF 取得
   *  
   *  @retval true    ON
   *  @retval false   OFF
   */
  //-----------------------------------------------------------------------------
  bool IsAutoDraw( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief  処理優先順位の設定
   *
   *  @param  pri   優先順位（ 0 > 0xffff )
   *
   *  UpdateAllとDrawAllを行う際の優先順位です。
   */
  //-----------------------------------------------------------------------------
  void SetPriority( u16 pri );

  //----------------------------------------------------------------------------
  /**
   *  @brief  処理優先順位の取得
   *
   *  @retval  優先順位（ 0 > 0xffff )
   *
   *  UpdateAllとDrawAllを行う際の優先順位です。
   */
  //-----------------------------------------------------------------------------
  u16 GetPriority( void ) const;
  
  
  //----------------------------------------------------------------------------
  /**
   *  @brief  座標の設定
   *
   *  @param  pos
   */
  //-----------------------------------------------------------------------------
  void SetTranslate( const gfl2::math::Vector3& pos );

  //----------------------------------------------------------------------------
  /**
   *  @brief  座標の取得
   *
   *  @param  p_pos 座標格納先
   */
  //-----------------------------------------------------------------------------
  void GetTranslate( gfl2::math::Vector3* p_pos ) const;


  //----------------------------------------------------------------------------
  /**
   *  @brief  拡大の設定
   *
   *  @param  scale   スケーリング値
   */
  //-----------------------------------------------------------------------------
  void SetScale( const gfl2::math::Vector2& scale );
  
  //----------------------------------------------------------------------------
  /**
   *  @brief  拡大の取得
   *
   *  @param p_scale スケーリング値格納先
   */
  //-----------------------------------------------------------------------------
  void GetScale( gfl2::math::Vector2* p_scale ) const;


  //----------------------------------------------------------------------------
  /**
   *  @brief  回転の設定
   *
   *  @param  rotate   各軸の回転値
   */
  //-----------------------------------------------------------------------------
  void SetRotate( const gfl2::math::Vector3& rotate );

  //----------------------------------------------------------------------------
  /**
   *  @brief  回転の取得
   *
   *  @param  p_rotate   各軸の回転値
   */
  //-----------------------------------------------------------------------------
  void GetRotate( gfl2::math::Vector3* p_rotate ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief  カリングフラグの設定
   *
   *  @param  flag  フラグ
   *
   *  カリングをfalseにするということは、
   *  左、右、下すべての画面でレンダリング処理が実行されるということですので、
   *  処理負荷に注意してください。
   */
  //-----------------------------------------------------------------------------
  void SetCullingFlag( bool flag );

  //----------------------------------------------------------------------------
  /**
   *  @brief  カリングフラグの取得
   *
   *  @retval  true  カリング処理ON
   *  @retval false カリング処理OFF
   */
  //-----------------------------------------------------------------------------
  bool IsCullingFlag( void ) const;


  //----------------------------------------------------------------------------
  /**
   *  @brief  描画するディスプレイタイプを設定
   *
   *  @param  lod   描画するディスプレイタイプ
   */
  //-----------------------------------------------------------------------------
  void SetDrawDispType( gfl2::lyt::DisplayType lod );

  //----------------------------------------------------------------------------
  /**
   *  @brief  描画するディスプレイタイプの取得
   *
   *  @return 描画するディスプレイタイプ
   */
  //-----------------------------------------------------------------------------
  gfl2::lyt::DisplayType GetDrawDispType( void ) const;

  //============================================================================
  /**
   *  アニメーション関連
   */
  //=============================================================================
  //----------------------------------------------------------------------------
  /**
   *  @brief  空いているアニメーションインデックスを取得
   *  
   *  @retval 空いているアニメーションインデックス
   *  @retval LYTWKBASE_ANIMEIDX_ERROR    空いてない
   */
  //-----------------------------------------------------------------------------
  u32 GetClearAnimeIndex( void ) const;
  
  //-----------------------------------------------------------------------------
  /**
   * @brief   アニメーション情報生成
   *
   * @param   anmIdx      生成先アニメーションインデックス
   * @param   res         リソースデータ
   * @param   multi_id    リソース登録ID
   * @param   lytDataID   アニメーションリソースのデータID
   * @param   is_enable   アニメを無効状態で関連付ける場合 = false
   * @param   is_useHash  ハッシュを使用するか
   */
  //-----------------------------------------------------------------------------
  void CreateAnime( u32 anmIdx, const LytRes* res, u32 multi_id, u32 lytDataID, bool is_enable=false, bool is_useHash=false );

  //-----------------------------------------------------------------------------
  /**
   * @brief   部品のアニメーション情報生成
   *
   * @param   parts       部品ペイン
   * @param   anmIdx      生成先アニメーションインデックス
   * @param   res         リソースデータ
   * @param   multi_id    リソース登録ID
   * @param   lytDataID   アニメーションリソースのデータID
   * @param   is_enable   アニメを無効状態で関連付ける場合 = false
   * @param   is_useHash  ハッシュを使用するか
   */
  //-----------------------------------------------------------------------------
  void CreatePartsAnime( nw::lyt::Parts * parts, u32 anmIdx, const LytRes* res, u32 multi_id, u32 lytDataID, bool is_enable=false, bool is_useHash=false );

  //----------------------------------------------------------------------------
  /**
   * @brief   アニメーション情報の破棄
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  void DeleteAnime( u32 anmIdx );

  //----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションインデックス最大値取得
   *
   *  @retval   アニメーションインデックス最大値
   */
  //-----------------------------------------------------------------------------
  u32 GetAnimeMax( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief    アニメーション情報があるかチェック
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  bool IsAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの反映
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  is_auto_unbind   one time アニメーションの場合、アニメーション完了後、unbindする。
   */
  //-----------------------------------------------------------------------------
  void BindAnime( u32 anmIdx, bool is_auto_unbind ); 

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの反映解除
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  void UnBindAnime( u32 anmIdx );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    全アニメーションの反映解除
   */
  //-----------------------------------------------------------------------------
  void UnBindAnimeAll( void );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションがバインドされているかチェック
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  bool IsBindAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション設定
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  flag      ON/OFFフラグ
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnime( u32 anmIdx, bool flag );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーションかチェック
   *
   *  @param  anmIdx    アニメーションインデックス
   *
   *  @retval true    オートアニメ
   *  @retval false   非オートアニメ
   */
  //-----------------------------------------------------------------------------
  bool IsAutoAnime( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション スピード設定　（全オートアニメ共通）
   *
   *  @param  speed     アニメーションスピード
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnimeSpeed( f32 speed );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    オートアニメーション スピード設定　（個別設定）
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  speed     アニメーションスピード
   */
  //-----------------------------------------------------------------------------
  void SetAutoAnimeSpeed( u32 anmIdx, f32 speed );


  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム設定
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  frame     アニメーションフレーム
   */
  //-----------------------------------------------------------------------------
  void SetAnimeFrame( u32 anmIdx, f32 frame );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム　カウント
   *
   *  @param  anmIdx    アニメーションインデックス
   *  @param  frame     アニメーションフレーム
   *
   *  @retval true    アニメーション終了（LOOP設定のときは常にfalse）
   *  @retval false   アニメーション途中
   */
  //-----------------------------------------------------------------------------
  bool AddAnimeFrame( u32 anmIdx, f32 frame );

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションフレーム取得
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimeFrame( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーション最大フレーム取得
   *
   *  @param  anmIdx    アニメーションインデックス
   */
  //-----------------------------------------------------------------------------
  f32 GetAnimeMaxFrame( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    ループアニメーションかチェック
   *
   *  @param  anmIdx    アニメーションインデックス
   *
   *  @retval true    ループアニメーション
   *  @retval false   ループアニメーションじゃない
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeLoop( u32 anmIdx ) const;

  //-----------------------------------------------------------------------------
  /**
   *  @brief    アニメーションの完了チェック
   *
   *  @param  anmIdx    アニメーションインデックス
   *
   *  @retval true    完了
   *  @retval false   途中
   */
  //-----------------------------------------------------------------------------
  bool IsAnimeEnd( u32 anmIdx ) const;


  //-----------------使用注意-----------
  //-----------------------------------------------------------------------------
  /**
   *  @brief  コアシステムの取得
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Layout* GetCore(void) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief    描画インフォの取得
   *
   *  @return 描画インフォ
   */
  //-----------------------------------------------------------------------------
  const nw::lyt::DrawInfo* GetDrawInfo(void) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief    DrawInfoに非表示のペインに対して行列計算を行うかどうかを設定する
   *
   *  @return    none
   */
  //-----------------------------------------------------------------------------
  void SetInvisiblePaneCalculateMtx( bool flg );

  //----------------------------------------------------------------------------
  /**
   *  @brief  描画する必要があるかチェック
   *
   *  @retval true    必要がある。
   *  @retval false   必要がない。
   */
  //-----------------------------------------------------------------------------
  b32 IsDrawDisplayType( gfl2::lyt::DisplayType lod ) const;

  //=============================================================================
  /**
   *  詳細操作
   */
  //=============================================================================
  //-----------------------------------------------------------------------------
  /**
   * @brief   Groupの取得
   *
   * @param   paneIndex     ペインインデックス
   *
   * @retval  Groupのインスタンス
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Group * GetGroup( u32 paneIndex ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   Groupの取得 ( 部品ペイン版 )
   *
   * @param   parts         部品ペイン
   * @param   paneIndex     ペインインデックス
   * @param   res_multi_id  リソース登録ID
   *
   * @retval  Groupのインスタンス
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Group * GetGroup( nw::lyt::Parts * parts, u32 paneIndex, u32 res_multi_id ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief    参照レイアウトリソース取得
   *
   *  @return   レイアウトリソース
   */
  //-----------------------------------------------------------------------------
  const LytRes* GetLytRes(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   参照レイアウトのリソース登録IDを取得
   *
   * @return  リソース登録ID
   */
  //-----------------------------------------------------------------------------
  u32 GetLytResMultiID(void) const;


private:
  
  //============================================================================
  /**
   *  メンバ変数
   */
  //=============================================================================
  LytWkBaseGlobalData*          m_globalData;
  bool                          m_Initialize;
  bool                          m_AutoDrawFlag;
  bool                          m_useGlobalEnv;
  bool                          m_hitCheckOk;     // ヒットチェックが可能か
  bool                          m_CullingFlag;  // カリングを行うか。
  u16                           m_Priority;
  u16                           m_WkGroupID;
  nw::lyt::Layout*              m_LytSys;
  nw::lyt::DrawInfo             m_LytDrawInfo;
  const Env*                    m_UserEnv[gfl2::lyt::DISPLAY_NORMAL_MAX];
  LytWkAnime*                   m_AnimArray;
  u32                           m_AnimMax;
  f32                           m_AutoAnimeSpeed;
  gfl2::lyt::DisplayType        m_DisplayType;  // 描画する面

  const LytRes * m_res;   //!< 参照リソース保持
  u32 m_resMultiID;       //!< m_LytSysのリソース登録ID

  LytWk*                        m_prev;
  LytWk*                        m_next;

  nw::lyt::Pane ** m_ppPaneTbl; ///< ペインテーブル
  
  // ユーザーアロケータ
  // NULLのときは、レイアウトシステムのアロケータを使用する。
  gfl2::heap::NwAllocator*   m_pUserAllocator;
  gfl2::heap::NwAllocator*   m_pUserDeviceAllocator;

  // 描画中カウント
  u32 m_drawingCount;


  //============================================================================
  /**
   *  オートアニメ
   */
  //=============================================================================
  void UpdateAutoAnime( void );
  
  b32 IsCulling( const Camera& camera ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   矩形位置情報を取得
   *
   * @param   rect   矩形情報
   * @param   id     取得ID
   * @param   p_pos  位置情報
   */
  //-----------------------------------------------------------------------------
  static void GetRectCheckPos( const nw::ut::Rect& rect, u32 idx, gfl2::math::Vector3* p_pos );

  //-----------------------------------------------------------------------------
  /**
   * @brief   ペインテーブル生成
   *
   * @param   m_heap      ヒープ
   * @param   isUseHash   ハッシュを使用するか
   */
  //-----------------------------------------------------------------------------
  void createPaneTbl( gfl2::heap::HeapBase * p_heap, bool isUseHash );

  //-----------------------------------------------------------------------------
  /**
   * @brief   ペインテーブル破棄
   */
  //-----------------------------------------------------------------------------
  void DeletePaneTbl(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   ペインを取得
   *
   * @param   paneIndex     インデックス
   * @param   res_multi_id  リソース登録ID
   *
   * @retval  "NULL != ペイン"
   * @retval  "NULL = テーブルにない"
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Pane * getPaneTblPane( u32 paneIndex, u32 res_multi_id ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   Groupの取得
   *
   * @param   layout        レイアウト
   * @param   paneIndex     ペインインデックス
   * @param   res_multi_id  リソース登録ID
   *
   * @retval  Groupのインスタンス
   */
  //-----------------------------------------------------------------------------
  nw::lyt::Group * GetGroup( nw::lyt::Layout * layout, u32 paneIndex, u32 res_multi_id ) const;


  //! @name  描画中カウント(friendであるLytWkからしかアクセスしない)
  //@{
private:
  //----------------------------------------------------------------------------
  /**
   *  @brief  描画中か
   *  @return  trueのとき描画中(描画中はFinalizeで破棄してはならない)
   *  @note   m_drawingCountを見張っている
   */
  //----------------------------------------------------------------------------
  bool IsDrawing(void) const;
  //----------------------------------------------------------------------------
  /**
   *  @brief  描画中カウントを増やす
   *  @note   m_drawingCountを増やす
   */ 
  //----------------------------------------------------------------------------
  void IncreaseDrawingCount(void);
  //----------------------------------------------------------------------------
  /**
   *  @brief  描画中カウントを減らす
   *  @note   m_drawingCountを減らす
   */ 
  //----------------------------------------------------------------------------
  void DecreaseDrawingCount(void);
  //@}


};


GFL_NAMESPACE_END(lyt)
GFL_NAMESPACE_END(gfl2)

#endif  // GFL2_LYTWKBASE_H_INCLUDED
