#ifndef __GFL2_EVENT_H__
#define __GFL2_EVENT_H__
//=============================================================================
/**
 * @file	 gfl2_Event.h
 * @brief	 スレッド間で完了したことを安全に伝える事ができるクラス
 * @author k.ohno
 * @date	 2014.5.13
 */
//=============================================================================
#pragma once


#include <types/include/gfl2_Typedef.h>
#include <macro/include/gfl2_Macros.h>
#include <debug/include/gfl2_Assert.h>
#include <debug/include/gfl2_DebugPrint.h>
#include <heap/include/gfl2_Heap.h>



/*

  完了したことを伝えるクラス
  スレッド間でも安全に取得できる

*/


GFL_NAMESPACE_BEGIN(gfl2)
GFL_NAMESPACE_BEGIN(thread)


class EventAdapter;

class Event{
  GFL_FORBID_COPY_AND_ASSIGN(Event);

public:
  //-----------------------------------------------------------------------
  /**
   * @brief コンストラクタ デストラクタ
   * @param pHeap     同期　EventCore作成のメモリ確保のために使用します
   * @attention       メモリ確保はInitializeとクリアのタイミングに呼ばれます
   */
  //-----------------------------------------------------------------------
  Event(gfl2::heap::HeapBase* pHeap);
  ~Event(){};
  //-----------------------------------------------------------------------
  /**
   * @brief 初期化
   */
  //-----------------------------------------------------------------------
  void Initialize(void);
  //-----------------------------------------------------------------------
  /**
   * @brief 終了処理
   */
  //-----------------------------------------------------------------------
  void Finalize(void);
  //-----------------------------------------------------------------------
  /**
   * @brief フラグをセットします
   */
  //-----------------------------------------------------------------------
  void Signal(void);
  //-----------------------------------------------------------------------
  /**
   * @brief フラグがセットされるまで待ちます。  デッドロックなので使用には注意が必要です。
   * @return きちんとシグナルがコールされている場合は TRUE 
   */
  //-----------------------------------------------------------------------
  bool Wait(void);
  //-----------------------------------------------------------------------
  /**
   * @brief フラグがセットされているかを確認します
   * @return Signalが呼ばれた場合TRUE まだのときはFALSE
   */
  //-----------------------------------------------------------------------
  bool TryWait(void);
  //-----------------------------------------------------------------------
  /**
   * @brief クリアしてもう一度使用する
   */
  //-----------------------------------------------------------------------
  void Clear(void);


private:
  gfl2::heap::HeapBase* mpHeap;
  EventAdapter* mpEventAdapter;

};





GFL_NAMESPACE_END(thread)
GFL_NAMESPACE_END(gfl2)

#endif //__GFL2_EVENT_H__
