//===========================================================================
/**
 * @file    gfl2_StrBuf.h
 * @brief   GAMEFREAK Library String System ( String Buffer )
 * @author  GAMEFREAK inc.
 * @date    2010.10.28
 */
//===========================================================================
#if !defined( GFL2_STRBUF_H_INCLUDED )
#define GFL2_STRBUF_H_INCLUDED
#pragma once

#include <types/include/gfl2_Typedef.h>
#include <macro/include/gfl2_Macros.h>
#include <heap/include/gfl2_Heap.h>
#include <str/include/gfl2_StrSys.h>

GFL_NAMESPACE_BEGIN(gfl2)
GFL_NAMESPACE_BEGIN(str)

//--------------------------------------------------------------
/**
 *  Friend Classes
 */
//--------------------------------------------------------------
class StrBufReader;
class MsgData;


//==============================================================================================
/**
 *  文字列バッファクラス
 */
//==============================================================================================
class StrBuf
{
  // コピーコンストラクタ＆代入演算子の禁止
  GFL_FORBID_COPY_AND_ASSIGN( StrBuf );

  // private メソッドにアクセスを許可するクラス群
  friend class StrBufReader;
  friend class MsgData;

  enum {
    MAX_LENGTH = 2048           ///< 想定される最大長
  };

public:

  //---  コンストラクタ／デストラクタ -----------
  // リテラル文字列を渡して構築
  StrBuf( const STRCODE* string, gfl2::heap::HeapBase* pHeap );

  // StrBuf を渡して構築（Copy）
  StrBuf( const StrBuf& src, gfl2::heap::HeapBase* pHeap );

  // 格納できる文字数（終端文字含む）を指定して初期化
  StrBuf( u32 numCharMax, gfl2::heap::HeapBase* pHeap );

  virtual ~StrBuf();

  //----------------------------------------------------------------------
  /**
   * @brief   文字列ポインタを取得
   *
   * @retval  const STRCODE*  格納されている文字列へのポインタ
   */
  //----------------------------------------------------------------------
  const STRCODE* GetPtr( void ) const;

  //----------------------------------------------------------------------
  /**
   * @brief   格納されている文字数（終端文字を含まない）を取得
   *
   * @retval  u32   文字列の長さ
   */
  //----------------------------------------------------------------------
  u32 GetLength( void ) const;

  //----------------------------------------------------------------------
  /**
   * @brief   格納可能な文字数（終端文字を含む）を取得
   *
   * @retval  u32   格納可能な文字数
   */
  //----------------------------------------------------------------------
  u32 GetSize( void ) const;

  //----------------------------------------------------------------------
  /**
   * @brief   文字列を外部バッファに出力
   *
   * @param[out]  array        出力先配列
   * @param[in]   numAryElems  array の要素数
   *
   * @retval      u32    コピーした文字数（終端文字を含まない）
   */
  //----------------------------------------------------------------------
  u32 PutStr( STRCODE* array, u32 numAryElems ) const;

  //----------------------------------------------------------------------
  /**
   * @brief   文字列をセットする（クラス使用）
   *
   * @param[in]   src      セットする文字列（クラス）
   *
   * @retval      u32      セットした文字数（終端文字を含まない）
   */
  //----------------------------------------------------------------------
  u32 SetStr( const StrBuf& src );

  //----------------------------------------------------------------------
  /**
   * @brief   文字列をセットする（ null文字終端 配列使用）
   *
   * @param[in]   src      セットする文字列（配列）
   *
   * @retval      u32      セットした文字数（終端文字を含まない）
   */
  //----------------------------------------------------------------------
  u32 SetStr( const STRCODE* src );

  //----------------------------------------------------------------------
  /**
   * @brief  内容を空文字列（先頭がEOM）に設定する
   */
  //----------------------------------------------------------------------
  void Clear( void );

  //----------------------------------------------------------------------
  /**
   * @brief   文字列の比較
   *
   * @param[in]   buf      比較文字列
   *
   * @retval      bool     比較文字列と内容が一致していれば true
   */
  //----------------------------------------------------------------------
  bool Compare( const StrBuf& buf ) const;

  //----------------------------------------------------------------------
  /**
   * 【使用は許可制です：文字列の結合はローカライズを考慮したシステムを介してのみ行うようにしてください】
   *
   * @brief       終端に文字列追加
   *
   * @param[in]   buf   追加する文字列
   *
   * @retval      u32   連結後の文字数（終端文字を含まない）
   */
  //----------------------------------------------------------------------
  u32 AddStr( const StrBuf& buf );

  //----------------------------------------------------------------------
  /**
   * 【使用は許可制です：文字列の結合はローカライズを考慮したシステムを介してのみ行うようにしてください】
   *
   * @brief   終端に１文字追加
   *
   * @param[in]   code    追加する文字コード
   * @retval      true    正常追加できた場合
   * @retval      false   不正中断した場合
   */
  //----------------------------------------------------------------------
  bool AddCode( STRCODE code );


private:
  //==========================================================================================
  // Friend にのみアクセス許可する関数群
  //==========================================================================================

  //----------------------------------------------------------------------
  /**
   * @brief   指定位置の文字コードを取得
   *
   * @param[in]   index     取得する文字列内位置（0 origin）
   *
   * @retval      STRCODE   文字コード
   */
  //----------------------------------------------------------------------
  STRCODE getCode( u32 index ) const;

  //----------------------------------------------------------------------
  /**
   * @brief   指定位置の文字コードを置換
   *
   * @param[in]   index     置換する文字列内位置（0 origin）
   * @param[in]   code      置換後文字コード
   *
   * @retval      STRCODE   置換前の文字コード
   */
  //----------------------------------------------------------------------
  STRCODE replaceCode( u32 index, STRCODE code );

  //----------------------------------------------------------------------
  /**
   * @brief   指定位置から文字列を上書きコピーする
   *
   * @param[in]   index     上書き開始する文字列内位置（0 origin）
   * @param[in]   src       上書きする文字列
   */
   //----------------------------------------------------------------------
  void replaceStr( u32 index, const STRCODE* src );


  //----------------------------------------------------------------------
  /**
   *  @brief  AddCodeで文字列を挿入された後、内部の文字列長を計測しなおす
   */
  //----------------------------------------------------------------------
  void AddCodeFinish( void );


  //==========================================================================================
  // メンバ変数（Friendもアクセスしないように）
  //==========================================================================================
  STRCODE* m_buffer;
  u16 m_numBufferElems;
  u16 m_strLength;
  bool m_bAvailable;

};


GFL_NAMESPACE_END(str)
GFL_NAMESPACE_END(gfl2)

#endif // GFL2_STRBUF_H_INCLUDED
