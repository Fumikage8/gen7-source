//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		EffectSystem.h
 *	@brief  エフェクトシステム
 *	@author	tomoya takahashi
 *	@date		2015.03.02
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#if !defined( __GFL2_EFFECT_SYSTEM_H__ )
#define __GFL2_EFFECT_SYSTEM_H__
#pragma once

#include <math/include/gfl2_math.h>
#include <heap/include/gfl2_heap.h>

#include <effect/include/gfl2_EffectConfig.h>
#include <effect/include/gfl2_EffectEmitterSet.h>
#include <effect/include/gfl2_EffectHandle.h>
#include <effect/include/gfl2_EffectHeap.h>
#include <effect/include/gfl2_EffectResource.h>

GFL_NAMESPACE_BEGIN( gfl2 )
GFL_NAMESPACE_BEGIN( Effect )

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------

/**
 *  @brief エフェクトシステム
 */
class System
{
  GFL_FORBID_COPY_AND_ASSIGN(System); //コピーコンストラクタ＋代入禁止

public:
  /**
   * @brief コンストラクタ
   *  [CTR]
   *    SystemのコンストラクタでCommandListにVRAM転送コマンドが詰まれます。
   *    Config.SetCommandList(NULL) => カレントのコマンドリストにつみます。
   *    Config.SetCommandList(Ptr） => 指定されたコマンドリストにコマンドをつみます。
   *    
   *    NULLの場合は、コマンドジャンプ等への対応もライブラリ内で行ないます。
   */
  System( const Config& config );

  /**
   * @brief デストラクタ
   */
  virtual ~System();


  //===========================================================
  /**
   *    リソース管理
   */
  //===========================================================
  //---------------------------------------------------------------------------
  //! @brief        リソースを登録する。登録後もリソースはメモリ上に保持して下さい。
  //!               [Win32/CTR]
  //!
  //! @param[in]    heap     [CTR/Win32]メモリ確保先のヒープ。
  //! @param[in]    resource [CTR/Win32]メモリ上のエフェクトバイナリ。128Byteアラインに配置する必要があります。
  //! @param[in]    resId    [CTR/Win32]登録するリソースID。指定できるIDの上限数はConfigで指定します。
  //! @param[in]    envInfo  [CTR]環境設定情報。
  //!
  //! @return       なし。
  //---------------------------------------------------------------------------
  void EntryResource( Heap* heap, void* resource, s32 resId, EnvInfo* envInfo = NULL );


  //---------------------------------------------------------------------------
  //! @brief        指定IDのリソースをエフェクトシステムから破棄します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    heap     NULLの場合は、EntryResourceで渡されたHeapからメモリ解放処理を行います。
  //! @param[in]    resId    破棄するリソースID。
  //!
  //! @return       なし。
  //---------------------------------------------------------------------------
  void ClearResource( Heap* heap, s32 resId );


  //---------------------------------------------------------------------------
  //! @brief        指定IDのリソースを取得します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    resId    リソースID。
  //!
  //! @return       エフェクトリソース。
  //---------------------------------------------------------------------------
  Resource *GetResource( u32 resId );

  //===========================================================
  /**
   *    エミッター生成、取得、破棄
   */
  //===========================================================
  //---------------------------------------------------------------------------
  //! @brief        指定IDのエミッタセットを放出します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    handle           エフェクトハンドル。
  //! @param[in]    pos              エミッタを配置する座標。
  //! @param[in]    emitterSetID     エミッタセットID。
  //! @param[in]    resourceID       リソースID。
  //! @param[in]    groupID          グループID(0〜63,63はゲーム内ビューアと共用)。
  //! @param[in]    emitterMask      エミッタを出すかどうかのビットフラグ。
  //!
  //! @return       １つでもエミッタが生成出来れば true, できなれば false。
  //---------------------------------------------------------------------------
  bool CreateEmitterSetID( Handle *handle, const math::Vector3& pos, s32 emitterSetID,
                              s32 resourceID = 0, u8 groupID = 0, u32 emitterMask = 0xffffffff );


  //---------------------------------------------------------------------------
  //! @brief        指定IDのエミッタセットを放出します。引数のmtxにスケールが入っていた場合、表示が壊れます。
  //!               [Win32/CTR]
  //!
  //! @param[in]    handle           エフェクトハンドル。
  //! @param[in]    mtx              ワールド行列。
  //! @param[in]    emitterSetID     エミッタセットID。
  //! @param[in]    resourceID       リソースID。
  //! @param[in]    groupID          グループID(0〜63,63はゲーム内ビューアと共用)。
  //! @param[in]    emitterMask      エミッタを出すかどうかのビットフラグ。
  //!
  //! @return       １つでもエミッタが生成出来れば true, できなれば false。
  //---------------------------------------------------------------------------
  bool CreateEmitterSetID( Handle *handle , const math::Matrix34 &mtx , s32 emitterSetID ,
                              s32 resourceID = 0 , u8 groupID = 0 , u32 emitterMask = 0xffffffff );


  //---------------------------------------------------------------------------
  //! @brief        再生中の全てのエミッタを削除します。
  //!               [Win32/CTR]
  //---------------------------------------------------------------------------
  void KillAllEmitter();

  //---------------------------------------------------------------------------
  //! @brief        指定グループに所属するエミッタを削除します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    groupID   グループID。
  //---------------------------------------------------------------------------
  void KillEmitterGroup( u8 groupID );

  //---------------------------------------------------------------------------
  //! @brief        引数のエミッタセットを削除します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    emitterSet   エミッタセットインスタンス。
  //---------------------------------------------------------------------------
  void KillEmitterSet( EmitterSet *emitterSet );


  //---------------------------------------------------------------------------
  //! @brief        引数名のエミッタセットを削除します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    emitterSetName   エミッタセット名。
  //! @param[in]    resId            リソースID。
  //---------------------------------------------------------------------------
  void KillEmitterSet( const char* emitterSetName, s32 resId );

  //---------------------------------------------------------------------------
  //! @brief        引数のエミッタを削除します。
  //!               [Win32/CTR]
  //!
  //! @param[in]    emitter   エミッタインスタンス。
  //---------------------------------------------------------------------------
  void KillEmitter( EmitterInstance *emitter );

  //===========================================================
  /**
   *    パーティクル単位での破棄
   */
  //===========================================================

  //---------------------------------------------------------------------------
  //! @brief        指定エミッタ所属の指定パーティクルを削除します。
  //!               [Win32/CTR]
  //!
  //!               引数に渡す ptcl がチャイルドの場合、動作が不定になりますので注意してください。
  //!
  //! @param[in]    emitter   削除するパーティクルが所属するエミッタ。
  //! @param[in]    ptcl      削除するパーティクル。
  //---------------------------------------------------------------------------
  void KillParticle( EmitterInstance *emitter, PtclInstance* ptcl );

  //---------------------------------------------------------------------------
  //! @brief        指定エミッタ所属の指定チャイルドパーティクルを削除します。
  //!               [Win32/CTR]
  //!
  //!               引数に渡す ptcl が親パーティクルの場合、動作が不定になりますので注意してください。
  //!
  //! @param[in]    emitter   削除するパーティクルが所属するエミッタ。
  //! @param[in]    ptcl      削除するチャイルドパーティクル。
  //---------------------------------------------------------------------------
  void KillChildParticle( EmitterInstance *emitter, PtclInstance* ptcl );



  //===========================================================
  /**
   *    計算
   */
  //===========================================================
  //---------------------------------------------------------------------------
  //! @brief        フレーム開始処理を行います。
  //!               [Win32/CTR]
  //!
  //!               エフェクトのフレーム処理開始時に一度だけ呼び出してください。
  //!               Win32では内部で、SwapDoubleBufferも実行します。
  //---------------------------------------------------------------------------
  void BeginFrame(void);

  //---------------------------------------------------------------------------
  //! @brief        エミッタ/パーティクルの計算処理を行います。
  //!
  //!               [Win32/CTR]
  //!               シングルコアで動作させる場合は、本メソッドのみをコールします。
  //!               BeginFrame -> Calc( 本メソッド )の順で呼び出します。
  //!               CTRはframeRateの保存のみを行ない、実際の更新はRenderParticleになります。
  //!
  //! @param[in]    groupID           計算処理を行うグループIDのビットを立てた64ビットフラグ。
  //! @param[in]    frameRate         フレームレート(標準で1.0f)。フレームレートに0.0fは指定できません。
  //! @param[in]    cacheFlush        計算処理で生成したメモリ空間のCPU/GPUキャッシュフラッシュ(GXコマンドを積む)を行います。
  //! @param[in]    forwardFrame      フレームを進めるかどうか。
  //---------------------------------------------------------------------------
  void Calc( u8 groupID, f32 frameRate = 1.0f, bool cacheFlush = true, bool forwardFrame = true );


#if 0
  //---------------------------------------------------------------------------
  //! @brief        エミッタセット単位で計算処理を行います。
  //!               [Win32]
  //!
  //! @param[in]    emitterSet        計算処理を行うグループIDのビットを立てた64ビットフラグ。
  //! @param[in]    frameRate         フレームレート(標準で1.0f)。フレームレートに0.0fは指定できません。
  //! @param[in]    forwardFrame      フレームを進めるかどうか。
  //---------------------------------------------------------------------------
  void CalcEmitterSet( EmitterSet* emitterSet, f32 frameRate, bool forwardFrame );
#endif

  //---------------------------------------------------------------------------
  //! @brief        エミッタ計算処理を行います。
  //!               [Win32]
  //!
  //                このメソッドをコールしないことでグループ単位で再生の一時停止を行えます。
  //!
  //! @param[in]    groupID               エミッタ計算処理を行うグループID。
  //! @param[in]    frameRate             フレームレート(標準で1.0f)。フレームレートに0.0fは指定できません。
  //---------------------------------------------------------------------------
  void CalcEmitter( u8 groupID, f32 frameRate = 1.0f );


  //===========================================================
  /**
   *    描画
   */
  //===========================================================
  //---------------------------------------------------------------------------
  //! @brief        描画開始処理を行います。
  //!               [Win32/CTR]
  //!
  //!               引数で指定するビューに関するユニフォームブロックを描画コマンドに積みます。
  //!
  //! @param[in]    ctr_command   [CTR]コマンドリスト格納先 [Win32]NULL
  //! @param[in]    proj          [CTR/Win32]プロジェクションマトリクス。
  //! @param[in]    view          [CTR/Win32]ビューマトリクス。
  //! @param[in]    camPos        [CTR/Win32]カメラ位置。
  //! @param[in]    near          [Win32]プロジェクション Near値。
  //! @param[in]    far           [Win32]プロジェクション Far値。
  //! @retval       [CTR]格納したコマンドポインタ [Win32] NULL
  //---------------------------------------------------------------------------
  u32* BeginRender( u32* ctr_command, const math::Matrix44& proj, const math::Matrix34& view, const math::Vector3& camPos, f32 nearClip, f32 farClip );

  //---------------------------------------------------------------------------
  //! @brief        描画処理を行います。
  //!               [Win32/CTR]
  //!
  //! @param[in]    ctr_command   [CTR]コマンドリスト格納先 [Win32]NULL
  //! @param[in]    groupID       [CTR/Win32]描画を行うグループID。
  //! @param[in]    skipBehavior  [CTR]更新処理をスキップするときtrue
  //! @retval       [CTR]格納したコマンドポインタ [Win32] NULL
  //---------------------------------------------------------------------------
  u32* RenderParticle( u32* ctr_command, u8 groupID, bool skipBehavior/*, f32 frameRate = 1.0f*/ );

  //---------------------------------------------------------------------------
  //! @brief        描画終了処理を行います。
  //!               [Win32]
  //---------------------------------------------------------------------------
  void EndRender();



  //===========================================================
  /**
   *    情報の取得
   */
  //===========================================================
  /**
   *  @brief  NWObject取得
   *  
   *  詳細な操作を行なう際には、こちらを使用。
   */
  inline nw::eft::System * GetNwObject(void){ return m_pSystem; }
  inline const nw::eft::System* GetConstNwObject(void) const { return m_pSystem; }

private:

  enum
  {
    GROUPID_MAX = 64,
  };

private:


  nw::eft::System*  m_pSystem;    //! NWのエフェクトシステム
  Heap*             m_pHeap;
  void*             m_pHeapMem;
  f32               m_FrameRate[GROUPID_MAX];  //! [CTR] MakeDrawCommand実行に使用するフレームレート

};

GFL_NAMESPACE_END( Effect )
GFL_NAMESPACE_END( gfl2 )


#endif	// __GFL2_EFFECT_SYSTEM_H__

