#ifndef __GFL_MATHTRIANGULAR_H__
#define __GFL_MATHTRIANGULAR_H__
//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		gfl_MathTriangular.h
 *	@brief  三角関数　演算
 *	@author	tomoya takahashi
 *	@date		2010.10.13
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once


#include <nw/math.h>

#include <macro/include/gfl2_Macros.h>
#include <math/include/gfl2_MathType.h>

GFL_NAMESPACE_BEGIN(gfl2)
GFL_NAMESPACE_BEGIN(math)
  
#if defined(GF_PLATFORM_CTR)
//CTRはCTR_SDKに存在する
#define GFL2_MATH_NAME_SPACE nn::math::
#elif defined(GF_PLATFORM_WIN32)
//Winはcafeに存在する
#define GFL2_MATH_NAME_SPACE nw::math::
#endif  //プラットフォーム分岐

//-----------------------------------------------------------------------------
/**
 *    
 */
//-----------------------------------------------------------------------------
#define GFL_MATH_DEG_TO_RAD(deg) (NW_MATH_DEG_TO_RAD(deg))
#define GFL_MATH_RAD_TO_DEG(rad) (NW_MATH_RAD_TO_DEG(rad))
//-----------------------------------------------------------------------------
/**
 *　　     　　　　＊＊＊＊＊＊＊＊＊　注意　＊＊＊＊＊＊＊＊＊
 *        
 *  SinCosTan系の関数はテーブル参照で高速だが精度の低い計算を行っています。
 *  そのため精度が必要な箇所ではこれらの関数は使わないでください。
 *  また、CTRの場合はCTR_SDKライブラリ、Winの場合はCafeのライブラリを使います。
 *  SinConはテーブル自体は一緒ですが、Indexの計算精度が若干違うので気をつけてください。
 *  Tanはテーブルの精度自体が違う(CTRは32、Winは128)ので注意してください。
 */
//-----------------------------------------------------------------------------
/*!--------------------------------------------------------------------------*
  @brief        正弦の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 SinRad( f32 rad) { return GFL2_MATH_NAME_SPACE SinRad( rad); }

/*!--------------------------------------------------------------------------*
  @brief        余弦の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 CosRad( f32 rad) { return GFL2_MATH_NAME_SPACE CosRad( rad); }

/*!--------------------------------------------------------------------------*
  @brief        正弦と余弦の値を求めます。

  @param[out]   s    正弦の値を格納するバッファへのポインタ
  @param[out]   c    余弦の値を格納するバッファへのポインタ
  @param[in]    rad  ラジアン単位の角度

  @return       なし
 *---------------------------------------------------------------------------*/
inline void SinCosRad( f32* s, f32* c, f32 rad) { GFL2_MATH_NAME_SPACE SinCosRad( s,c,rad); }

/*!--------------------------------------------------------------------------*
  @brief        正接の値を求めます。

  @param[in]    rad  ラジアン単位の角度

  @return       rad に対する正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 TanRad( f32 rad) { return GFL2_MATH_NAME_SPACE TanRad( rad); }


/*!--------------------------------------------------------------------------*
  @brief        正弦の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する正弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 SinDeg( f32 deg) { return GFL2_MATH_NAME_SPACE SinDeg( deg); }

/*!--------------------------------------------------------------------------*
  @brief        余弦の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する余弦の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 CosDeg( f32 deg) { return GFL2_MATH_NAME_SPACE CosDeg( deg); }

/*!--------------------------------------------------------------------------*
  @brief        正弦と余弦の値を求めます。

  @param[out]   s    正弦の値を格納するバッファへのポインタ
  @param[out]   c    余弦の値を格納するバッファへのポインタ
  @param[in]    deg  1 円周を 360.0 とする角度

  @return       なし
 *---------------------------------------------------------------------------*/
inline void SinCosDeg( f32* s, f32* c, f32 deg) { GFL2_MATH_NAME_SPACE SinCosDeg( s,c,deg); }

/*!--------------------------------------------------------------------------*
  @brief        正接の値を求めます。

  @param[in]    deg  1 円周を 360.0 とする角度

  @return       deg に対する正接の値を返します。
 *---------------------------------------------------------------------------*/
inline f32 TanDeg( f32 deg) { return GFL2_MATH_NAME_SPACE TanDeg( deg); }

/*!--------------------------------------------------------------------------*
  @brief        逆正弦の値を求めます。

  @param[in]    x  逆正弦を求める値

  @return       x に対する逆正弦の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AsinRad( f32 x) { return GFL2_MATH_NAME_SPACE AsinRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆余弦の値を求めます。

  @param[in]    x  逆余弦を求める値

  @return       x に対する逆余弦の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AcosRad( f32 x) { return GFL2_MATH_NAME_SPACE AcosRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    x  逆正接を求める値

  @return       x に対する逆正接の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AtanRad( f32 x) { return GFL2_MATH_NAME_SPACE AtanRad( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    y  正接の値の分子
  @param[in]    x  正接の値の分母

  @return       y/x の逆正接の値をラジアン単位で返します
 *---------------------------------------------------------------------------*/
inline f32 Atan2Rad( f32 y, f32 x) { return GFL2_MATH_NAME_SPACE Atan2Rad( y,x); }






/*!--------------------------------------------------------------------------*
  @brief        逆正弦の値を求めます。

  @param[in]    x  逆正弦を求める値

  @return       x に対する逆正弦の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AsinDeg( f32 x) { return GFL2_MATH_NAME_SPACE AsinDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆余弦の値を求めます。

  @param[in]    x  逆余弦を求める値

  @return       x に対する逆余弦の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AcosDeg( f32 x) { return GFL2_MATH_NAME_SPACE AcosDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    x  逆正接を求める値

  @return       x に対する逆正接の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 AtanDeg( f32 x) { return GFL2_MATH_NAME_SPACE AtanDeg( x); }

/*!--------------------------------------------------------------------------*
  @brief        逆正接の値を求めます。

  @param[in]    y  正接の値の分子
  @param[in]    x  正接の値の分母

  @return       y/x の逆正接の値を 360.0 を 1 円周とする単位で返します
 *---------------------------------------------------------------------------*/
inline f32 Atan2Deg( f32 y, f32 x) { return GFL2_MATH_NAME_SPACE Atan2Deg( y,x); }

GFL_NAMESPACE_END(math)
GFL_NAMESPACE_END(gfl2)




#endif // __GFL_MATHTRIANGULAR_H__
