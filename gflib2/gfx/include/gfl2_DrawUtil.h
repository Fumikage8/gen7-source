#if !defined(GFLIB2_GRX_DRAWUTIL_H_INCLUDED)
#define GFLIB2_GRX_DRAWUTIL_H_INCLUDED
#pragma once

#include <math/include/gfl2_Vector4.h>
#include <math/include/gfl2_Matrix.h>
#include <math/include/gfl2_Matrix34.h>
#include <math/include/gfl2_Matrix44.h>
#include <math/include/gfl2_MathAABB.h>
#include <gfx/include/gfl2_GFGL.h>
#include <gfx/include/gfl2_GLMemory.h>
#include <gfx/include/gfl2_ImageData.h>
#include <gfx/include/gfl2_Texture.h>

namespace gfl2 { namespace gfx {
//=============================================================================
/*
 * @class DrawUtil
 * @brief 簡易描画関数群をまとめたクラス
*/
//=============================================================================
class DrawUtil : GLMemory
{
public:
  class VertexFormat
  {
  public:
		math::Vector4				pos;
		math::Vector4				uv;
		math::Vector4				color;
		VertexFormat()
		{
			pos = math::Vector4::GetZero();
			uv = math::Vector4::GetZero();
			color = math::Vector4::GetZero();
		}
		VertexFormat( math::Vector4 pos_, math::Vector4 uv_, math::Vector4 color_ )
		{
			pos = pos_;
			uv = uv_;
			color = color_;
		}
	};

  //=============================================================================
  /*
   * @func Initialize
   * @brief 簡易描画使用前の初期化処理
   * @brief pAllocator 使用するアロケータ
   * @brief primitiveNum 
   */
  //=============================================================================
  static void Initialize(IGLAllocator* pAllocator, u32 screenWidth, u32 screenHeight, u32 primitiveNum, s32 drawCommandNum = -1);

  //=============================================================================
  /*
   * @func Terminate
   * @brief 簡易描画使用前の終了処理
   */
  //=============================================================================
  static void Terminate(void);

  //=============================================================================
  /*
   * @func BeginRender
   * @brief 簡易描画開始前の処理. BeginRender()〜EndRender()で簡易描画処理を挟む
   */
  //=============================================================================
  static void BeginRender(void);

  //=============================================================================
  /*
   * @func EndRender
   * @brief 簡易描画開始後の処理. BeginRender()〜EndRender()で簡易描画処理を挟む
   */
  //=============================================================================
  static void EndRender(void);

  //=============================================================================
  /*
   * @func Initialize
   * @brief 簡易描画使用前の初期化処理(拡張領域確保)
   * @brief pAllocator 使用するアロケータ
   * @brief primitiveNum 
   */
  //=============================================================================
  static void InitializeExtension(IGLAllocator* pAllocator, u32 primitiveNum, s32 drawCommandNum = -1);

  //=============================================================================
  /*
   * @func Terminate
   * @brief 簡易描画使用前の終了処理(拡張領域解放)
   */
  //=============================================================================
  static void TerminateExtension(void);

  //=============================================================================
  /*
   * @func BeginRenderExtension
   * @brief 簡易描画開始前の処理. BeginRenderExtension()〜EndRenderExtension()で簡易描画処理を挟む
   */
  //=============================================================================
  static void BeginRenderExtension(void);

  //=============================================================================
  /*
   * @func EndRenderExtension
   * @brief 簡易描画開始後の処理. BeginRenderExtension()〜EndRenderExtension()で簡易描画処理を挟む
   */
  //=============================================================================
  static void EndRenderExtension(void);

	//=============================================================================
	/*
	 * @func SetCullMode
	 * @brief カリング設定
	 */
	//=============================================================================
	static void SetCullMode(const CullMode cullMode);
	
	//=============================================================================
	/*
	 * @func SetFillMode
	 * @brief ワイヤーフレーム/通常描画切り替え設定
	 */
	//=============================================================================
	static void SetFillMode(const FillMode fillMode);

	//=============================================================================
	/*
	 * @func SetMaterialColor
	 * @brief マテリアルカラー設定
	 */
	//=============================================================================
	static void SetMaterialColor(const math::Vector4& color);

	//=============================================================================
	/*
	 * @func SetMaterialAlpha
	 * @brief マテリアルカラーのアルファ値設定
	 */
	//=============================================================================
	static void SetMaterialAlpha(const f32 alpha);

	//=============================================================================
	/*
	 * @func SetProjectionMatrix
	 * @brief プロジェクション行列の設定
	 */
	//=============================================================================
	static void SetProjectionMatrix(const math::Matrix44& mat);

	//=============================================================================
	/*
	 * @func SetViewMatrix
	 * @brief ビュー行列の設定
	 */
	//=============================================================================
	static void SetViewMatrix(const math::Matrix34& mat);

	//=============================================================================
	/*
	 * @func SetModelMatrix
	 * @brief モデル行列(ワールド行列)の設定
	 */
	//=============================================================================
    static void SetModelMatrix(const math::Matrix44& mat);

  //=============================================================================
  /*
   * @func SetTexture
   * @brief テクスチャの設定
   */
  //=============================================================================
  static void SetTexture(const gfl2::gfx::Texture* texture);

  //=============================================================================
  /*
   * @func GetTexture
   * @brief テクスチャの取得
   */
  //=============================================================================
  static const gfl2::gfx::Texture* GetTexture();

  //=============================================================================
  /*
   * @func DrawTriangles
   * @brief 頂点データを三角形リストとして描画
   */
  //=============================================================================
  static void DrawTriangles(const VertexFormat* pVertexArray, u32 vertexNum, b32 enableTexture);

  //=============================================================================
  /*
   * @func DrawLines
   * @brief 頂点データをラインリストとして描画
   */
  //=============================================================================
  static void DrawLines(const VertexFormat* pVertexArray, u32 vertexNum, b32 enableTexture);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief 矩形描画
	 */
	//=============================================================================
	static void DrawRect(f32 x, f32 y, f32 w, f32 h, f32 u0 = 0.0f, f32 v0 = 0.0f, f32 u1 = 1.0f, f32 v1 = 1.0f);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief 矩形描画
	 */
	//=============================================================================
	static void DrawRect(f32 x, f32 y, f32 w, f32 h, const math::Vector4& color, f32 u0 = 0.0f, f32 v0 = 0.0f, f32 u1 = 1.0f, f32 v1 = 1.0f);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief 矩形塗りつぶし
	 */
	//=============================================================================
	static void FillRect(f32 x, f32 y, f32 w, f32 h, const math::Vector4& color);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief スクリーン全体に矩形描画
	 */
	//=============================================================================
	static void DrawScreen(f32 u0 = 0.0f, f32 v0 = 0.0f, f32 u1 = 1.0f, f32 v1 = 1.0f);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief スクリーン全体に矩形描画
	 */
	//=============================================================================
	static void DrawScreen(const math::Vector4& color, f32 u0 = 0.0f, f32 v0 = 0.0f, f32 u1 = 1.0f, f32 v1 = 1.0f);

	//=============================================================================
	/*
	 * @func DrawRect
	 * @brief スクリーン全体に矩形塗りつぶし
	 */
	//=============================================================================
	static void FillScreen(const math::Vector4& color);

	//=============================================================================
	/*
	 * @func DrawAABB
	 * @brief AABB(軸平行境界ボックス)描画
	 */
	//=============================================================================
	static void DrawAABB(const math::Vector4& min, const math::Vector4& max, const math::Vector4& color);
	
	//=============================================================================
	/*
	 * @func DrawAABB
	 * @brief AABB(軸平行境界ボックス)描画
	 */
	//=============================================================================
	static void DrawAABB(const math::AABB& aabb, const math::Vector4& color);
	
	//=============================================================================
	/*
	 * @func DrawAABB
	 * @brief AABB(軸平行境界ボックス)描画
	 */
	//=============================================================================
	static void DrawAABB(const math::Vector4& min, const math::Vector4& max);
	
	//=============================================================================
	/*
	 * @func DrawAABB
	 * @brief AABB(軸平行境界ボックス)描画
	 */
	//=============================================================================
	static void DrawAABB(const math::AABB& aabb);

  //=============================================================================
	/*
	 * @func DrawCylinder
	 * @brief 円描画
	 */
	//=============================================================================
  static void DrawCircle(const math::Vector4& position, float radius, const math::Vector4& color);

  //=============================================================================
  /*
   * @func DrawTube
   * @brief 筒描画
   */
  //=============================================================================
  static void DrawTube(const math::Vector4& position, float radius, float height, const math::Vector4& color);

  //=============================================================================
	/*
	 * @func DrawCylinder
	 * @brief 円柱描画
	 */
	//=============================================================================
  static void DrawCylinder(const math::Vector4& position, float radius, float height, const math::Vector4& color);

	//=============================================================================
	/*
	 * @func DrawSphere
	 * @brief 球体描画
	 */
	//=============================================================================
	//static void DrawSphere(const math::Vector4& center, f32 radius, const math::Vector4& color);

	//=============================================================================
	/*
	 * @func ClearScissor
	 * @brief シザリング設定解除
	 */
	//=============================================================================
	static void ClearScissor(void);

	//=============================================================================
	/*
	 * @func SetScissor
	 * @brief シザリング設定
	 */
	//=============================================================================
	static void SetScissor(u32 x, u32 y, u32 width, u32 height);

  //=============================================================================
  /*
   * @func SetBlendTestEnable
   * @brief ブレンドテスト有効/無効設定
   */
  //=============================================================================
  static void SetBlendTestEnable(b32 enable);

  //=============================================================================
  /*
   * @func SetBlendTestState
   * @brief ブレンドテスト設定
   */
  //=============================================================================
  static void SetBlendTestState(
    b32 blendEnable,
    BlendOp blendOp,
    BlendFunc srcColorFunc,
    BlendFunc destColorFunc,
    BlendFunc srcAlphaFunc,
    BlendFunc destAlphaFunc,
    BlendStateObject::COLOR_WRITE_ENABLE colorWriteEnable = BlendStateObject::COLOR_WRITE_ENABLE_ALL);

  //=============================================================================
  /*
   * @func SetDepthTestState
   * @brief 深度テスト設定
   */
  //=============================================================================
  static void SetDepthTestState(const gfl2::gfx::DepthStencilStateObject::StateData& stateData);

  //=============================================================================
  /*
   * @func SetDepthTestEnable
   * @brief 深度テスト有効/無効設定
   */
  //=============================================================================
  static void SetDepthTestEnable(b32 enable);

  //=============================================================================
  /*
   * @func SetScreenSize
   * @brief スクリーンの横幅/縦幅の設定
   */
  //=============================================================================
  static void SetScreenSize(u32 width, u32 height);

  //=============================================================================
  /*
   * @func GetScreenWidth
   * @brief スクリーンの横幅の取得
   */
  //=============================================================================
  static u32 GetScreenWidth();

  //=============================================================================
  /*
   * @func GetScreenHeight
   * @brief スクリーンの横幅の取得
   */
  //=============================================================================
  static u32 GetScreenHeight();

  //=============================================================================
  /*
   * @func GetPrimitiveMax
   * @brief 通常バッファの描画可能プリミティブ数の取得
   */
  //=============================================================================
  static u32 GetPrimitiveMax();

  //=============================================================================
  /*
   * @func GetPrimitiveMaxExtension
   * @brief 拡張バッファの描画可能プリミティブ数の取得
   */
  //=============================================================================
  static u32 GetPrimitiveMaxExtension();

  //=============================================================================
  /*
   * @func GetDrawCommandMax
   * @brief 通常バッファの描画可能コマンド数の取得
   */
  //=============================================================================
  static u32 GetDrawCommandMax();

  //=============================================================================
  /*
   * @func GetDrawCommandMaxExtension
   * @brief 拡張バッファの描画可能コマンド数の取得
   */
  //=============================================================================
  static u32 GetDrawCommandMaxExtension();

  //=============================================================================
  /*
   * @func SwapBuffers
   * @brief バッファの切り替え
   */
  //=============================================================================
  static void SwapBuffers();

private:
	class Impl;
	static Impl* s_pImpl;

	// 標準のコンストラクタ, デストラクタ, コピーコンストラクタ, 代入禁止
	//=============================================================================
	/*
	 * @func コンストラクタ
	 * @brief シングルトンなので呼び出し禁止
	 */
	//=============================================================================
  DrawUtil(){}

	//=============================================================================
	/*
	 * @func デストラクタ
	 * @brief シングルトンなので呼び出し禁止
	 */
	//=============================================================================
  virtual ~DrawUtil(){}

	//=============================================================================
	/*
	 * @func コピーコンストラクタ
	 * @brief シングルトンなので呼び出し禁止
	 */
	//=============================================================================
	DrawUtil(const DrawUtil&){}

	//=============================================================================
	/*
	 * @func 代入演算子
	 * @brief シングルトンなので呼び出し禁止
	 */
	//=============================================================================
	void operator =(const DrawUtil&){}
};
}}

#endif//GFLIB2_GRX_DRAWUTIL_H_INCLUDED
