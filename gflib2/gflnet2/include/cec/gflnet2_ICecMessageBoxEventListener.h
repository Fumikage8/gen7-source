// ============================================================================
/*
 * @file gflnet2_ICecMessageBoxEventListener.h
 * @brief メッセージボックスの読み込みイベントのリスナークラスです。
 * @date 2015.02.10
 */
// ============================================================================
#if !defined( GFLNET2_ICECMESSAGEBOXEVENTLISTENER_H_INCLUDE )
#define GFLNET2_ICECMESSAGEBOXEVENTLISTENER_H_INCLUDE
#pragma once

#include <macro/include/gfl2_Macros.h>
#include <types/include/gfl2_Typedef.h>
#include <gflnet2/include/cec/gflnet2_CecPacketInfo.h>
#include <gflnet2/include/cec/gflnet2_CecTypes.h>

GFL_NAMESPACE_BEGIN(gflnet2)
GFL_NAMESPACE_BEGIN(cec)

class ICecMessageBoxEventListener
{
public:
  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスが作成されているか調べ終わった後にコールされるイベントハンドラです。
   * @param  bIsCreate [ true : 作成されている, false : 作成されていない ]
   */
  // --------------------------------------------------------------------------
  virtual void OnIsCreateMessageBox( const bool bIsCreate ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの作成に成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnCreateMessageBoxSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの作成に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnCreateMessageBoxFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの削除に成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteMessageBoxSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの削除に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteMessageBoxFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送受信ボックス内にあるデータの削除に成功した時にコールされるイベントハンドラです。
   * @param  eMessageBoxType メッセージボックスタイプです
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteAllMessageSuccess( const gflnet2::cec::MessageBoxType eMessageBoxType ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送受信ボックス内にあるデータの削除に失敗した時にコールされるイベントハンドラです。
   * @param  eMessageBoxType メッセージボックスタイプです
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteAllMessageFailure( const gflnet2::cec::MessageBoxType eMessageBoxType ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送信データの書き込みに成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnWriteMessageSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送信データの書き込みに失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnWriteMessageFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信データの読み込みに成功した時にコールされるイベントハンドラです。
   * @param  pCecRecvPackets 読み込んだ受信データ
   * @param  recvPacketCount 読み込んだ受信データの数
   */
  // --------------------------------------------------------------------------
  virtual void OnReadMessageSuccess( const gflnet2::cec::CecRecvPacket* pCecRecvPackets, const u32 recvPacketCount ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信データの読み込みに失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnReadMessageFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信ボックス内にある受信データ数の取得に成功した時にコールされるイベントハンドラです。
   * @param  messageCount 受信ボックス内にある受信データ数
   */
  // --------------------------------------------------------------------------
  virtual void OnGetMessageCountSuccess( const s32 messageCount ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信ボックス内にある受信データ数の取得に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnGetMessageCountFailure(){}

};


GFL_NAMESPACE_END(cec)
GFL_NAMESPACE_END(gflnet2)

#endif // GFLNET2_ICECMESSAGEBOXEVENTLISTENER_H_INCLUDE
