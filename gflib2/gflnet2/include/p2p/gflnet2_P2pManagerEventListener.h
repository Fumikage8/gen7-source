//==============================================================================
/**
 * @file	gflnet2_P2pManagerEventListener.h
 * @brief	P2pManagerクラスのイベントリスナー
 * @author	ichiraku_katsuhiko
 * @date	2015/03/31 18:34:11
 */
// =============================================================================
#ifndef __GFLNET_P2PMANAGER_EVENT_LISTENER_H__
#define __GFLNET_P2PMANAGER_EVENT_LISTENER_H__
#pragma once

#ifdef  GF_PLATFORM_CTR
#include <nn.h>
#include <nex.h>
#endif // GF_PLATFORM_CTR

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
namespace gflnet2{
namespace p2p{


//------------------------------------------------------------------
/**
 * @brief   P2P通知イベントハンドラ
 * @return  P2pManagerの通知を受け取る場合は、本クラスを継承し仮想関数を実装して下さい。
 */
//------------------------------------------------------------------
class P2pManagerEventListener
{
public:

  //------------------------------------------------------------------
  /**
   * @brief   P2P接続成功通知
   */
  //------------------------------------------------------------------
  virtual void OnP2pManagerConnectSuccess() = 0;

  //------------------------------------------------------------------
  /**
   * @brief   P2P切断成功通知
   */
  //------------------------------------------------------------------
  virtual void OnP2pManagerDisconnectSuccess() = 0;

  //------------------------------------------------------------------
  /**
  * @brief P2pManager通信のエラー通知
  */
  //------------------------------------------------------------------
  virtual void OnP2pManagerError() = 0;

#ifdef  GF_PLATFORM_CTR
  //------------------------------------------------------------------
  /**
  * @brief P2pManager通信のエラー通知
  *
  * @param[in] result     実行結果
  * @param[in] errorCode  エラーアプレット用エラーコード
  */
  //------------------------------------------------------------------
  virtual void OnP2pManagerError( const nn::nex::qResult& result, u32 errorCode ) = 0;
#endif // GF_PLATFORM_CTR

  //------------------------------------------------------------------
  /**
   * @brief P2P切断通知
   */
  //------------------------------------------------------------------
  virtual void OnP2pManagerSessionLeft() = 0;

  //------------------------------------------------------------------
  /**
   * @brief マッチメイクエラー通知（独自ハンドリング版）
   * 
   * @note  エラーアプレットは表示しない。
   */
  //------------------------------------------------------------------
  virtual void OnP2pManagerMatchMakeFailed() = 0;

  //------------------------------------------------------------------
  /**
  * @brief 内部で確保されたヒープメモリが枯渇したことを通知
  */
  //------------------------------------------------------------------
  virtual void OnP2pManagerErrorOutOfMemory() = 0;

  //------------------------------------------------------------------
  /**
   * @brief マイグレーション成功
   */
  //------------------------------------------------------------------
  virtual void OnP2pManagerMigrationSuccess() = 0;

#ifdef  GF_PLATFORM_CTR
  //------------------------------------------------------------------
  /**
  * @brief マッチメイクセッションの作成完了通知
  *
  * @param[in] gatheringId 作成されたセッションのギャザリングID
  */
  //------------------------------------------------------------------
  virtual void OnMatchmakingCreateSuccess( const nn::nex::GatheringID& gatheringId ){}
#endif // GF_PLATFORM_CTR

};

} // namespace p2p
} // namespace gflnet2

#endif // __GFLNET_P2PMANAGER_EVENT_LISTENER_H__
