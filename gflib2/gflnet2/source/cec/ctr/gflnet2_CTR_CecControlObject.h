// ============================================================================
/*
 * @file gflnet2_CTR_CecControlObject.h
 * @brief すれ違い通信の制御オブジェクトです
 * @date 2015.02.16
 */
// ============================================================================
#ifdef  GF_PLATFORM_CTR
#if !defined( GFLNET2_CTR_CECCONTROLOBJECT_H_INCLUDE )
#define GFLNET2_CTR_CECCONTROLOBJECT_H_INCLUDE
#pragma once

#include <macro/include/gfl2_Macros.h>
#include <gflnet2/include/cec/gflnet2_CecMessageBoxCreateParam.h>
#include <gflnet2/include/cec/gflnet2_CecPacketInfo.h>
#include <gflnet2/include/cec/gflnet2_CecResultCode.h>
#include <gflnet2/include/cec/gflnet2_CecTypes.h>
#include <gflnet2/source/cec/gflnet2_CecCommandID.h>
#include <gflnet2/source/cec/ctr/gflnet2_CTR_CecMessageBoxEventListener.h>

GFL_NAMESPACE_BEGIN(gflnet2)
GFL_NAMESPACE_BEGIN(cec)
class ICecMessageBoxEventListener;
GFL_NAMESPACE_BEGIN(ctr)


class CTR_CecControlObject : public CTR_CecMessageBoxEventListener
{
  GFL_FORBID_COPY_AND_ASSIGN( CTR_CecControlObject );

public:
  CTR_CecControlObject();
  virtual~CTR_CecControlObject();

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスが作成されている時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnIsCreateMessageBoxSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスが作成されていない時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnIsCreateMessageBoxFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの作成に成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnCreateMessageBoxSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの作成に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnCreateMessageBoxFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの削除に成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteMessageBoxSuccess(){}
  // --------------------------------------------------------------------------
  /**
   * @brief  3DS本体にメッセージボックスの削除に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteMessageBoxFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送受信ボックス内にあるデータの削除に成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteAllMessageSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送受信ボックス内にあるデータの削除に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnDeleteAllMessageFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送信データの書き込みに成功した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnWriteMessageSuccess(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  送信データの書き込みに失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnWriteMessageFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信データの読み込みに成功した時にコールされるイベントハンドラです。
   * @param  cecMessage 読み込んだ受信データ
   */
  // --------------------------------------------------------------------------
  virtual void OnReadMessageSuccess( nn::cec::Message& cecMessage ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信データの読み込みに失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnReadMessageFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信ボックス内にある受信データ数の取得に成功した時にコールされるイベントハンドラです。
   * @param  messageCount 受信ボックス内にある受信データ数
   */
  // --------------------------------------------------------------------------
  virtual void OnGetMessageCountSuccess( const s32 messageCount ){}

  // --------------------------------------------------------------------------
  /**
   * @brief  受信ボックス内にある受信データ数の取得に失敗した時にコールされるイベントハンドラです。
   */
  // --------------------------------------------------------------------------
  virtual void OnGetMessageCountFailure(){}

  // --------------------------------------------------------------------------
  /**
   * @brief  実行コマンドのIDを取得します。
   * @return 実行コマンドのID
   */
  // --------------------------------------------------------------------------
  CommandID GetCommandID() const;

  // --------------------------------------------------------------------------
  /**
   * @brief  メッセージボックスのタイプを取得します。
   * @return メッセージボックスのタイプ
   */
  // --------------------------------------------------------------------------
  MessageBoxType GetMessageBoxType() const;

  // --------------------------------------------------------------------------
  /**
   * @brief  コマンドを実行する為のパラメータを設定します。
   * @param  eCommandID コマンドID
   * @param  eMessageBoxType メッセージボックスのタイプ
   */
  // --------------------------------------------------------------------------
  void SetCecCommandExecuteParameters( CommandID eCommandID, MessageBoxType eMessageBoxType );

  // --------------------------------------------------------------------------
  /**
   * @brief  メッセージボックスを作成する為のパラメータを取得します。
   *         派生先のクラスで必要に応じて実装してください。
   * @return メッセージボックスを作成する為のパラメータ
   */
  // --------------------------------------------------------------------------
  virtual const CecMessageBoxCreateCoreParam* GetCecMessageBoxCreateCoreParam() const;

  // --------------------------------------------------------------------------
  /**
   * @brief  送信ボックスに設定する送信データを取得します。
   *         派生先のクラスで必要に応じて実装してください。
   * @return 送信ボックスに設定する送信データ
   */
  // --------------------------------------------------------------------------
  virtual const CecSendPacket* GetCecSendPacket() const;

  // --------------------------------------------------------------------------
  /**
   * @brief  非同期で実行されたコマンドが終了した時にコールされるイベントハンドラです。
   * @param  eResultCode 実行結果です
   *         この実行結果を参照してアプリ側へ成功、失敗の通知を行います。
   */
  // --------------------------------------------------------------------------
  virtual void OnCommandResult( ResultCode eResultCode ) = 0;

private:
  CommandID                     m_eCommandID;
  MessageBoxType                m_eMessageBoxType;

};


GFL_NAMESPACE_END(ctr)
GFL_NAMESPACE_END(cec)
GFL_NAMESPACE_END(gflnet2)

#endif // GFLNET2_CTR_CECCONTROLOBJECT_H_INCLUDE
#endif
