#define				vec2				float2
#define				vec3				float3
#define				vec4				float4
#define				mat4x4			float4x4
#define				mat3x3			float3x3
#define				inverse			transpose



/*■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■
■				頂点シェーダー
■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■*/
// -------------------------------------------------------------
// 定数
// -------------------------------------------------------------

#define		UvMax					(3)
#define		TextureMax		(4)

#define		UvMap					(0)
#define		CubeMap				(1)
#define		SphereMap			(2)
#define		ProjMax				(3)

#define		rimPow			cVsRimParam.x
#define		rimScale		cVsRimParam.y
#define		phongPow		cVsRimParam.z
#define		phongScale	cVsRimParam.w

cbuffer VertexShaderVectorConstants : register( b0 )
{
	mat4x4	cVsModelMatrix;
	mat4x4	cVsViewMatrix;
	mat4x4	cVsModelViewMatrix;
	mat4x4	cVsProjectionMatrix;

	mat4x4	cVsNoramlRotate;
	vec4		cVsWorldLightVec;
	vec4		cVsWorldLightColor;
	vec4		cVsAmbientLightColor;
	//vec4		cVsMaterialColor;
	//vec4		cVsVertexFhongEnable;
	vec4		cVsCameraPosition;
	vec4		cVsObjSpaceCameraPosition;
	vec4		cVsRimParam;
	vec4		cVsShaderParam;
	vec4		cVsBlendMeshWeight;
}

cbuffer VertexShaderJotinConstants : register( b1 )
{
	mat4x4	cVsJointMatrix[255];
	bool		cVsSkiningEnable = false;
	bool		cVsPadding[3];
}

cbuffer VertexShaderFloatConstants : register( b2 )
{
	float		cVsSceneContrast = 1.0;
	float		cVsZoneContrast = 1.0;
}

cbuffer VertexShaderBoolConstants : register( b3 )
{
	bool		cVsHalfVecLightEnable = true;
	bool		cVsVertexColorEnable = false;
	bool		cVsSceneContrastEnable = false;
	bool		cVsLightingEnable;
	bool		cIsPokemonShader;
	bool		cIsMegaGangarShader;
	bool		cUseObjectSpaceNormalMap;
	bool		cRotateSphereMapEnable = false;
}

cbuffer VertexShaderIntArrayConstants : register( b4 )
{
	int			cMappingType[TextureMax];
	int     cUvSetNo[TextureMax];
}

//-----------------------------------------------------------------------------
/// @brief	
//-----------------------------------------------------------------------------
vec3 GetReflectVec( vec3 Pos, vec3 Normal )
{
	vec3				EyeVec;
	vec3				ReflectVec;
	
	EyeVec = normalize( cVsCameraPosition.xyz - Pos.xyz );
	ReflectVec = -EyeVec + 2.0f * dot( EyeVec, Normal ) * Normal;//反射ベクトルの計算

	return ReflectVec;
}

// ------------------------------------------------------------
// バインドポーズへの変換マトリックス取得（スキニングの逆行列）
// ------------------------------------------------------------
mat3x3 GetBindPoseMatrix( const in vec4 objNormal, const in vec4 objTangent, const in vec4 objOrigNormal, const in vec4 objOrigTangent )
{
	vec4		objBiNormal = vec4(0, 0, 0, 0);
	vec4		objOrigBiNormal = vec4(0, 0, 0, 0);
	mat3x3	tangentSpaceMatrix;
	mat3x3	tangentSpaceInvMatrix;
	mat3x3	origTangentSpaceMatrix;
	mat3x3	origTangentSpaceInvMatrix;
	mat3x3	toOrigTangentSpaceMatrix;
	
	objBiNormal.xyz = cross( objNormal.xyz, objTangent.xyz ).xyz;
	objOrigBiNormal.xyz = cross( objOrigNormal.xyz, objOrigTangent.xyz );

	tangentSpaceMatrix[0] = objTangent.xyz;
	tangentSpaceMatrix[1] = objBiNormal.xyz;
	tangentSpaceMatrix[2] = objNormal.xyz;

	origTangentSpaceMatrix[0] = objOrigTangent.xyz;
	origTangentSpaceMatrix[1] = objOrigBiNormal.xyz;
	origTangentSpaceMatrix[2] = objOrigNormal.xyz;

	tangentSpaceInvMatrix = inverse( tangentSpaceMatrix );
	origTangentSpaceInvMatrix = inverse( origTangentSpaceMatrix );

	tangentSpaceMatrix = mul( origTangentSpaceInvMatrix, tangentSpaceMatrix );
	toOrigTangentSpaceMatrix = inverse( tangentSpaceMatrix );

	return toOrigTangentSpaceMatrix;
}

struct VsInput
{
	vec4 Position0		: POSITION0;
	vec4 Normal				: NORMAL0;
	vec4 Tangent0			: TANGENT0;
	vec4 Uv0					: TEXCOORD0;
	vec4 Uv1					: TEXCOORD1;
	vec4 Uv2					: TEXCOORD2;	
	vec4 Color				: COLOR0;
	vec4 JointIndex		: BLENDINDICES0;
	vec4 JointWeight	: BLENDWEIGHT0;
	
	vec4 Tangent1			: TANGENT1;
	vec4 Tangent2			: TANGENT2;
	vec4 OrigNormal		: NORMAL1;
	vec4 OrigTangent	: TANGENT3;
	vec4 Position1		: POSITION1;
	vec4 Position2		: POSITION2;
	vec4 Position3		: POSITION3;
};

struct PsInput
{
	vec4 Position											: SV_POSITION;
	vec4 Uv[TextureMax]								: TEXCOORD0;
	vec4 Color												: COLOR0;
	vec3 Normal												: NORMAL0;
	vec3 ObjNormal										: NORMAL1;
	vec3 ObjLight											: NORAML2;
	vec3 ObjTangentVec								: TANGENT0;
	vec4 View													: NORMAL3;
	vec4 Velocity0										: COLOR1;
	vec4 Velocity1										: COLOR2;
	vec4 Velocity2										: COLOR3;
	vec4 DebugVec											: NORMAL4;
};

VsInput VsJointAnimation( VsInput In )
{
	float4x4		mat;
	
	mat = cVsJointMatrix[In.JointIndex.x] * In.JointWeight.x;

	if ( In.JointIndex.y != -1.0f )
	{
		mat += cVsJointMatrix[In.JointIndex.y] * In.JointWeight.y;

		if ( In.JointIndex.z != -1.0f )
		{
			mat += cVsJointMatrix[In.JointIndex.z] * In.JointWeight.z;

			if ( In.JointIndex.w != -1.0f )
				mat += cVsJointMatrix[In.JointIndex.w] * In.JointWeight.w;
		}
	}
	
	In.Position0 = mul( In.Position0, mat );
	In.Position0.w = 1.0f;

	float3x3		mat33 = mat;
	In.Normal.xyz = mul( In.Normal.xyz, mat33 );
	In.Normal.w = 1.0f;
	
	return In;
}

// ------------------------------------------------------------
// 頂点シェーダプログラム
// ------------------------------------------------------------
PsInput VsMain( VsInput input )
{
	PsInput			outPut = (PsInput)0;
	VsInput			origInput = input;

	outPut.DebugVec = vec4( 1.0f, 0.0f, 0.0f, 1.0f );

	vec4		pos = vec4(0, 0, 0, 1);
	vec4		world_pos = vec4(0, 0, 0, 1);
	vec4		view = vec4(0, 0, 1, 1);
	vec4		objNormal = vec4(0, 0, 0, 0);
	vec4		objTangent[TextureMax];
	vec4		worldViewNormal = vec4(0, 0, 0, 0);
	vec4		objLight = vec4(0, 0, 0, 0);
	vec4		objView = vec4(0, 0, 0, 0);
	vec4		worldViewLight = vec4(0, 0, 0, 0);
	vec4		halfVec = vec4(0, 0, 0, 0);
	vec4		reflectVec = vec4(0, 0, 0, 0);
	vec4		lightVec = cVsWorldLightVec;
	vec4		objSpaceLightVec;
	vec4		objColor = vec4(1, 1, 1, 1);
	mat4x4	modelInvMatrix = inverse( cVsModelMatrix );
	mat4x4	modelViewInvMatrix = inverse( cVsModelViewMatrix );
	
	if ( cVsSkiningEnable )
	{
		input = VsJointAnimation( input );
	}

	if ( cVsVertexColorEnable )
	{
		objColor = input.Color;
	}

	{
		vec4		velocity3;

		world_pos = mul( input.Position0, cVsModelMatrix );
		outPut.Velocity0 = world_pos;

		outPut.Velocity1 = mul( input.Position1, cVsModelMatrix );
		outPut.Velocity2 = mul( input.Position2, cVsModelMatrix );
		velocity3 = mul( input.Position3, cVsModelMatrix );

		outPut.Velocity0.w = velocity3.x;
		outPut.Velocity1.w = velocity3.y;
		outPut.Velocity2.w = velocity3.z;
	}

	//-----------------

	view = world_pos;
	view = mul( view, cVsViewMatrix );

	//view = mul( world_pos, cVsModelViewMatrix );
	objView = normalize(world_pos);
	pos = mul( view, cVsProjectionMatrix );
	outPut.Position = pos;
	view = vec4(0, 0, -1, 0);

	objNormal.xyz = normalize(input.Normal.xyz).xyz;
	objNormal.w = 0.0;
	outPut.Normal.xyz = objNormal.xyz;
	objNormal = mul( objNormal, cVsModelMatrix );
	objNormal.w = 0.0;

	{
		objTangent[0].xyz = normalize(input.Tangent0.xyz).xyz;
		objTangent[1].xyz = normalize(input.Tangent1.xyz).xyz;
		objTangent[2].xyz = normalize(input.Tangent2.xyz).xyz;

		for( int i = 0; i < UvMax; i++ )
		{
			objTangent[i].w = 0.0;
			objTangent[i] = mul( objTangent[i], cVsModelMatrix );
		}
	}

	objLight = lightVec;
	objLight.w = 0.0;//平行移動をしない
	objLight = normalize( mul( objLight, modelInvMatrix) );

	worldViewNormal = normalize( mul(objNormal, cVsViewMatrix));
	worldViewLight = normalize( mul(objLight, cVsViewMatrix) );	

	view = normalize( view );

	halfVec = -view - worldViewLight;
	halfVec.xyz = normalize( halfVec.xyz );

	{//outColor出力
		outPut.Color = objColor;
	}

	{//outObjNormal出力
		outPut.ObjNormal.xyz = objNormal.xyz;
	}

	{//outObjTangentVec出力
		outPut.ObjTangentVec.xyz = objTangent[0].xyz;
	}

	{//outObjLight出力
		outPut.ObjLight = objLight.xyz;
	}

	{//outView出力
		outPut.View.xyz = cVsObjSpaceCameraPosition.xyz - input.Position0.xyz;
		outPut.View.xyz = normalize( outPut.View.xyz );
		outPut.View.w = 0.0;
	}

	//outPut.DebugVec.xyz = objSpaceLightVec.xyz;
	//outPut.DebugVec += 1.0f;
	//outPut.DebugVec *= 0.5f;

	outPut.DebugVec.xyz = worldViewNormal.xyz;
	outPut.DebugVec.w = worldViewNormal.w;
	outPut.DebugVec += 1.0;
	outPut.DebugVec *= 0.5;

	return outPut;
}

