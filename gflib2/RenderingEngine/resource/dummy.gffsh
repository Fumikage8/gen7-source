#ifndef HLSL
#version 430
#extension GL_NV_shadow_samplers_cube : enable 
#endif

// -------------------------------------------------------------
// íËêî
// -------------------------------------------------------------

#define		UvMax					(3)
#define		TextureMax		(4)
#define		LutMax				(6)

#define		UvMap					(0)
#define		CubeMap				(1)
#define		SphereMap			(2)
#define		ProjMax				(3)

#define		rimPow			cVsRimParam.x
#define		rimScale		cVsRimParam.y
#define		phongPow			cVsRimParam.z
#define		phongScale		cVsRimParam.w

#define		bPad					bool
#define		iPad					int
#define		fPad					float

#if defined HLSL

	#define				STATIC				 static
	
	#define ConstantBuffer( NAME, REGNAME, NO )		cbuffer NAME : register( REGNAME )

	#define				vec2					float2
	#define				vec3					float3
	#define				vec4					float4
	#define				mat4x4				float4x4
	#define				mat3x3				float3x3
	#define				inverse				transpose
	#define				Math::Vector	vec4
	
	struct PsInput
	{
		vec4 Position											: SV_POSITION;
		vec4 Uv[TextureMax]								: TEXCOORD0;
		vec4 Color												: COLOR0;
		vec3 Normal												: NORMAL0;
		vec3 ObjNormal										: NORMAL1;
		vec3 ObjLight											: NORAML2;
		vec3 ObjTangentVec								: TANGENT0;
		vec4 View													: NORMAL3;
		vec4 Velocity0										: COLOR1;
		vec4 Velocity1										: COLOR2;
		vec4 Velocity2										: COLOR3;
		vec4 DebugVec											: POSITION0;
	};
	
	#define				texture2D			tex2D
	#define				textureCube		texCUBE

#else

	#define				STATIC				 
	
	#define ConstantBuffer( NAME, REGNAME, NO )		layout(std140,column_major,binding=NO) uniform NAME

	#define				float2				vec2
	#define				float3				vec3
	#define				float4				vec4
	#define				float4x4			mat4x4
	#define				float3x3			mat3x3
	#define				transpose			inverse
	#define				Math::Vector	vec4

	in vec4 outPos;
	in vec4 outUv[TextureMax];
	in vec4 outColor;
	in vec3 outNormal;
	in vec3 outObjNormal;
	in vec3 outObjLight;
	in vec3 outObjTangentVec;
	in vec4 outView;
	in vec4 outVelocity0;
	in vec4 outVelocity1;
	in vec4 outVelocity2;
	in vec4 outDebugVec;

	struct PsInput
	{
		vec4 Position;
		vec4 Uv[TextureMax];
		vec4 Color;
		vec3 Normal;
		vec3 ObjNormal;
		vec3 ObjLight;
		vec3 ObjTangentVec;
		vec4 View;
		vec4 Velocity0;
		vec4 Velocity1;
		vec4 Velocity2;
		vec4 DebugVec;
	};
	
	#define				tex2D						texture2D
	#define				texCUBE					textureCube

	#define		lerp			mix

#endif

STATIC vec4                 gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);

//-----------------------------------------------------------------------------
/// @brief	ÉÅÉCÉìä÷êî
//-----------------------------------------------------------------------------
#if defined HLSL
float4 PsMain( PsInput input ) : SV_Target
{
#else
void main (void)
{
#endif
	gl_FragColor = vec4(0.0, 0.6, 0.0, 1.0);

#if defined HLSL
	return gl_FragColor;
#endif
}



