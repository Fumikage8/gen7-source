//==============================================================================
/**
 * @file	BattleInstDefine.h
 * @brief	バトル施設の定義類
 * @author	onoue_masayuki
 * @date	2016/01/27
 */
// =============================================================================

#ifndef __BATTLEFESDEFINE_H__
#define __BATTLEFESDEFINE_H__
#pragma once

#include <types/include/gfl2_Typedef.h>
#include "niji_reference_files/script/FieldPawnTypes.h"
#include <math/include/gfl2_Quaternion.h>
#include "Savedata/include/MyStatus.h"

//-----------------------------------------------------------------------------

namespace BattleFes{
  // バトルツリーポケモン生成に必要なパラメータ
  typedef struct
  {
    u16 pokeID;   // ポケモンＩＤ（dataID）
    u8 Sex;       // 性別
    u8 Tokusei;   // 特性
  }BATTLE_TREE_DATA;

  /**
  * @brief 動作モデルデータ
  */
  struct MoveModelData
  {
    bool isUsing;
    Field::BATTLE_FES_POS_INDEX index;
    gfl2::math::Vector3 pos;
    gfl2::math::Quaternion rot;
    int charaID;
    bool isDressup;
    Savedata::MyStatus* pMyStatus;
  };

/**
 *  @brief  定義クラス
 */
class BattleFesDefine
{
public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   *  @brief ポケモン必要数かつ最大数
   */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 POKEMON_MAX = 3;      

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief ポケモン初期レベル
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 POKEMON_INIT_LEVEL = 50;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief ポケモン性別数
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 POKEMON_SEX_END = pml::SEX_NUM;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief ポケモン特性数
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 POKEMON_TOKUSEI_END = 3;

  /* ----------------------------------------------------------------------------------------- */
  /**
   *  @brief パワー乱数（個体値３１） 
   */
  /* ----------------------------------------------------------------------------------------- */
  static const u8  POWER = 0x1f;                                    

  /* ----------------------------------------------------------------------------------------- */
  /**
   *  @brief 仲間数
   */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 PARTNER_TRAINER_MAX = 2;

  /* ----------------------------------------------------------------------------------------- */
  /**
   *  @brief 最大連戦回数
   */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 FIGHT_TRAINER_MAX = 3;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルセットカウントの区切り値（１０連勝毎にセットカウントアップ）
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 BATTLE_SET_COUNT_PAUSE = 10;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief 最大リセット回数
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 RESET_COUNT_MAX = 999;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief モデルのeventIDオフセット値
  *  @note   フィールドの動作モデルにはeventIDがあり、それはユニークである必要がある。
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 MODEL_EVENT_ID_OFFSET = Field::BATTLE_FES_EVENT_ID_OFFSET;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief 動的に出現するモデルの最大数
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 BFES_MODEL_DISP_MAX = 3;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルツリーＩＤの最大値
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 BATTLE_TREE_ID_MAX = 996;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルフェスランクの最大数
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 BFES_RANK_MAX = 50;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief パートナーデータの寿命（hour）
  *  @note  未満有効
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 PARTNER_LIFETIME_HOUR  = 72;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルフェスフィールド効果発生ランク
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u8 BATTLE_FES_FIELD_LIMIT_RANK = 10;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルフェス マーマネID
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 TR_ID_MAMANE = 207;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルフェス サカキID
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 TR_ID_SAKAKI = 208;

  /* ----------------------------------------------------------------------------------------- */
  /**
  *  @brief バトルフェス したっぱID
  */
  /* ----------------------------------------------------------------------------------------- */
  static const u32 TR_ID_SITAPPA = 209;
};

  // トレーナーデータ作成に必要なパラメータ
  typedef struct
  {
    BATTLE_TREE_DATA battleTreeData[BattleFesDefine::POKEMON_MAX];  // 手持ちポケモンの生成に必要なデータ
    u16 trID;                                                       // トレーナーＩＤ（dataID）
    u16 padding;
    u32 pokeMakeSeed;
  }TRAINER_DATA;

} // namespace BattleFes

#endif // __BATTLEFESDEFINE_H__
