#pragma once
//=================================================================================================
/**
 *  @file   BaseShape.h
 *  @brief  コリジョン向け基本形状
 *  @author yy-ikeuchi@gamefreak.co.jp
 *  @date   2015.02.17
 */
//=================================================================================================
#include <math/include/gfl2_Vector3.h>

namespace gfl2 { namespace collision {
    class CollisionModel;
} }

//----------------------------------------------------------------------------------------
//! @brief コリジョン向け基本形状
//----------------------------------------------------------------------------------------
class BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  BaseShape(){}

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~BaseShape(){}

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void){}
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向けシリンダー形状
//----------------------------------------------------------------------------------------
class CylinderShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  CylinderShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~CylinderShape(){}

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos;        //< 座標
  f32                 m_r;          //< 半径
  f32                 m_height;     //< 高さ
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向け球形状
//----------------------------------------------------------------------------------------
class SphereShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  SphereShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~SphereShape(){}

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos;      //< 座標
  f32                 m_r;        //< 半径
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向け箱形状(X軸/Z軸回転は未対応です)
//----------------------------------------------------------------------------------------
class BoxShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  BoxShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~BoxShape(){}

   //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos;        //< 座標
  gfl2::math::Vector3 m_u0;         //< 長方形のローカルなX軸を表す単位ベクトル
  gfl2::math::Vector3 m_u1;         //< 長方形のローカルなY軸を表す単位ベクトル
  f32                 m_e0;         //< X軸にそった長方形の長さの半分
  f32                 m_e1;         //< Y軸にそった長方形の長さの半分
  f32                 m_height;     //< 高さ
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向け箱形状(X軸/Y軸/Z軸回転に対応です)
//----------------------------------------------------------------------------------------
class ObbShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  ObbShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~ObbShape(){}

   //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos;        //< 座標
  gfl2::math::Vector3 m_u0;         //< 長方形のローカルなX軸を表す単位ベクトル
  gfl2::math::Vector3 m_u1;         //< 長方形のローカルなY軸を表す単位ベクトル
  gfl2::math::Vector3 m_u2;         //< 長方形のローカルなZ軸を表す単位ベクトル
  f32                 m_e0;         //< X軸にそった長方形の長さの半分
  f32                 m_e1;         //< Y軸にそった長方形の長さの半分
  f32                 m_e2;         //< Z軸にそった長方形の長さの半分
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向け線形状
//----------------------------------------------------------------------------------------
class LineShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  LineShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~LineShape(){}

   //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos0;       //< ラインの先端座標
  gfl2::math::Vector3 m_pos1;       //< ラインの終端座標
  f32                 m_height;     //< 高さ
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向けメッシュ形状
//----------------------------------------------------------------------------------------
class MeshShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  MeshShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~MeshShape(){}

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3              m_pos;
  gfl2::collision::CollisionModel *m_pCollisionModel;
};

//----------------------------------------------------------------------------------------
//! @brief コリジョン向けトライングル形状
//----------------------------------------------------------------------------------------
class TriangleShape : public BaseShape
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  TriangleShape();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~TriangleShape(){}

   //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  gfl2::math::Vector3 m_pos0;
  gfl2::math::Vector3 m_pos1;
  gfl2::math::Vector3 m_pos2;
};
