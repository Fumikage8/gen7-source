//======================================================================
/**
 * @file  PokemonValidation.cpp
 *
 * @author  suzuki_hisanao
 */
//======================================================================
#if defined(GF_PLATFORM_CTR)
#include <NetStatic/NetLib/include/Validation/PokemonValidation.h>
#include <Savedata/include/ValidationSave.h>
#include <GameSys/include/GameManager.h>
#include <GameSys/include/GameData.h>

#include <gflnet2/include/nex/gflnet2_NexTemplate.h>
#include <gflnet2/include/nex/gflnet2_NexError.h>
#include <System/include/SystemEventManager.h>
#include <gflnet2/include/nex/gflnet2_NexManager.h>
#include  <debug/include/gfl2_DebugLogWindow.h>
//#include <arc/arc_def.h>
//#include <arc/cert.gaix>

#if PM_DEBUG
//#include <debug/DebugLogWindow.h>
#endif

namespace NetLib{
namespace Validation{


// 不正チェックのURL momiji更新済み
const nn::nex::qChar8* PokemonValidation::VALIDATOR_URL        = "https://api.ekj.ctr.app.nintendo.net/validator2/v1/validate?c=1";
const nn::nex::qChar8* PokemonValidation::PUBLIC_KEY_URL       = "https://api.ekj.ctr.app.nintendo.net/validator2/v1/public_key?c=1";
const nn::nex::qChar8* PokemonValidation::DEBUG_VALIDATOR_URL  = "https://api.ekj.ctr.app.nintendo.net/validator2/v1/validate?c=1";
const nn::nex::qChar8* PokemonValidation::DEBUG_PUBLIC_KEY_URL = "https://api.ekj.ctr.app.nintendo.net/validator2/v1/public_key?c=1";

// デバッグ用パラメータ
#if PM_DEBUG
bool PokemonValidation::m_debugMaintenance    = false; //!< メンテナンスデバッグ
bool PokemonValidation::m_debugFaileFlag      = false; //!< 通信失敗デバッグ
bool PokemonValidation::m_debugInvalidPokemon = false; //!< 不正ポケモンデバッグ
bool PokemonValidation::m_debugInvalidCert    = false; //!< 不正署名デバッグ
#endif


//---------------------------------------------------------------------------
/**
* @brief コンストラクタ
*/
//---------------------------------------------------------------------------
PokemonValidation::PokemonValidation( void ) : m_isInit(false), m_execMode(E_EXEC_NONE), m_caBuffer(NULL),
                                               m_postBuffer(NULL), m_caSize(0), m_sendPokemonNum(0),
                                               m_listener(NULL), m_heap(NULL), m_httpCon(NULL)
{
  GFL_SINGLETON_INSTANCE(System::SystemEventManager)->RegistSystemEventListener(this);
}

//---------------------------------------------------------------------------
/**
* @brief デストラクタ
*/
//---------------------------------------------------------------------------
PokemonValidation::~PokemonValidation()
{
  GFL_SINGLETON_INSTANCE(System::SystemEventManager)->RemoveSystemEventListener(this);
  Finalize();
}


//---------------------------------------------------------------------------
/**
 * @brief 初期化処理（ブロック関数）
 *
 * @attention 事前にhttp, fs, friend, nexを初期化すること
 * @attention またNEXへの接続を事前に確立させること
 *
 * @param[in] heap      内部バッファ確保用に使用されるヒープ
 * @param[in] devHeap   証明書読み込みに使用されるデバイスヒープ
 * @param[in] authToken 認証トークン
 * @param[in] gameMode  ゲームモード
 *
 * @retval true  初期化成功
 * @retval false 初期化失敗
 */
//---------------------------------------------------------------------------
bool PokemonValidation::Initialize( gfl2::heap::HeapBase *heap, gfl2::heap::HeapBase* devHeap, const char* authToken, GameMode gameMode )
{
  if( !m_isInit )
  {
#ifdef VALIDATION_USE_DEBUG_CER
    m_caBuffer = (u8*)GflHeapAllocMemoryAlign( heap, CA_BUFFER_SIZE, 4 );
    if( m_caBuffer == NULL )
    {
      Finalize();
      return false;
    }

    // HTTPS通信用証明書をロード
    if( !LoadCertifyFile( devHeap ) )
    {
      GFL_PRINT( "Load Cert File is Failed!\n" );
      return false;
    }
#endif

    // HttpClientの初期化
    m_httpCon = GFL_NEW(heap) NetLib::HTTP::NexHttpClient();
    if( m_httpCon == NULL )
    {
      Finalize();
      return false;
    }

    m_httpCon->Initialize();
    m_httpCon->RegistNexHttpClientListener(this);

    // 送信データの初期化
    m_pokeData.Initialize();
    m_pokeData.gameMode = gameMode;
    ::std::strncpy( m_pokeData.authToken, authToken, nn::nex::IndependentServer::AUTH_TOKEN_SIZE );    // 認証トークンを設定
    GFL_RELEASE_PRINT("ValidationMode:%x\n", gameMode );

    // RsaContextの初期化
    m_rsaContext.Initialize();
    SetupRsaContext();

    m_isInit       = true;
  }

  return true;
}


//---------------------------------------------------------------------------
/**
* @brief 終了処理
 *
 * @caution 必ず事前にIsConnecting()がfalseであることを確認してください
*/
//---------------------------------------------------------------------------
void PokemonValidation::Finalize()
{
  if( m_isInit )
  {
    if( m_httpCon != NULL )
    {
      m_httpCon->UnregistNexHttpClientListener(this);
      m_httpCon->Finalize();
    }
    m_rsaContext.Finalize();
    m_isInit = false;
  }

  GflHeapSafeFreeMemory( m_httpCon  );
  GflHeapSafeFreeMemory( m_caBuffer );
  GflHeapSafeFreeMemory( m_postBuffer );

  RemovePokemonValidationListener();
}


//---------------------------------------------------------------------------
/**
 * @brief RsaContextをSavedata::ValidationSaveを使用してセットアップする
 */
//---------------------------------------------------------------------------
void PokemonValidation::SetupRsaContext( void )
{
  const Savedata::ValidationSave* valid = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetGameData()->GetValidationSave();

  m_rsaContext.SetKey( valid->GetPublicKey(), valid->GetPublicKeySize() );
}


//---------------------------------------------------------------------------
/**
 * @brief 不正チェックサーバの証明書を使用して、ポケモンデータが改竄されていないかチェック
 *
 * @attention 本関数実行前にSetPokemon()にて検査対象となるポケモンデータをセットしておくこと
 *
 * @param[in] pokemonNum   登録されているポケモン数
 * @param[in] certData     証明書データ
 * @param[in] certDataSize 証明書データサイズ
 *
 * @retval true  改竄が行われていない
 * @retval false 改竄が行われている
 */
//---------------------------------------------------------------------------
bool PokemonValidation::CheckRsaValidation( u32 pokemonNum, const u8* certData, const u32 certDataSize )
{
  nn::Result result;
  u32        pokemonSize = GetPokemonDataSize() * pokemonNum;

  ICHI_PRINT("CheckRsaValidation num[%d] certData[%d][%d][%d] size[%d] \n", pokemonNum, certData[0], certData[1], certData[2], certDataSize );

#if PM_DEBUG
  if( m_debugInvalidCert )
  {//強制署名エラー
    m_pokeData.data.m_pokemon[0].data[0] = ~m_pokeData.data.m_pokemon[0].data[0];
  }
#endif

  if( static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_M ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK_M
  )
  {
    result = m_rsaContext.Verify(m_pokeData.data.m_gtsUpload, pokemonSize, certData, certDataSize );
  }
  else{
    result = m_rsaContext.Verify(m_pokeData.data.m_pokemon, pokemonSize, certData, certDataSize );
  }

  return result.IsSuccess();
}


//---------------------------------------------------------------------------
/**
* @brief 不正チェック処理で判定するデータをセットする
*
* @param[in] slotNo      格納用スロット番号(0～9)
* @param[in] indexInfo   インデックス情報へのポインタ(サイズは160byte固定)
* @param[in] pokemonBody ポケモン情報へのポインタ(サイズは232byte固定)
*
* @return データセットが正常に行えたならtrueを返却
*/
//---------------------------------------------------------------------------
bool PokemonValidation::SetPokemon( u32 slotNo, NetApp::GTS::GtsIndexData* indexInfo, NetApp::GTS::GtsSerializePokemonParam* pokemonBody )
{
  if( slotNo >= POKEMON_NUM )
  {
    GFL_ASSERT(0);  // @check
    return false;
  }

  if( static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_M ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK_M
  )
  {
    ::std::memcpy( m_pokeData.data.m_gtsUpload[slotNo].m_index,   indexInfo,   INDEX_SIZE  );
    ::std::memcpy( &m_pokeData.data.m_gtsUpload[slotNo].m_pokemon, pokemonBody, POKEMON_SIZE);
  }
  else{
    ::std::memcpy( &m_pokeData.data.m_pokemon[slotNo], pokemonBody, POKEMON_SIZE);
  }
  return true;
}


//---------------------------------------------------------------------------
/**
* @brief ポケモン不正チェックの開始
*
* @note 不正チェックサーバでの検査終了のタイミングでPokemonValidationListenerを経由して結果を取得することができる。
* @note なお本関数がfalseを返却した場合は、PokemonValidationListenerイベントは発行されない。
*
* @attention 本関数実行前にSetPokemon()にて検査対象となるポケモンデータをセットしておくこと
*
* @param heap       通信スレッドの生成に使用されるヒープメモリ
* @param pokemonNum チェックするポケモン数
*
* @return 実行開始が正常に行えたならtrueを返却
*/
//---------------------------------------------------------------------------
bool PokemonValidation::CheckPokemonASync( gfl2::heap::HeapBase* heap, u32 pokemonNum )
{
  if( !m_isInit ){
    return false; // 未初期化
  }
  if( m_httpCon->IsConnecting() ){
    return false; // 通信中
  }
  m_execMode = E_EXEC_POKEMON_VALIDATION;
  m_heap     = heap;

  m_setting.Initialize();
  m_setting.postEncodeType = nn::http::ENCODING_TYPE_URL;
  m_setting.certData       = m_caBuffer;
  m_setting.certDataSize   = m_caSize;
  //
#if PM_DEBUG
  if( m_debugMaintenance ){
    m_setting.url = const_cast<char*>(DEBUG_VALIDATOR_URL);
  }
  else
#endif
  {
    m_setting.url = const_cast<char*>(VALIDATOR_URL);
  }
  //
  u32 postBufferSize = SetupValidationPostBuffer( heap, pokemonNum );
  m_sendPokemonNum   = pokemonNum;
  //
  m_setting.addPostParamNum                = 1;
  m_setting.addPostParam[0].type           = gflnet2::http::E_POST_TYPE_RAW;
  m_setting.addPostParam[0].queryValue     = reinterpret_cast<char*>(m_postBuffer);
  m_setting.addPostParam[0].queryValueSize = postBufferSize;

  return m_httpCon->StartPost( m_setting );
}


//---------------------------------------------------------------------------
/**
* @brief 公開鍵取得通信の開始
*
* @return 実行開始が正常に行えたならtrueを返却
*/
//---------------------------------------------------------------------------
bool PokemonValidation::GetPublicKeyASync( void )
{
  if( !m_isInit ){
    return false; // 未初期化
  }
  if( m_httpCon->IsConnecting() ){
    return false; // 通信中
  }
  m_execMode = E_EXEC_UPDATE_PUBLIC_KEY;

  m_setting.Initialize();
  m_setting.postEncodeType = nn::http::ENCODING_TYPE_URL;
  m_setting.certData       = m_caBuffer;
  m_setting.certDataSize   = m_caSize;

#if PM_DEBUG
  if( m_debugMaintenance ){
    m_setting.url = const_cast<char*>(DEBUG_PUBLIC_KEY_URL);
  }
  else
#endif
  {
    m_setting.url = const_cast<char*>(PUBLIC_KEY_URL);
  }
  //
  u32 postBufferSize = SetupUpdatingPublicKeyPostBuffer( m_heap );
  //
  m_setting.addPostParamNum                = 1;
  m_setting.addPostParam[0].type           = gflnet2::http::E_POST_TYPE_RAW;
  m_setting.addPostParam[0].queryValue     = reinterpret_cast<char*>(m_postBuffer);
  m_setting.addPostParam[0].queryValueSize = postBufferSize;

  return m_httpCon->StartPost( m_setting );
}


//---------------------------------------------------------------------------
/**
 * @brief ゲームモード別に送信する1体のポケモン情報のサイズを取得する
 *
 * @return 1体分のポケモン情報のサイズ
 */
//---------------------------------------------------------------------------
u32 PokemonValidation::GetPokemonDataSize( void ) const
{
  if( static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_M ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK_M
  )
  {
    return sizeof(GTS_UPLOAD_PACKAGE);
  }
  return sizeof(NetApp::GTS::GtsSerializePokemonParam);
}

//---------------------------------------------------------------------------
/**
 * @brief ポケモン検査用POST通信バッファをセット
 *
 * @param heap       通信スレッドの生成に使用されるヒープメモリ
 * @param pokemonNum チェックするポケモン数
 *
 * @return 生成されたPOSTデータサイズ
 */
//---------------------------------------------------------------------------
u32 PokemonValidation::SetupValidationPostBuffer( gfl2::heap::HeapBase* heap, u32 pokemonNum )
{
  const Savedata::ValidationSave* valid = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetGameData()->GetValidationSave();
  const u16 cerVersion = valid->GetVersion();
  GflHeapSafeFreeMemory( m_postBuffer );

  u16 pokemonNumNet  = SwapU16(pokemonNum);
  u32 tokenSize      = std::strlen(m_pokeData.authToken)+1;
  u32 gameModeSize   = sizeof(m_pokeData.gameMode);
  u32 cerVersionSize = sizeof(cerVersion);
  u32 pokemonNumSize = sizeof(pokemonNumNet);
  u32 pokemonSize    = GetPokemonDataSize();

  u32 buffSize = tokenSize+pokemonNumSize+gameModeSize+(pokemonSize*pokemonNum)+cerVersionSize;
  u32 index    = 0;

  m_postBuffer  = (u8*)GflHeapAllocMemory( heap, buffSize );

  // 証明書(文字列終端コード含む）
  std::memcpy( &m_postBuffer[index], m_pokeData.authToken, tokenSize );
  index += tokenSize;

  // 公開鍵のバージョン
  std::memcpy( &m_postBuffer[index], &cerVersion, cerVersionSize );
  index += cerVersionSize;

  // ゲームモード
  std::memcpy( &m_postBuffer[index], &m_pokeData.gameMode, gameModeSize );
  index += gameModeSize;

  // 送信ポケモン数
  std::memcpy( &m_postBuffer[index], &pokemonNumNet, pokemonNumSize );
  index += pokemonNumSize;

  // ポケモンデータ
  for( u32 i = 0; i < pokemonNum; i++ )
  {
    if( static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_M ||
      static_cast<GameMode>(m_pokeData.gameMode) == E_GAME_MODE_GTS_UPLOAD_NOT_INDEX_CHECK_M
    )
    {
      std::memcpy( &m_postBuffer[index], &m_pokeData.data.m_gtsUpload[i], pokemonSize );
    }
    else{
      std::memcpy( &m_postBuffer[index], &m_pokeData.data.m_pokemon[i], pokemonSize );
    }
    index += pokemonSize;
  }

  return buffSize;
}


//---------------------------------------------------------------------------
/**
 * @brief 公開鍵取得用POST通信バッファをセット
 *
 * @return 生成されたPOSTデータサイズ
 */
//---------------------------------------------------------------------------
u32 PokemonValidation::SetupUpdatingPublicKeyPostBuffer( gfl2::heap::HeapBase* heap )
{
  GflHeapSafeFreeMemory( m_postBuffer );

  u32 tokenSize = std::strlen(m_pokeData.authToken)+1;

  m_postBuffer  = (u8*)GflHeapAllocMemory( heap, tokenSize );

  // 証明書(文字列終端コード含む）
  std::memcpy( m_postBuffer, m_pokeData.authToken, tokenSize );

  return tokenSize;
}


//---------------------------------------------------------------------------
/**
* @brief 検査結果通知用イベントリスナを登録
*
* @param listener 検査結果通知先イベント
*/
//---------------------------------------------------------------------------
void PokemonValidation::SetPokemonValidationListener( PokemonValidationListener* listener )
{
  m_listener = listener;
}


//---------------------------------------------------------------------------
/**
* @brief 検査結果通知用イベントリスナを解除
*/
//---------------------------------------------------------------------------
void PokemonValidation::RemovePokemonValidationListener( void )
{
  m_listener = NULL;
}


#ifdef VALIDATION_USE_DEBUG_CER
//---------------------------------------------------------------------------
/**
 * @brief 証明書ファイルの読み込み
 *
 * @param devHeap ロードに使用するデバイスメモリ
 *
 * @return ロードに成功したならtrueを返却
 */
//---------------------------------------------------------------------------
bool PokemonValidation::LoadCertifyFile( gfl2::heap::HeapBase * devHeap )
{
  if( m_caBuffer == NULL ){
    return false;
  }
  gfl2::fs::ArcFile * af = GFL_NEW( devHeap ) gfl2::fs::ArcFile( devHeap, ARCID_CERT, gfl2::fs::ArcFile::OPEN );
  size_t buffSize = af->GetDataSize( GARC_cert_cacert_DER );

  if( buffSize == 0 )
  {
    GFL_SAFE_DELETE( af );
    return false;
  }
  m_caSize = af->GetRealDataSize( GARC_cert_cacert_DER );

  size_t readSize = af->LoadData( GARC_cert_cacert_DER, m_caBuffer );
  GFL_SAFE_DELETE( af );

  return readSize == buffSize;
}
#endif

//---------------------------------------------------------------------------
/**
* @brief 稼働状態判定
*
* @return 稼働状態にあるならtrue、非稼働状態ならfalseを返却
*/
//---------------------------------------------------------------------------
bool PokemonValidation::IsEnable( void ) const
{
  return m_isInit;
}


//---------------------------------------------------------------------------
/**
 * @brief 通信接続中か判定
 *
 * @return ポケモン不正チェックサーバと通信状態にあるならtrueを返却
 */
//---------------------------------------------------------------------------
bool PokemonValidation::IsConnecting( void ) const
{
  if( m_httpCon == NULL ){
    return false;
  }
  return m_httpCon->IsConnecting();
}


//---------------------------------------------------------------------------
/**
 * @brief 通信キャンセルリクエストを発行する
 *
 * @note  通信状態にかかわらず、コールしても良い
 *
 * @return キャンセル処理が実施されたならtrueを返却する
 */
//---------------------------------------------------------------------------
bool PokemonValidation::CancelConnecting( void )
{
  if( m_httpCon == NULL ){
    return false;
  }
  return m_httpCon->CancelConnecting();
}


//---------------------------------------------------------------------------
/**
 * @brief 指定数値をネットワークバイトオーダーに変換
 *
 * @param val 変換前数値
 *
 * @return 変換されたデータ
 */
//---------------------------------------------------------------------------
u16 PokemonValidation::SwapU16(u16 val)
{
  return ((val&0xFF00)>>8) | ((val&0x00FF)<<8);
}


//---------------------------------------------------------------------------
/**
 * @brief 指定数値をネットワークバイトオーダーに変換
 *
 * @param val 変換前数値
 *
 * @return 変換されたデータ
 */
//---------------------------------------------------------------------------
s32 PokemonValidation::SwapS32(s32 val)
{
  return ((val&0xFF000000)>>24) | ((val&0x00FF0000)>>8) | ((val&0x0000FF00)<<8) | ((val&0x000000FF)<<24);
}


//---------------------------------------------------------------------------
/**
 * @brief  ポケモン検査時のレスポンスデータのパース処理
 *
 * @param  response  サーバから返却されたレスポンス情報
 */
//---------------------------------------------------------------------------
void PokemonValidation::ParsePokemonValidationResponse( const NetLib::HTTP::NexHttpResponse& response )
{
  const nn::nex::qVector<nn::nex::qByte>& bodyBuf = response.GetReceiveBuffer();

  const u8*       bodyPtr    = &(bodyBuf[0]);
  s32             bodySize   = bodyBuf.size();
  u32             certSize   = 0;
  nn::nex::qInt32 checkResult[POKEMON_NUM];
  memset( checkResult , 0 , sizeof(checkResult) );

  // ステータスコード読み込み
  ValidationResultCode  resultCode = static_cast<ValidationResultCode>(*bodyPtr);
  bodyPtr++;

  // ポケモン数を取得
  u16 pokemonNum = 0;
  std::memcpy( &pokemonNum, bodyPtr, sizeof(pokemonNum) );
  bodyPtr += sizeof(pokemonNum);
  pokemonNum = SwapU16( pokemonNum );
  if( pokemonNum > POKEMON_NUM ){
    pokemonNum = POKEMON_NUM;
  }

  #if PM_DEBUG
  // 強制的に不正な署名として扱う為のフラグ
  if( m_debugInvalidPokemon )
  {
    resultCode = RESULT_INVALID;
  }
  #endif

  // 証明書のバージョンが違う
  if( RESULT_RSA_ERROR == resultCode )
  {
    GFL_PRINT( "warning! public key was versionup!!\n" );
    GetPublicKeyASync();
  }
  // 検査結果を格納
  else if( RESULT_VALID == resultCode )
  {
    u32 headerSize = (RESULT_STATUS_SIZE+SIGNATURE_SIZE+RESULT_POKENUM_SIZE);

    // ポケモン数が一致？
    if( pokemonNum == ((bodySize-(headerSize))/4) ){
      certSize   = SIGNATURE_SIZE;
    }
#if PM_DEBUG
    //xy_debug::LogWindow_AddMsg( xy_debug::LOGWIN_ID_VALIDATION, L"不正検査結果");
#endif
    for( u32 i = 0; (i < pokemonNum) ; i++ )
    {
      std::memcpy( &checkResult[i], bodyPtr, sizeof(checkResult[i]) );

      #if PM_DEBUG
      if( m_debugInvalidPokemon )
      {
        checkResult[i] = RESULT_INVALID;  // 不正ポケモンとして強制登録
      }
      else
      #endif
      {
        checkResult[i] = SwapS32( checkResult[i] );
      }
      bodyPtr += sizeof(checkResult[i]);
#if PM_DEBUG
      //xy_debug::LogWindow_AddMsg( xy_debug::LOGWIN_ID_VALIDATION, L"%d:%d", i, checkResult[i] );
#endif
    }

    m_listener->OnPokemonValidationSuccess( checkResult, pokemonNum, bodyPtr, certSize );
  }
  // ポケモンが不正
  else
  {
#if PM_DEBUG
    //xy_debug::LogWindow_AddMsg( xy_debug::LOGWIN_ID_VALIDATION, L"不正検査結果");
#endif
    for( u32 i = 0; (i < pokemonNum) ; i++ )
    {
      std::memcpy( &checkResult[i], bodyPtr, sizeof(checkResult[i]) );
      checkResult[i] = SwapS32( checkResult[i] );
      GFL_PRINT("Invalid Pokemon[%d][%d]\n",i,checkResult[i]);
      bodyPtr += sizeof(checkResult[i]);
#if PM_DEBUG
      gfl2::debug::LogWindow_AddMsg(gfl2::debug::LOGWIN_ID_NEX, L"ValidationError[%d]:[%d]",    i, checkResult[i] );
      //xy_debug::LogWindow_AddMsg( xy_debug::LOGWIN_ID_VALIDATION, L"%d:%d", i, checkResult[i] );
#endif
    }
    m_listener->OnPokemonValidationSuccess( checkResult, pokemonNum, NULL, 0 );
  }
}


//---------------------------------------------------------------------------
/**
 * @brief  公開鍵更新時のレスポンスデータのパース処理
 *
 * @param  response  サーバから返却されたレスポンス情報
 */
//---------------------------------------------------------------------------
void PokemonValidation::ParseUpdationgPublicKeyResponse( const NetLib::HTTP::NexHttpResponse& response )
{
  const nn::nex::qVector<nn::nex::qByte>& bodyBuf = response.GetReceiveBuffer();

  const u8* bodyPtr    = &(bodyBuf[0]);
  s32       bodySize   = bodyBuf.size();

  // 想定しているレスポンスサイズと一致する
  if( (PUBLIC_KEY_SIZE+2) == bodySize )
  {
    u16 version;  // 新たに発行されたバージョン(ネットワークオーダー）
    ::std::memcpy( &version, bodyPtr, sizeof(version) );
    bodyPtr += sizeof(version);

    Savedata::ValidationSave* valid = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetGameData()->GetValidationSave();
    valid->UpdatePublicKey( version, bodyPtr, PUBLIC_KEY_SIZE );

    SetupRsaContext();

    CheckPokemonASync( m_heap, m_sendPokemonNum );
  }
  // 予期せぬエラー
  else
  {
    DoHttpStatusError( 0 );
  }
}


//---------------------------------------------------------------------------
/**
 * @brief   Http通信の成功イベント
 * @brief   ただし、サーバからのステータスコードについては必ず確認すること。
 *
 * @param  response  サーバから返却されたレスポンス情報
 */
//---------------------------------------------------------------------------
void PokemonValidation::OnNexHttpConnectionSuccess( const NetLib::HTTP::NexHttpResponse& response )
{
  s32 statusCode = response.GetStatusCode();

   GFL_PRINT( "PokemonValidation::OnNexHttpConnectionSuccess! resultCode[%d] \n", statusCode );

   if( m_listener != NULL )
   {
     #if PM_DEBUG
     // 必ず失敗させる為のデバッグ機能
     if( m_debugFaileFlag )
     {
       DoHttpStatusError( 0 );
       return;
     }
     #endif

#if PM_DEBUG
     // 必ず失敗させる為のデバッグ機能
     if( m_debugMaintenance )
     {
       DoHttpStatusError( 503 );
       return;
     }
#endif

     // HTTPステータスコード200台なら正常
     if( (statusCode/100) == 2 )
     {
       if( m_execMode == E_EXEC_POKEMON_VALIDATION ){
         ParsePokemonValidationResponse( response );
       }
       else if( m_execMode == E_EXEC_UPDATE_PUBLIC_KEY ){
         ParseUpdationgPublicKeyResponse( response );
       }
     }
     // エラー通知
     else
     {
       DoHttpStatusError( statusCode );
     }
   }
}


//---------------------------------------------------------------------------
/**
 * @brief HTTPステータスエラーのハンドリング
 *
 * @param statusCode HTTPステータスコード
 */
//---------------------------------------------------------------------------
void PokemonValidation::DoHttpStatusError( s32 statusCode )
{
  nn::nex::qResult result;

  switch (statusCode)
  {
    case 0: // ステータスコードが不正
      result = QRESULT_ERROR(Transport, Unknown);
      break;

    default:
      m_listener->OnPokemonValidationError( statusCode );
      return;
  }

  u32 errorCode = gflnet2::nex::NexError::GetNetworkErrorCode( result );
  m_listener->OnPokemonValidationError( result, errorCode );
}


//---------------------------------------------------------------------------
/**
 * @brief   Http通信のエラーイベント
 *
 * @param   result    実行結果
 * @param   errorCode ネットワークエラーコード
 */
//---------------------------------------------------------------------------
void PokemonValidation::OnNexHttpConnectionError( const nn::nex::qResult &result, u32 errorCode )
{
  GFL_PRINT( "PokemonValidation::OnHttpConnectionError! code[%s][%u] \n", result.GetErrorName(), errorCode );

  if( m_listener != NULL ){
    m_listener->OnPokemonValidationError( result, errorCode );
  }
}


//---------------------------------------------------------------------------
/**
 * @brief   Http通信のキャンセルイベント
 */
//---------------------------------------------------------------------------
void PokemonValidation::OnNexHttpConnectionCanceled( void )
{
  GFL_PRINT( "PokemonValidation::OnNexHttpConnectionCanceled\n" );

  if( m_listener != NULL ){
    m_listener->OnPokemonValidationCanceled();
  }
}


//------------------------------------------------------------------
/**
  * @brief   ホーム、スリープ、ゲーム終了処理発生時イベント
  *
  * @retval  true    終了処理完了
  * @retval  false   終了処理中
  *
  * @note    適切な終了処理を記述してください。
  * @attention  On～という名前なのに他のメンバとふるまいが違うので注意
  * @attention  Observerパターンとして名前が適切なのかは疑問の余地あり
  */
//------------------------------------------------------------------
bool PokemonValidation::OnSuspendWithHomeSleepAndPower( void )
{
  while( true )
  {
    GFL_SINGLETON_INSTANCE(gflnet2::nex::NexManager)->Dispatch();
    CancelConnecting();
    if( IsConnecting() == false )
    {
      break;
    }
    nn::os::Thread::Sleep( nn::fnd::TimeSpan::FromMilliSeconds(1) );
  }

  Finalize();

  return true;
}



static const u8 unicode_map[8192] = 
{	
0x01,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xAF,	
0xFF,0xFF,0xFF,0x87,0xFE,0xFF,0xFF,0x47,	
0x00,0x00,0x00,0x00,0x02,0x0C,0x01,0x8C,	
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x0C,0xC0,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x73,0x60,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,	
0x80,0x48,0x00,0x00,0x00,0x00,0x00,0x00,	
0x2F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x05,0x00,0x00,0x00,0x69,0x04,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x07,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,	
0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,	
0xFF,0xFF,0x0C,0x00,0xFE,0xFF,0xFF,0xFF,	
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1C,0x18,	
0x00,0x00,0x00,0x00,0x00,0x00,0x96,0x03,	
0xEE,0xFF,0xFF,0x18,0x0B,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x93,0x07,0xFF,0x3E,0x11,0xB0,0x03,0x13,	
0x01,0x28,0x10,0x11,0x00,0x00,0x93,0x05,	
0x7B,0x1E,0x11,0xB0,0x03,0x97,0x01,0x3B,	
0x12,0x11,0xA0,0x00,0x93,0x95,0x6B,0x30,	
0x51,0xB0,0x02,0x11,0x01,0x32,0x30,0x11,	
0xB0,0x02,0x11,0x01,0x0A,0x30,0x79,0xB8,	
0x06,0x13,0x01,0x30,0x10,0x00,0x80,0x00,	
0x13,0x01,0x0B,0x10,0x11,0x00,0x00,0x93,	
0x03,0x2B,0x10,0x00,0x00,0x00,0x93,0x05,	
0x6B,0x74,0x51,0xB0,0x23,0x13,0x01,0x3B,	
0x30,0x10,0x00,0x00,0x00,0x00,0x00,0x70,	
0x11,0xB0,0x03,0x13,0x00,0x29,0x10,0x11,	
0x80,0x21,0x01,0x00,0x00,0x30,0x15,0xB0,	
0x0E,0x03,0x01,0x30,0x30,0x00,0x00,0x02,	
0x11,0x01,0x23,0x10,0x00,0x00,0x00,0x13,	
0x81,0x6B,0x10,0x10,0x00,0x03,0x13,0x01,	
0x13,0x10,0x11,0x30,0x00,0x01,0x00,0x00,	
0x30,0x55,0xB8,0x22,0x00,0x00,0x00,0x30,	
0x11,0xB0,0x02,0x97,0x07,0xFB,0x3A,0x11,	
0xB0,0x03,0x13,0x01,0x21,0x00,0x00,0x00,	
0x00,0x1B,0x0D,0x3B,0x38,0x11,0xB0,0x03,	
0x13,0x01,0x33,0x11,0x01,0x00,0x00,0x13,	
0x05,0x2B,0x1C,0x11,0x00,0x01,0x00,0x00,	
0x00,0x10,0x11,0xB0,0x00,0x13,0x01,0x2A,	
0x30,0x19,0xB0,0x02,0x01,0x00,0x10,0x10,	
0x00,0x00,0x00,0x11,0x01,0x03,0x30,0x10,	
0x30,0x02,0x13,0x07,0x6B,0x14,0x11,0x00,	
0x00,0x13,0x05,0x2B,0x74,0xF9,0xB8,0x8F,	
0x13,0x01,0x3B,0x10,0x00,0x00,0x00,0x00,	
0x00,0x00,0x70,0xD9,0xB0,0x4A,0x13,0x01,	
0x3B,0x10,0x11,0x00,0x03,0x11,0x00,0x00,	
0x30,0x59,0xB1,0x2A,0x11,0x01,0x00,0x10,	
0x00,0x00,0x01,0x11,0x01,0x0B,0x10,0x00,	
0x00,0x00,0x13,0x01,0x2B,0x10,0x00,0x00,	
0x01,0x01,0x00,0x20,0x10,0x11,0xA0,0x02,	
0x11,0x01,0x21,0x30,0x59,0xB0,0x02,0x01,	
0x00,0x00,0x30,0x19,0xB0,0x07,0x13,0x01,	
0x3B,0x38,0x11,0xB0,0x03,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x13,0x0D,0x3B,0x38,	
0x11,0xB0,0x03,0x01,0x00,0x10,0x00,0x00,	
0x00,0x00,0x13,0x01,0x20,0x10,0x10,0x00,	
0x00,0x01,0x00,0x00,0x10,0x01,0x00,0x00,	
0x00,0x00,0x00,0x30,0x11,0x18,0x02,0x00,	
0x00,0x00,0x10,0x00,0x00,0x00,0x11,0x01,	
0x23,0x00,0x00,0x00,0x00,0x93,0x01,0x0B,	
0x10,0x11,0x30,0x00,0x11,0x01,0x2B,0x30,	
0x11,0xB0,0xC7,0x13,0x01,0x3B,0x30,0x01,	
0x80,0x02,0x00,0x00,0x00,0x30,0x11,0xB0,	
0x83,0x13,0x01,0x2B,0x30,0x11,0xB0,0x03,	
0x11,0x00,0x0A,0x30,0x11,0xB0,0x02,0x11,	
0x00,0x20,0x10,0x00,0x00,0x01,0x11,0x01,	
0x2B,0x10,0x11,0xA0,0x02,0x13,0x01,0x2B,	
0x10,0x00,0x00,0x01,0x01,0x00,0x00,0x30,	
0x11,0x90,0x02,0x13,0x01,0x2B,0x30,0x11,	
0xB0,0x66,0x00,0x00,0x00,0x30,0x11,0xB0,	
0x02,0xD3,0x07,0x6B,0x3A,0x11,0xB0,0x07,	
0x03,0x01,0x20,0x00,0x00,0x00,0x00,0x13,	
0x05,0x6B,0x38,0x11,0xB0,0x03,0x13,0x01,	
0xB8,0x10,0x00,0x00,0x00,0x1B,0x05,0x2B,	
0x10,0x01,0x00,0x03,0x00,0x00,0x00,0x10,	
0x11,0xA0,0x02,0x11,0x01,0x0A,0x70,0x79,	
0xB0,0xA2,0x11,0x01,0x0A,0x10,0x00,0x00,	
0x00,0x11,0x01,0x00,0x10,0x11,0x90,0x00,	
0x11,0x01,0x09,0x00,0x00,0x00,0x00,0x93,	
0x05,0xBB,0xF2,0xF9,0xB0,0x22,0x13,0x01,	
0x3B,0x32,0x01,0x20,0x00,0x00,0x00,0x00,	
0x30,0x59,0xB0,0x06,0x93,0x01,0x3B,0x30,	
0x11,0xA0,0x23,0x11,0x00,0x00,0x70,0x11,	
0xB0,0x02,0x11,0x00,0x10,0x10,0x00,0x00,	
0x01,0x13,0x01,0x03,0x10,0x01,0x00,0x00,	
0x93,0x07,0x2B,0x16,0x10,0x00,0x01,0x01,	
0x00,0x00,0x30,0x11,0x00,0x02,0x11,0x01,	
0x29,0x30,0x11,0xB0,0x00,0x00,0x00,0x00,	
0x30,0x51,0xB0,0x0E,0x13,0x05,0x3B,0x38,	
0x11,0xB0,0x03,0x03,0x00,0x01,0x00,0x00,	
0x00,0x00,0x93,0x01,0x39,0x10,0x00,0x00,	
0x02,0x03,0x00,0x3B,0x00,0x00,0x00,0x00,	
0x13,0x01,0x23,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,	
0x20,0x30,0x11,0x90,0x02,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,	
0x00,0x00,0x02,0x11,0x01,0x03,0x00,0x00,	
0x00,0x00,0x13,0x01,0x2B,0xB0,0x79,0xB0,	
0x23,0x13,0x01,0x3B,0x30,0x11,0xB0,0x02,	
0x11,0x01,0x21,0xF0,0xD9,0xB0,0x43,0x13,	
0x01,0x3B,0x30,0x11,0xB0,0x03,0x11,0x01,	
0x20,0x70,0x51,0xB0,0x22,0x13,0x01,0x20,	
0x10,0x11,0x90,0x01,0x11,0x01,0x0B,0x30,	
0x11,0xB0,0x02,0x93,0x01,0xAB,0x16,0x00,	
0x00,0x01,0x13,0x01,0x21,0x30,0x11,0xB0,	
0x02,0x03,0x01,0x29,0x30,0x31,0xB0,0x02,	
0x00,0x00,0x00,0x30,0x19,0xB8,0x42,0x1B,	
0x01,0x33,0x38,0x11,0x30,0x03,0x01,0x00,	
0x20,0x00,0x00,0x00,0x00,0x13,0x05,0x33,	
0x10,0x11,0x00,0x00,0x00,0x00,0x00,0x10,	
0x01,0x00,0x00,0x93,0x05,0x23,0x30,0x01,	
0x00,0x01,0x01,0x00,0x10,0x10,0x11,0x30,	
0x00,0x01,0x00,0x00,0x30,0x11,0x30,0x02,	
0x01,0x00,0x10,0x10,0x00,0x00,0x00,0x11,	
0x00,0x00,0x10,0x00,0x00,0x02,0x13,0x85,	
0x03,0x10,0x11,0x10,0x00,0x13,0x01,0x2B,	
0x30,0x77,0xB8,0x63,0x13,0x01,0x3B,0x30,	
0x91,0xB0,0xA2,0x11,0x01,0x02,0x30,0x7B,	
0xF0,0x57,0x13,0x01,0x2B,0x70,0xD1,0xF0,	
0xE3,0x11,0x01,0x1B,0x30,0x71,0xB9,0x0A,	
0x13,0x01,0x3B,0x30,0x01,0x90,0x02,0x13,	
0x01,0x2B,0x30,0x11,0xB0,0x02,0x13,0x07,	
0x2B,0x30,0x11,0x30,0x03,0x13,0x01,0x23,	
0x30,0x11,0xB0,0x02,0x13,0x01,0xAB,0x30,	
0x11,0xB4,0xFE,0x11,0x01,0x09,0x30,0x71,	
0xB8,0x47,0xD3,0x05,0x7B,0x30,0x11,0xB0,	
0x03,0x53,0x01,0x21,0x10,0x11,0x00,0x00,	
0x13,0x05,0x6B,0x30,0x11,0xB0,0x02,0x11,	
0x01,0x33,0x10,0x00,0x00,0x00,0x13,0x05,	
0xEB,0x38,0x10,0xA0,0x02,0x01,0x00,0x30,	
0x10,0x11,0xB0,0x02,0x13,0x00,0x20,0x30,	
0x71,0xB0,0x02,0x01,0x00,0x10,0x10,0x00,	
0x00,0x00,0x13,0x01,0x0B,0x10,0x11,0x10,	
0x00,0x13,0x01,0x2B,0x00,0x00,0x00,0x00,	
0x93,0x05,0x6B,0x36,0x95,0xB0,0x03,0x13,	
0x01,0x3B,0x10,0x01,0x00,0x02,0x00,0x00,	
0x00,0x30,0x11,0xB0,0x03,0x01,0x00,0x20,	
0x10,0x00,0x00,0x01,0x00,0x00,0x00,0x30,	
0x11,0xB0,0x0A,0x03,0x01,0x10,0x10,0x00,	
0x00,0x01,0x11,0x01,0x03,0x10,0x00,0x00,	
0x02,0x13,0x01,0x23,0x10,0x00,0x00,0x03,	
0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,	
0x00,0x00,0x10,0x00,0x90,0x02,0x00,0x00,	
0x00,0x30,0x11,0x30,0x86,0x53,0x01,0x7B,	
0x30,0x11,0xB0,0x03,0x51,0x01,0x21,0x00,	
0x00,0x00,0x00,0x13,0x01,0x3B,0x30,0x11,	
0xB0,0x02,0x11,0x00,0x10,0x10,0x01,0x00,	
0x02,0x13,0x01,0x2B,0x10,0x11,0x00,0x02,	
0x00,0x00,0x00,0x10,0x11,0xB0,0x02,0x01,	
0x00,0x01,0x30,0x11,0xB0,0x02,0x01,0x00,	
0x10,0x10,0x01,0x00,0x00,0x11,0x01,0x2B,	
0x10,0x11,0x10,0x02,0x13,0x01,0x2B,0x00,	
0x00,0x00,0x00,0x93,0x03,0x2B,0x30,0x11,	
0xB0,0x02,0x13,0x01,0x3B,0x30,0x00,0x00,	
0x02,0x00,0x00,0x00,0x30,0x19,0xB0,0x03,	
0x13,0x01,0x2B,0x10,0x11,0xB0,0x03,0x01,	
0x00,0x00,0x30,0x11,0xB0,0x02,0x13,0x01,	
0x21,0x10,0x00,0x00,0x02,0x01,0x01,0x00,	
0x10,0x00,0x00,0x00,0x13,0x01,0x2B,0x10,	
0x11,0x00,0x02,0x01,0x00,0x20,0x30,0x11,	
0xB0,0x02,0x11,0x01,0x01,0x30,0x11,0x30,	
0x02,0x00,0x00,0x00,0x30,0x11,0xB0,0x02,	
0x13,0x03,0x3B,0x30,0x11,0xB0,0x03,0x01,	
0x00,0x20,0x00,0x00,0x00,0x00,0x13,0x05,	
0x3B,0x30,0x11,0xB0,0x02,0x11,0x00,0x10,	
0x10,0x01,0x00,0x00,0x13,0x01,0x2B,0x14,	
0x01,0x00,0x00,0x01,0x00,0x00,0x10,0x01,	
0x80,0x02,0x01,0x00,0x00,0x30,0x11,0xB0,	
0x02,0x01,0x00,0x10,0x10,0x00,0x00,0x00,	
0x13,0x01,0x23,0x10,0x11,0x10,0x02,0x93,	
0x05,0x0B,0x10,0x11,0x30,0x00,0x13,0x01,	
0x2B,0x70,0x51,0xB0,0x23,0x13,0x01,0x3B,	
0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x30,	
0x11,0xB0,0x03,0x13,0x01,0x2B,0x10,0x11,	
0x30,0x03,0x01,0x01,0x0A,0x30,0x11,0xB0,	
0x02,0x01,0x00,0x20,0x00,0x00,0x00,0x00,	
0x11,0x00,0x00,0x10,0x11,0xA0,0x00,0x93,	
0x05,0x2B,0x10,0x00,0x00,0x02,0x00,0x00,	
0x00,0x10,0x11,0x90,0x00,0x11,0x01,0x29,	
0x10,0x11,0xB0,0x00,0x00,0x00,0x00,0x30,	
0x11,0xB0,0x02,0x13,0x21,0x2B,0x30,0x11,	
0xB0,0x03,0x01,0x00,0x20,0x00,0x00,0x00,	
0x00,0x13,0x05,0x2B,0x30,0x11,0xB0,0x02,	
0x13,0x01,0x3B,0x10,0x11,0x20,0x00,0x13,	
0x21,0x2B,0x32,0x11,0x80,0x02,0x13,0x00,	
0x28,0x30,0x11,0xA0,0x02,0x11,0x01,0x0A,	
0x30,0x11,0x92,0x02,0x11,0x01,0x21,0x30,	
0x11,0x00,0x02,0x13,0x01,0x2B,0x30,0x11,	
0x90,0x02,0xD3,0x03,0x2B,0x12,0x11,0x30,	
0x02,0x13,0x01,0x2B,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0xFE,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x62,0xFB,0xFF,0xAF,0xFF,0xFF,0xFF,0x87,	
0xFE,0xFF,0xFF,0x47,0x20,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80
};

//7文字以上を許可する文字コード
static const gfl2::str::STRCODE ENGLISH_STRCODE_TABLE[] =
{
  0x0020,0x0021,0x0023,0x0024,
  0x0025,0x0028,0x0029,0x002A,
  0x002B,0x002C,0x002D,0x002E,
  0x002F,0x0030,0x0031,0x0032,
  0x0033,0x0034,0x0035,0x0036,
  0x0037,0x0038,0x0039,0x003A,
  0x003B,0x003D,0x003F,0x0041,
  0x0042,0x0043,0x0044,0x0045,
  0x0046,0x0047,0x0048,0x0049,
  0x004A,0x004B,0x004C,0x004D,
  0x004E,0x004F,0x0050,0x0051,
  0x0052,0x0053,0x0054,0x0055,
  0x0056,0x0057,0x0058,0x0059,
  0x005A,0x005f,0x0061,0x0062,
  0x0063,0x0064,0x0065,0x0066,
  0x0067,0x0068,0x0069,0x006A,
  0x006B,0x006C,0x006D,0x006E,
  0x006F,0x0070,0x0071,0x0072,
  0x0073,0x0074,0x0075,0x0076,
  0x0077,0x0078,0x0079,0x007A,
  0x007E,0x00A1,0x00aa,0x00AB,
  0x00b0,0x00ba,0x00BB,0x00BF,
  0x00C0,0x00C1,0x00C2,0x00c3,
  0x00C4,0x00c5,0x00c6,0x00C7,
  0x00C8,0x00C9,0x00CA,0x00CB,
  0x00CC,0x00CD,0x00CE,0x00CF,
  0x00d0,0x00D1,0x00D2,0x00D3,
  0x00D4,0x00d5,0x00D6,0x00d8,
  0x00D9,0x00DA,0x00DB,0x00DC,
  0x00dd,0x00de,0x00DF,0x00E0,
  0x00E1,0x00E2,0x00e3,0x00E4,
  0x00e5,0x00e6,0x00E7,0x00E8,
  0x00E9,0x00EA,0x00EB,0x00EC,
  0x00ED,0x00EE,0x00EF,0x00f0,
  0x00F1,0x00F2,0x00F3,0x00F4,
  0x00f5,0x00F6,0x00f8,0x00F9,
  0x00FA,0x00FB,0x00FC,0x00fd,
  0x00fe,0x00ff,0x0152,0x0153,
  0x015e,0x015f,0x01ec,0x2018,
  0x2019,0x201C,0x201D,0x201E,
  0xe088,0xe089,0xe08a,0xe08b,
  0xe08c,0xE08D,0xE08E,0xE08F,
  0xE090,0xE091,0xE092,0xE093,
  0xE094,0xE095,0xE096,0xE097,
  0xE098,0xE099,0xE09A,0xE09B,
  0xE09C,0xE09D,0xE09E,0xE09F,
  0xE0A0,0xE0A1,0xE0A2,0xE0A3,
  0xE0A4,0xE0A5,0xe0a6,0xe0a7,
  0xe0a8,0xFF65,0xFFFF
};

static const gfl2::str::STRCODE CH_CODE_START = 0xE800;
static const gfl2::str::STRCODE CH_CODE_END = 0xEE21;


//---------------------------------------------------------------------------
/**
 * @brief   モンスター名チェック＆置換
 */
//---------------------------------------------------------------------------
void PokemonValidation::ReplaceMonsName( pml::pokepara::CoreParam* pCoreParam )
{
  gfl2::heap::HeapBase* pHeap = gfl2::heap::Manager::GetHeapByHeapId( HEAPID_NETWORK_RESIDENT );

  gfl2::str::StrBuf tempBuf( 32 , pHeap->GetLowerHandle() );

  //ニックネーム
  pCoreParam->GetNickName( &tempBuf );
  if( IsValidName( tempBuf.GetPtr() , pCoreParam->GetLangId() ) == false )
  {//置換する
    GFL_PRINT("ReplaceMonsName\n");
    //GFL_ASSERT_MSG(0,"モンスター名が不正です。ゲーム内で入力可能な名前をつけてください。");//@fix
    pCoreParam->SetDefaultNickName();
  }

  //親名
  tempBuf.Clear();
  pCoreParam->GetParentName( &tempBuf );
  gfl2::str::STRCODE name[32];
  std::memcpy( name , tempBuf.GetPtr() , sizeof(name) );
  ReplacePlayerName( name , pCoreParam->GetLangId() , pCoreParam->GetCassetteVersion() );
  pCoreParam->SetParentName( name );
}


//---------------------------------------------------------------------------
/**
 * @brief   モンスター名チェック＆置換
 */
//---------------------------------------------------------------------------
void PokemonValidation::ReplaceMonsName( gfl2::str::STRCODE* pNickName , u8 pokeLang , MonsNo monsNo )
{
  if( IsValidName( pNickName , pokeLang ) == false )
  {//置換する
    GFL_PRINT("ReplaceMonsName2\n");
    //GFL_ASSERT_MSG(0,"モンスター名が不正です。ゲーム内で入力可能な名前をつけてください。");//@fix
    pml::personal::GetMonsName( pNickName , monsNo );
  }
}


//---------------------------------------------------------------------------
/**
 * @brief   プレイヤー名チェック＆置換
 */
//---------------------------------------------------------------------------
void PokemonValidation::ReplacePlayerName( gfl2::str::STRCODE* pName , u8 pokeLang , u8 romVersion )
{
  if( IsValidName( pName , pokeLang ) == false )
  {//置換する
    if( pokeLang > POKEMON_LANG_TAIWAN )
    {//最大値オーバー
      pokeLang = POKEMON_LANG_ENGLISH;
    }

/*
日本語		サン.		ムーン．
英語			Sun.		Moon.
フランス語		Soleil.	Lune.
イタリア語		Sole.		Luna.
ドイツ語		Sonne.	Mond.
スペイン語		Sol. 		Luna.
韓国語  		썬. 		문.
繁体字		Ｓｕｎ.	Ｍｏｏｎ.
簡体字		Ｓｕｎ.	Ｍｏｏｎ.
*/

    const gfl2::str::STRCODE* DEFAULT_PLAYER_NAME_SUN[] =
    {
      L"Sun.",        //#define POKEMON_LANG_NULL          0  ///<  言語コード：無効な値
      L"サン．",       //#define POKEMON_LANG_JAPAN         1  ///<  言語コード：日本        JPN
      L"Sun.",        //#define POKEMON_LANG_ENGLISH       2  ///<  言語コード：英語        USA
      L"Soleil.",        //#define POKEMON_LANG_FRANCE        3  ///<  言語コード：フランス語  FRA
      L"Sole.",        //#define POKEMON_LANG_ITALY         4  ///<  言語コード：イタリア語  ITA
      L"Sonne.",        //#define POKEMON_LANG_GERMANY       5  ///<  言語コード：ドイツ語    DEU
      L"Sun.",        //未定義
      L"Sol.",        //#define POKEMON_LANG_SPAIN         7  ///<  言語コード：スペイン語  ESP
      L"썬．",        //#define POKEMON_LANG_KOREA         8  ///<  言語コード：韓国語      KOR
      L"Ｓｕｎ．",        //#define POKEMON_LANG_CHINA         9  ///<  言語コード：簡体字（中国）      CHN
      L"Ｓｕｎ．",        //#define POKEMON_LANG_TAIWAN        10 ///<  言語コード：繁体字（台湾、香港）    TWN
    };

    const gfl2::str::STRCODE* DEFAULT_PLAYER_NAME_MOON[] =
    {
      L"Moon.",        //#define POKEMON_LANG_NULL          0  ///<  言語コード：無効な値
      L"ムーン．",       //#define POKEMON_LANG_JAPAN         1  ///<  言語コード：日本        JPN
      L"Moon.",        //#define POKEMON_LANG_ENGLISH       2  ///<  言語コード：英語        USA
      L"Lune.",        //#define POKEMON_LANG_FRANCE        3  ///<  言語コード：フランス語  FRA
      L"Luna.",        //#define POKEMON_LANG_ITALY         4  ///<  言語コード：イタリア語  ITA
      L"Mond.",        //#define POKEMON_LANG_GERMANY       5  ///<  言語コード：ドイツ語    DEU
      L"Moon.",        //未定義
      L"Luna.",        //#define POKEMON_LANG_SPAIN         7  ///<  言語コード：スペイン語  ESP
      L"문．",        //#define POKEMON_LANG_KOREA         8  ///<  言語コード：韓国語      KOR
      L"Ｍｏｏｎ．",        //#define POKEMON_LANG_CHINA         9  ///<  言語コード：簡体字（中国）      CHN
      L"Ｍｏｏｎ．",        //#define POKEMON_LANG_TAIWAN        10 ///<  言語コード：繁体字（台湾、香港）    TWN
    };

    const gfl2::str::STRCODE* pDefaultName = NULL;
    if( romVersion == VERSION_MOON2 )
    {
      pDefaultName = DEFAULT_PLAYER_NAME_MOON[pokeLang];
    }
    else
    {
      pDefaultName = DEFAULT_PLAYER_NAME_SUN[pokeLang];
    }

    //GFL_PRINT("ReplacePlayerName\n");
#if PM_DEBUG
    if( pName[0] != 0 )//空白は内部処理でたまにあるのでアサート出さない
    {
      //GFL_ASSERT_MSG(0,"プレイヤー名が不正です。ゲーム内で入力可能な名前をつけてください");//@fix
    }
#endif
    ::std::wcsncpy( pName , pDefaultName , pml::MONS_NAME_LENGTH );
  }
}

//---------------------------------------------------------------------------
/**
 * @brief   文字列不正チェック
 */
//---------------------------------------------------------------------------
bool PokemonValidation::IsValidName( const gfl2::str::STRCODE* pName , u8 langCode )
{
  int length = 0;
  switch( langCode )
  {
  case POKEMON_LANG_JAPAN:
  case POKEMON_LANG_KOREA:
  case POKEMON_LANG_CHINA:       
  case POKEMON_LANG_TAIWAN:       
  default:
    {
      length = pml::MONS_NAME_BUFFER_SIZE;
    }
  break;
  }

  if( checkName( pName , length ) != NAME_CHECK_OK )
  {//置換する
    return false;
  }

  return true;
}

//---------------------------------------------------------------------------
/**
 * @brief  文字コードチェック
 */
//---------------------------------------------------------------------------
bool PokemonValidation::check_unicodemap( gfl2::str::STRCODE code , int index , bool* pZenkaku )
{
  u16 id = static_cast<u16>(code);
  u16 idMap = code/8;
  if( idMap >= sizeof(unicode_map) )
  {
    //GFL_ASSERT(0);
    return false;
  }

  //文字コードが全角か半角か判定
  bool isZenkaku = true;
  for( u32 tableIndex = 0 ; tableIndex < GFL_NELEMS(ENGLISH_STRCODE_TABLE) ; tableIndex++ )
  {
    if( ENGLISH_STRCODE_TABLE[tableIndex] == code )
    {//半角テーブルにヒット
      isZenkaku = false;
      break;
    }

    if( ENGLISH_STRCODE_TABLE[tableIndex] > code )
    {//これ以降は存在しない
      break;
    }
  }

  //ハングルは半角と混在してもいいので半角として判定する
  if( ( code >= 0xAC00 && code <= 0xD7AF ) ||
      ( code >= 0x3130 && code <= 0x318F )    )
  {
    isZenkaku = false;
  }

  if( index == 0 )
  {//最初の文字を記録
    *pZenkaku = isZenkaku;
  }
  else
  {
    if( *pZenkaku != isZenkaku )
    {//混在はNG
      return false;
    }
    if( index >= ( pml::MONS_NAME_LENGTH / 2 ) )
    {//7文字以上
      if( isZenkaku )
      {//7文字以上で全角はNG
        return false;
      }
    }
  }

  if ( (unicode_map[idMap] & (1 << (code % 8) ) ) != 0 )
  {//許可された文字コード
    return true;
  }

  if( CH_CODE_START <= code && code <= CH_CODE_END )
  {//繁体字、簡体字は↑の範囲にマッピングされている
    return true;
  }

  GFL_PRINT("illegal_char [%d]\n",code);
  //GFL_ASSERT( 0 );//@fix

  return false;
}

//---------------------------------------------------------------------------
/**
 * @brief  文字列チェック
 */
//---------------------------------------------------------------------------
PokemonValidation::NAME_CHECK_RESULT PokemonValidation::checkName( const gfl2::str::STRCODE * name, int length )
{
  int i;
  bool illegal_char = false;
  bool isZenkaku = false;
  for ( i = 0; i < length; ++ i )
  {
    if ( name[i] == gfl2::str::EOM_CODE ) break;
    if ( check_unicodemap( name[i] , i , &isZenkaku ) == false )
    {
      //printf("illegal_char[%d] %04x \n", i, name[i] );
      illegal_char = true;
    }
  }
  if ( i == 0 ) return NAME_CHECK_NG_BLANK;//名前が空白
  if ( illegal_char ) return NAME_CHECK_NG_INVALID;//文字コード不正
  if ( i == length ) return NAME_CHECK_NG_NO_END;//文字数が不正

  return NAME_CHECK_OK;
}


} // validation
} // netapp
#endif