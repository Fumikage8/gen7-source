//============================================================================================
/**
 * @file   JoinFestaPersonalDataManager.h
 *
 * @brief  JoinFestaパーソナルデータ管理情報
 *
 * @author ichiraku_katsuhiko
 */
//============================================================================================
#ifndef __JOIN_FESTA_PERSONAL_DATA_MANAGER_H__
#define __JOIN_FESTA_PERSONAL_DATA_MANAGER_H__
#pragma once

// ライブラリ
#include <base/include/gfl2_Singleton.h>
#include <util/include/gfl2_List.h>

// JoinFesta
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPersonalData.h"
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPersonalListener.h"


namespace NetAppLib {
namespace JoinFesta {


/* ----------------------------------------------------------------------------------------- */
/**
 * @brief   JoinFestaパーソナルデータ情報管理クラス。<p>
 *          [ともだち][VIP][とおりすがり]別のユーザー情報全てを保持する。<p>
 *          JoinFestaPersonalDataを管理することが主な役割。
 */
/* ----------------------------------------------------------------------------------------- */
class JoinFestaPersonalDataManager : public gfl2::base::Singleton<JoinFestaPersonalDataManager>
{
  GFL_FORBID_COPY_AND_ASSIGN(JoinFestaPersonalDataManager); //コピーコンストラクタ＋代入禁止

public:
  typedef gfl2::util::List<JoinFestaPersonalData*>            JoinFestaPersonalDataList;
  typedef gfl2::util::ListIterator<JoinFestaPersonalData*>    JoinFestaPersonalListIterator;

  static const u32   LIST_MAX = 50;  //!< １リストに登録できる最大件数
  //
  #if PM_DEBUG
  static bool     m_isDisplayLockDebugMode; //!< パーソナルデータロック表示デバッグモード有効フラグ
  #endif

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    コンストラクタ
   * @param    heap        内部で使用するヒープ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalDataManager( gfl2::heap::HeapBase* heap );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    デストラクタ
   */
  /* ----------------------------------------------------------------------------------------- */
  virtual ~JoinFestaPersonalDataManager(void);

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  初期化処理
   */
  /* ----------------------------------------------------------------------------------------- */
  void Initialize( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  終了処理
   */
  /* ----------------------------------------------------------------------------------------- */
  void Finalize( void );

#if PM_DEBUG
public:
  //! ジョインフェスタ人物用ヒープの最大値チェック
  void DEBUG_CheckMaxHeap();
#endif

public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JoinFestaパーソナルデータリスナーの設定
   *
   * @param[in]  listener 登録するリスナー
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetPersonalListener( JoinFestaPersonalListener* listener );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JoinFestaフレンドキーと関係性をもとに、パーソナルデータを取得する
   *
   * @param[in]  relation  検索対象となるパーソナルデータ種別
   * @param[in]  friendKey 検索対象となるJoinFestaフレンドキー
   *
   * @return  検出したパーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetPersonalData( JoinFestaDefine::E_JOIN_FESTA_RELATION relation, const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JoinFestaフレンドキーをもとに、パーソナルデータを取得する
   *
   * @param[in]  friendKey 検索対象となるJoinFestaフレンドキー
   *
   * @return  検出したパーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetPersonalData( const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータを登録する(通信用）
   *
   * @attention JoinFestaPersonalDataManager::JoinFestaPersonalDataListが更新されます。
   * @caution イテレータループ内でこの関数をコールしないでください。
   *
   * @param[in]   packet         更新判断に使用されるパケット
   * @param[in]   friendKey      JoinFestaフレンドキー
   * @param[in]   relation       自身との関係
   * @param[in]   isOnline       オンライン状態であればtrueを、オフラインであればfalseを指定
   * @param[in]   localFriendCode  ローカルフレンドコード（ビーコン受信時のみ格納される）
   * @param[out]  isNew          新規登録されたこと通知格納するための領域(NULL指定可能)
   * @param[out]  isUpdated      更新(パケットが保持情報と一致しない）されたことを通知格納するための領域(NULL指定可能)
   * @param[out]  isChangeOnline オフラインからオンラインになったことを通知格納するための領域(NULL指定可能）
   *
   * @return  更新・生成されたパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* UpdatePersonalDataWithPacket( const NetAppLib::JoinFesta::JoinFestaPacketData& packet,
                                                 const JoinFestaFriendKey& friendKey,
                                                 JoinFestaDefine::E_JOIN_FESTA_RELATION relation,
                                                 bool isOnline, const u64 localFriendCode,
                                                 bool* isNew=NULL, bool* isUpdated=NULL, bool* isChangeOnline=NULL );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定のパーソナルデータをもとに、パーソナルデータを登録する（セーブデータ展開用）
   *
   * @param[in]   srcPersonal  生成元となるパーソナルデータ
   * @param[in]   relation       自身との関係
   *
   * @return  更新・生成されたパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* UpdatePersonalDataWithPersonal( JoinFestaDefine::E_JOIN_FESTA_RELATION relation, const NetAppLib::JoinFesta::JoinFestaPersonalData& srcPersonal );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定のパーソナルデータをもとに、パーソナルデータを登録する
   *
   * @param[in]   srcPersonal  生成元となるパーソナルデータ
   *
   * @return  更新・生成されたパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* UpdatePersonalDataWithPersonal( const NetAppLib::JoinFesta::JoinFestaPersonalData& srcPersonal );


  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータリストを取得する
   *
   * @param[in]   relation 取得するリスト種別
   *
   * @return  パーソナルデータリストへのポインタ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalDataList* GetPersonalDataList( JoinFestaDefine::E_JOIN_FESTA_RELATION relation );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パーソナルデータをリストに追加する
   *
   * @param[in] relation 関係性
   * @param[in] personal パーソナルデータへのポインタ
   */
  /* ----------------------------------------------------------------------------------------- */
  void PushListWithPersonalData(  JoinFestaDefine::E_JOIN_FESTA_RELATION relation, JoinFestaPersonalData* personal );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パーソナルデータの関係性変更に伴うリストの更新処理
   *
   * @param[in] olsRelation 更新前の関係性
   * @param[in] newRelation 更新後の関係性
   * @param[in] personal    対象JoinFestaパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void ChangeListWithPersonalData( JoinFestaDefine::E_JOIN_FESTA_RELATION oldRelation,
                                   JoinFestaDefine::E_JOIN_FESTA_RELATION newRelation,
                                   JoinFestaPersonalData* personal );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   自身のパーソナルデータを取得する
   *
   * @return  自身のパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetMyData( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータリストからあふれるデータを削除する
   *
   * @param[in]   relation  削除対象のリスト種別
   *
   * @return  削除対象者が存在したらtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool DeleteOverPersonalData( JoinFestaDefine::E_JOIN_FESTA_RELATION relation );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータが未登録か判定
   *
   * @param[in]    relation    判定対象のリスト種別
   *
   * @return  1件もパーソナルデータが未登録ならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEmpty( JoinFestaDefine::E_JOIN_FESTA_RELATION relation ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータが未登録か判定
   *
   * @return  「ともだち」「VIP」「すれ違い」全てが未登録ならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEmpty( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータを最大登録しているか判定
   *
   * @param[in]    relation    判定対象のリスト種別
   *
   * @return  パーソナルデータが登録MAXならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsFull( JoinFestaDefine::E_JOIN_FESTA_RELATION relation ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータの登録数を取得
   *
   * @param[in]    relation    判定対象のリスト種別
   *
   * @return  登録数
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetCount( JoinFestaDefine::E_JOIN_FESTA_RELATION relation ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   オンラインのパーソナルデータが存在するか判定
   *
   * @param[in]  kind    判定対象のリスト種別
   *
   * @return  オンラインユーザーが存在するならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsExistOnlineUser( JoinFestaDefine::E_JOIN_FESTA_RELATION kind );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   オンラインのパーソナルデータが存在するか判定
   *
   * @return  「ともだち」「VIP」「すれ違い」で１人でもオンラインユーザーが存在するならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsExistOnlineUser( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション開催中のパーソナルデータが存在するか判定
   *
   * @return  「VIP」「Guest」で１人でも開催中ユーザーが存在するならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsExistOpenAttractionUser( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief ペナルティタイム発動による更新（RTC改ざん検知時）
   */
  /* ----------------------------------------------------------------------------------------- */
  void PenaltyTimeUpdate( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 日付更新におけるリセット処理
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetWithDaytime( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータの削除を禁止する
   *
   * @param[in]   friendKey 設定対象のJoinFestaフレンドキー
   */
  /* ----------------------------------------------------------------------------------------- */
  void LockPersonalData( const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータの削除禁止設定を解除する
   *
   * @param[in]   friendKey 設定対象のJoinFestaフレンドキー
   */
  /* ----------------------------------------------------------------------------------------- */
  void UnLockPersonalData( const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   全パーソナルデータの削除禁止設定を解除する
   */
  /* ----------------------------------------------------------------------------------------- */
  void UnLockPersonalData( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定のパーソナルデータリストをリセットする
   *
   * @param[in]   target リセット対象となるリスト
   */
  /* ----------------------------------------------------------------------------------------- */
  void ReleaseList( JoinFestaDefine::E_JOIN_FESTA_RELATION target );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   本体フレンドをリストとセーブから削除する
   */
  /* ----------------------------------------------------------------------------------------- */
  void RemoveCtrFriend();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   全パーソナルデータリストを解放する
   */
  /* ----------------------------------------------------------------------------------------- */
  void ReleaseAllList( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータをリストとセーブから削除する
   * @note    VIPだった場合、フィールドのデータ（フィールドリスト、リクルーター、P2P）に
   *          同一人物がいる場合ゲストに降格させる
   */
  /* ----------------------------------------------------------------------------------------- */
  void RemoveListAndSave( const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータ種別の変更
   *
   * @attention JoinFestaPersonalDataManager::JoinFestaPersonalDataListが更新されます。
   * @caution イテレータループ内でこの関数をコールしないでください。
   *
   * @note    セーブデータ領域「友達リスト」「VIPリスト」を更新する
   *
   * @param[in]   targetKind  変更目標種別
   * @param[in]   friendKey   変更対象ユーザーのJoinFestaフレンドキー
   *
   * @return  変更が行われたならtrueを指定
   */
  /* ----------------------------------------------------------------------------------------- */
  bool ChangePersonalRelation( JoinFestaDefine::E_JOIN_FESTA_RELATION targetKind, const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルデータリストから指定ユーザーを削除する
   *
   * @param[in]   targetKind  削除対象種別
   * @param[in]   friendKey   削除対象ユーザーのJoinFestaフレンドキー
   *
   * @note    該当ユーザーデータをリストから削除する。
   * @note    ただしヒープメモリからは解放しないので、返却されたポインタをGFL_DELETEにて解放すること。
   *
   * @return  リストから削除されたパーソナルデータへのポインタ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* RemovePersonalDataFromList( JoinFestaDefine::E_JOIN_FESTA_RELATION targetKind, const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief JoinFestaPersonalDataの削除
   *
   * @param[in,out] personal メモリから解放する対象となるJoinFestaPersonalData
   */
  /* ----------------------------------------------------------------------------------------- */
  void DeleteJoinFestaPersonalData( NetAppLib::JoinFesta::JoinFestaPersonalData* personal );

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief セーブデータ領域の更新をロックする
   */
  /* ----------------------------------------------------------------------------------------- */
  void LockSavedataUpdating( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief セーブデータ領域の更新をアンロックする
   */
  /* ----------------------------------------------------------------------------------------- */
  void UnlockSavedataUpdating( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief セーブデータ領域の更新ロック状態を判定
   *
   * @return セーブデータ領域への更新がロックされているならtrueを指定
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsSavedataUpdatingLock( void ) const;

public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   お誘いして来た人のフレンドキーを設定
   *
   * @param[in]   friendKey お誘いして来た人のJoinFestaフレンドキー
   * @param[in]   ticketId  お誘いパケットのチケットID
   *
   * @caution 下画面のお誘いOKボタンからのみ呼び出す事を想定しています。
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetInviteFriendKey( const JoinFestaFriendKey& friendKey, const u32 ticketId ); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   お誘い情報をリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetInviteFriendKey(); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   お誘いして来た人のフレンドキーを取得
   *
   * @return  friendKey お誘いして来た人のJoinFestaフレンドキー
   *
   * @caution ビーコンマッチングアプリからのみ呼び出す事を想定しています。
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaFriendKey GetInviteFriendKey() const; 
  u32 GetInviteTicketId() const; 

  
public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 全パーソナルデータでパーソナルイベントのリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetPersonalEvent( void );
  void ResetPersonalEvent( const JoinFestaDefine::E_JOIN_FESTA_RELATION relation );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 全パーソナルデータでアトラクションデータのリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetAttraction();


  //=============================================================================================
  //=============================================================================================
  // フィールドに出現するパーソナルデータリスト操作系
  //=============================================================================================
  //=============================================================================================
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   出現する人物リスト作成
   * @li      呼ぶ箇所は以下２つ
   *          １．フィールドからジョインフェスタに来た際
   *          ２．アトラクション終了時
   */
  /* ----------------------------------------------------------------------------------------- */
  void CreateFieldPersonalList();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   フィールド出現用の人物リスト解放
   */
  /* ----------------------------------------------------------------------------------------- */
  void ReleaseFieldPersonalList();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   フィールド出現用の人物リストに指定したパーソナル追加
   * @param[in]   srcPersonal  生成元となるパーソナルデータ
   * @return      登録したパーソナルデータのポインタ（追加出来なかった場合はNULL）
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* AddFieldPersonalList( const NetAppLib::JoinFesta::JoinFestaPersonalData& srcPersonal );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   フィールド出現用パーソナルデータリストを取得する
   *
   * @return  パーソナルデータリストへのポインタ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalDataList* GetFieldPersonalList();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JoinFestaフレンドキーをもとに、フィールド出現用パーソナルデータを取得する
   *
   * @param[in]  friendKey 検索対象となるJoinFestaフレンドキー
   *
   * @return  検出したパーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetFieldPersonalData( const JoinFestaFriendKey& friendKey );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトで話しかけた人のフレンドキーを設定
   * @param[in]   friendKey スクリプトで話しかけた人のJoinFestaフレンドキー
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetScriptTalkFriendKey( NetAppLib::JoinFesta::JoinFestaPersonalData *pPersonalData ); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトで話しかけた人のフレンドキーをリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetScriptTalkFriendKey(); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトで話しかけた人のパーソナルデータを取得する
   * @return  パーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetScriptTalkFieldPersonalData();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトでリストから選んだ人をセット
   * @param[in]   friendKey スクリプトで選んだ人のパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetScriptSelectPersonal( JoinFestaPersonalData* pJoinFestaPersonalData ); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトでリストから選んだ人をリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetScriptSelectPersonal(); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトでリストから選んだ人のパーソナルデータを取得する
   * @return  パーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* GetScriptSelectPersonal();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクルーターで呼んだ人をセット
   * @param[in]   pJoinFestaPersonalData 呼んだ人のパーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRecruiterPersonal( JoinFestaPersonalData* pJoinFestaPersonalData ); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクルーターで呼んだ人をリセット
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetRecruiterPersonal(); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクルーターで呼んだ人のパーソナルデータを取得する
   * @return  パーソナルデータコアデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData& GetRecruiterPersonal();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクルーターで呼んだ人を表示状態にする
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRecruiterVisibleOn();
  
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクルーターで呼んだ人を表示状態を取得する
   * @return  true:表示 false:非表示
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsRecruiterVisible() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   P2Pで最後に遊んだ人をセット
   * @param[in]   personalData パーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetLastP2pPersonal( NetAppLib::JoinFesta::JoinFestaPersonalData& personalData ); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   P2Pで最後に遊んだ人の専用イベント終了
   */
  /* ----------------------------------------------------------------------------------------- */
  void FinishLastP2pPersonalEvent(); 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   P2Pで最後に遊んだ人のパーソナルデータを取得する
   * @return  パーソナルデータコアデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData& GetLastP2pPersonal();


private:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パーソナルデータリストから線形検索を行う
   *
   * @param[in] friendKey 検索対象JoinFestaフレンドキー
   *
   * @return 発見したパーソナルデータ。見つからない場合はNULLを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData* FindFromList( const JoinFestaFriendKey& friendKey );

private:
  //
  JoinFestaPersonalData          m_my;                                          //!< 自身のパーソナルデータ
  //
  JoinFestaPersonalDataList      m_personalList[JoinFestaDefine::E_JOIN_FESTA_RELATION_MAX]; //!< パーソナルデータリスト
  bool                           m_isSaveLock;                                  //!< セーブデータ更新ロック
  //
  JoinFestaPersonalListener*     m_pListener;           //!< パーソナルデータ更新リスナー
  //
  JoinFestaFriendKey             m_inviteFriendKey;     //!< お誘いして来た人のフレンドキー
  u32                            m_inviteTicketId;      //!< お誘いパケットのチケットID
  //
  //
  JoinFestaPersonalDataList      m_fieldPersonalList;   //!< JFフィールドに出現するパーソナルデータリスト
  //
  JoinFestaPersonalData*         m_pScriptTalkPersonal;   //!< スクリプトで話しかけ中の人のパーソナル
  JoinFestaPersonalData          m_scriptSelectPersonal;  //!< スクリプトからリストで選んだ人のパーソナル
  JoinFestaPersonalData          m_recruiterPersonal;     //!< リクルーターで呼んだ人のパーソナル（実体が必要
  JoinFestaPersonalData          m_lastP2pPersonal;       //!< 最後にP2Pで遊んだ人のパーソナル（実体が必要
  bool                           m_isRecruiterVisible;    //!< リクルーターで呼んだ人物の表示フラグ

};




}    // JoinFesta
}    // NetAppLib

/** ---------------------------------------------------------------------
//! @brief  SINGLETONの前方参照宣言
// ---------------------------------------------------------------------*/
SINGLETON_INSTANCE_DECLARATION( NetAppLib::JoinFesta::JoinFestaPersonalDataManager);



#endif // __JOIN_FESTA_PERSONAL_DATA_MANAGER_H__
