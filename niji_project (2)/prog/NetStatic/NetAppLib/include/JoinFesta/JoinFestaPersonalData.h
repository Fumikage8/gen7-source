//============================================================================================
/**
 * @file    JoinFestaPersonalData.h
 *
 * @author ichiraku_katsuhiko
 */
//============================================================================================

#ifndef __JOIN_FESTA_PERSONAL_DATA_H__
#define __JOIN_FESTA_PERSONAL_DATA_H__
#pragma once

#if defined(GF_PLATFORM_CTR)
// ライブラリ
#include <nw/ut.h>
#include <nex.h>
#endif // GF_PLATFORM_CTR

// JoinFesta
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPacketDefine.h"
// PersonalEventDefine
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPersonalEvent/JoinFestaPersonalEventDefine.h"
// アトラクション定義
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaAttraction/JoinFestaAttractionDefine.h"

#include "Battle/Regulation/include/Regulation.h" // バトルルール
#include "Savedata/include/Record.h" // レコードID

// 前方宣言
namespace GameSys{
  class GameData;
}

namespace Savedata{
  class MyStatus;
}

namespace pml {
namespace pokepara{
  class PokemonParam;
}
}

// 前方宣言
namespace NetApp{
  namespace JoinFesta{
    struct JoinFestaDataTable;
  }
}

namespace App{
  namespace FinderStudio{
    namespace Static{
      struct PhotoData;
    }
  }
}

namespace NetAppLib {
namespace JoinFesta {


/* ----------------------------------------------------------------------------------------- */
/**
* @brief   JoinFestaパーソナルデータ用クラス
*
* @note    1ユーザのJoinFestaパーソナルデータを管理するクラス。<p>
*          JoinFestaFriendKeyをユニークインデックスとしてJoinFestaPerdonalDataManagerによって管理される。
*/
/* ----------------------------------------------------------------------------------------- */
class JoinFestaPersonalData
{
public:

  /*
   * @brief 時間情報
   */
  struct Date
  {
    u32 year:7;     //!< 年
    u32 month:4;    //!< 月
    u32 day:5;      //!< 日
    u32 hour:5;     //!< 時
    u32 minute:6;   //!< 分
    u32 half_sec:5; //!< 秒

    Date() :year(0),month(1),day(1),hour(0),minute(0),half_sec(0) {}
  };

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パーソナルコアデータ（ジョインフェスタの1人辺りのセーブデータ）
   *
   * @attention 他人の「JoinFestaPacketData」「PacketGameStatus」は変更してはならない。<p>
   *            ビーコン受信時に差異があれば新しいパケットが届いたと判断される。
   */
  /* ----------------------------------------------------------------------------------------- */
  typedef struct
  {
    // パケットのヘッダー 8byte
    PacketHeader                           m_header;               //!< ヘッダー
    // パケットの個人情報 104byte
    PacketPersonalInfo                     m_personalInfo;         //!< 個人情報
    //========================================================================================
    // 拡張情報 48x8 384byte
    PacketGameStatus1                      m_gameStatus1;          //!< 拡張情報1                     40byte
    PacketGameStatus2                      m_gameStatus2;          //!< 拡張情報2
    PacketGameStatus3                      m_gameStatus3;          //!< 拡張情報3
    PacketGameStatus4                      m_gameStatus4;          //!< 拡張情報4
    PacketGameStatus5                      m_gameStatus5;          //!< 拡張情報5
    PacketGameStatus6                      m_gameStatus6;          //!< 拡張情報6 // momijiで使用
    PacketGameStatus7                      m_gameStatus7;          //!< 拡張情報7 // momijiでは使用
    PacketGameStatus8                      m_gameStatus8;          //!< 拡張情報8 // 未使用
    //========================================================================================
    // クライアントで必要な情報 8byte
    Date                                   m_date;                 //!< 更新日時
    // レコードイベント系で必要な情報
    u8                                     m_eventRecordCategory[3];
    /// PERSONAL_EVENT_QUESTIONNAIRE_GUESS ズバリ当てろアンケートのID
    u8                                     m_eventQuestionId;
    u8                                     m_eventId;              //!< JoinFestaイベントID
    u8                                     m_eventSaveIndex;       //!< JoinFestaパーソナルイベントのどのインデックス使っているか
    u8                                     m_commRoute;            //!< 通信経路（CommRouteType定義）
    b8                                     m_isScriptListSeleted;  //!< スクリプトからのプレイヤーリストで選択されたかどうか 
    // レコードイベント系で必要な情報
    u8                                     m_eventRecordIndex[3];
    /// PERSONAL_EVENT_RECORD_INTRODUCTION レコード紹介で必要な情報
    u8                                     m_penaltyTime:1;        //!< GFNMCat[2524]対処。本体時間改ざん時にON。パケット受信時にOFFになる
    b8                                     m_newPhoto:1;           //!< ファインダースタジオの写真Newフラグ（新規写真受信すると1がたつ）
    u8                                     padding:6;
    //========================================================================================
    // 計 512byte
  }CoreData;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パーソナルサブデータ（ジョインフェスタの1人辺りのメモリのみのデータ）
   */
  /* ----------------------------------------------------------------------------------------- */
  typedef struct
  {
    // memo:自分のm_unionPacketは送信時に使われる。受信相手のm_unionPacketはm_unionPakcetTypeの情報が入っている。
    UnionPacket                                       m_unionPacket;        //!< 共有情報の保存用。
    u8/*E_JOIN_FESTA_UNION_PACKET_TYPE*/              m_unionPakcetType;    //!< 共有情報タイプ
    //
    u8                                                m_relation;               //!< 自身との関係
    //
    b8                                                m_isLock;                 //!< 削除対象から除外するようにロック。リークの危険性があるので、管理は慎重に。
    b8                                                m_isOnline;               //!< オンラインフラグ
    //
    u8                                                m_isAttractionAddPoint;   //!< アトラクション中専用：加点対象かどうか
    u8/*JoinFestaAttractionDefine::AppearanceState*/  m_attractionState;        //!< アトラクション中専用：出現状態
    b8                                                m_isDummyData;            //!< アトラクション中専用：ダミーデータかどうか
    u8                                                m_attractionEventId;      //!< アトラクション中専用：JoinFestaイベントID
    u8                                                m_attractionPokeType1;    //!< アトラクション中専用：ポケモンタイプ1（相性アトラクション）
    u8                                                m_attractionPokeType2;    //!< アトラクション中専用：ポケモンタイプ2（相性アトラクション）
    u16                                               m_attractionMonsNo;       //!< アトラクション中専用：ポケモン番号（タイプ探すアトラクション)
    //
    b8                                                m_isPresetData;           //!< プリセットNPCフラグ
    u8                                                m_presetDataId;           //!< プリセットNPCID
    u8                                                padding[2];
    //========================================================================================
    // 計 64byte
  }SubData;

public:
  static const u32 CORE_DATA_SIZE = sizeof(CoreData);

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    コンストラクタ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    コンストラクタ
   *
   * @param[in] packet パケットデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData( const JoinFestaPacketData& packet );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    コンストラクタ
   *
   * @param[in] coreData JoinFestaコアデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaPersonalData( const CoreData& coreData );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief    デストラクタ
   */
  /* ----------------------------------------------------------------------------------------- */
  virtual ~JoinFestaPersonalData(void);

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パーソナルデータのコピー
   *
   * @param[in]  src コピー元パーソナルデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void Copy( const JoinFestaPersonalData& src );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パーソナルコアデータのコピー
   *
   * @param[in]  src コピー元パーソナルコアデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void Copy( const JoinFestaPersonalData::CoreData& src );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パーソナルコアデータを取得する
   *
   * @param[out]  dst パーソナルコアデータ格納先アドレス
   */
  /* ----------------------------------------------------------------------------------------- */
  void GetCoreData( JoinFestaPersonalData::CoreData* dst ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  シリアライズ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SerializeCoreData( void* dst ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  デシリアライズ
   */
  /* ----------------------------------------------------------------------------------------- */
  void DeserializeCoreData( const void* data );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パケットデータを更新する(For Wireless)
   *
   * @param[in]  packet 更新元パケットデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetPacketData( const JoinFestaPacketData& packet );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パケットデータのオンラインフラグを設定する
   *
   * @param[in]  isOnline
   *             @arg true  オンライン状態に設定する
   *             @arg false オフラインならfalseを指定
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetOnline( bool isOnline );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パケットデータのオンラインフラグを取得する
   *
   * @retval true  オンライン
   * @retval false オフライン
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsOnline( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  ローカルフレンドコードを設定する
   *
   * @param[in]   localFriendCode  ローカルフレンドコード（ビーコンのみ）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetLocalFriendCode( const u64 localFriendCode );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  3DS本体フレンドフラグを取得する
   *
   * @return フレンドであればtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsCtrFriend( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  下位バージョンからの対戦を拒否するか判定
   *
   * @return 下位バージョンからの対戦を拒否するならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsLowerBattleReject( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  VIP関係にあるか判定
   *
   * @return VIP関係にあるのであればtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsRelatonVip( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  プレイヤー自身のデータか判定
   *
   * @return プレイヤー自身のデータであればtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsRelatonMe( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  パケットデータを更新する(For NEX)
   *
   * @param[in]  packet 更新元パケットデータ
   */
  /* ----------------------------------------------------------------------------------------- */
#if defined(GF_PLATFORM_CTR)
  bool SetPacketData( nn::nex::SubscriptionData& packet );
#endif // GF_PLATFORM_CTR

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief ROMバージョンを取得する
   *
   * @return ROMバージョン
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetRomVersion( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 着せ替えパラメータのROMバージョンNIJIフラグを取得
   *         MMCat[337]対処用に作成
   *
   * @return trueでniji
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsDressUpParamRomVersionNiji( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief リージョンコードを取得する
   *
   * @return リージョンコード
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetRegionCode( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 言語コードを取得する
   *
   * @return 言語コード
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetLanguageId( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 性別を取得する
   *
   * @return PM_FEMALE, PM_MALE
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetSex( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 通信経路を設定する
   *
   * @param 通信経路定義
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetCommRoute( JoinFestaScript::CommRouteType commRouteType );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 強制で通信経路を設定する
   *
   * @param 通信経路定義
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetCommRouteForce( JoinFestaScript::CommRouteType commRouteType );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 通信経路を取得する
   *
   * @return 通信経路定義
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaScript::CommRouteType GetCommRoute() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 最終更新日時を現在日時で更新する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetUpdateDate();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 最終更新日時を取得する
   *
   * @return 最終更新日時
   */
  /* ----------------------------------------------------------------------------------------- */
  Date GetUpdateDate() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 最終更新日時からの経過時間を取得する
   *
   * @return 経過時間(hour) MAX 99
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetUpdateElapsedDate() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief RTC改ざん時のペナルティフラグを立てる
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetPenaltyTime();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief パケットデータサイズを取得する
   *
   * @return パケットデータサイズ
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetPacketDataSize( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief  JoinFestaフレンドキーを取得する
   *
   * @return JoinFestaフレンドキー
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaFriendKey GetJoinFestaFriendKey( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットデータのコピーを出力する
   *
   * @param   dst コピー先パケットデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  void OutputPacketData( NetAppLib::JoinFesta::JoinFestaPacketData *dst ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットデータを指定のサブスクリプションデータにコピーを出力する
   *
   * @attention NEXの機能を使用するため、事前にNEXを初期化しておく必要がある
   *
   * @param[out]   dst コピー先サブスクリプションデータ
   */
  /* ----------------------------------------------------------------------------------------- */
#if defined(GF_PLATFORM_CTR)
  void OutputPacketData( nn::nex::SubscriptionData *dst );
#endif // GF_PLATFORM_CTR

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットデータの更新を友達以外にも通知するために
   *          MessageClientでメッセージ送信する対象者のPIDを取得する
   *
   * @param[in]   pidList メッセージ送信先PIDを格納するための配列
   *
   * @return  メッセージを通知するPID件数
   */
  /* ----------------------------------------------------------------------------------------- */
#if defined(GF_PLATFORM_CTR)
  u32 GetSendingMessageTarget( nn::nex::PrincipalID* pidList ) const;
#endif // GF_PLATFORM_CTR

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定のフレンドキーコードが自身のフレンドキーと一致するか判定
   *
   * @param[in]   friendKey 比較対象となるフレンドキー
   *
   * @return  指定フレンドキーが自身のフレンドキーと一致するならtrue
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsSameFriendKey( const JoinFestaFriendKey& friendKey ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   名前を取得する
   *
   * @return  名前
   */
  /* ----------------------------------------------------------------------------------------- */
  const gfl2::str::STRCODE* GetName( void ) const;
  void GetName( gfl2::str::STRCODE* dst ) const; 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   名前の不正チェック＆置換
   */
  /* ----------------------------------------------------------------------------------------- */
  void ReplaceName();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   簡易アドレス情報IDを取得する
   *
   * @return  簡易アドレス情報ID
   */
  /* ----------------------------------------------------------------------------------------- */
#if defined(GF_PLATFORM_CTR)
  nn::cfg::SimpleAddressId GetSimpleAddressId( void ) const;
#endif // GF_PLATFORM_CTR

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   着せ替え情報の取得
   *
   * @return  着せ替え情報
   */
  /* ----------------------------------------------------------------------------------------- */
  const ::System::DressUpParamSaveData* GetDressUpParam( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   着せ替えアイコン情報の取得
   *
   * @return  着せ替えアイコン情報
   */
  /* ----------------------------------------------------------------------------------------- */
  const Savedata::MyStatus::ICON_DATA* JoinFestaPersonalData::GetDressUpIcon( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プレイヤーユーザーとの関係性を取得
   *
   * @return  プレイヤーとの関係
   */
  /* ----------------------------------------------------------------------------------------- */
  NetAppLib::JoinFesta::JoinFestaDefine::E_JOIN_FESTA_RELATION GetRelation( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プレイヤーユーザーとの関係性を設定する
   *
   * @param[in]   relation プレイヤーとの関係
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRelation( NetAppLib::JoinFesta::JoinFestaDefine::E_JOIN_FESTA_RELATION relation );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プレイ状況を取得
   *
   * @return  プレイ状況定義
   */
  /* ----------------------------------------------------------------------------------------- */
  NetAppLib::JoinFesta::JoinFestaDefine::E_PLAY_SITUATION GetPlaySituation( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   PrincipalIDを取得する
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetPrincipalID( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   Beacon通信用識別IDを取得する
   *
   * @return  パケットの送信元を特定するための本体固有ID
   */
  /* ----------------------------------------------------------------------------------------- */
  bit64 GetTransferedID( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   削除対象から除外するようにロックする
   *
   * @caution ロックを解除しないとメモリリークの危険性があるので管理に注意
   */
  /* ----------------------------------------------------------------------------------------- */
  void Lock( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   削除禁止ロックの解除
   */
  /* ----------------------------------------------------------------------------------------- */
  void UnLock( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   削除禁止ロックの取得
   *
   * @return  ロック状態にあるならtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsLock( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JoinFestaフレンドキーをもとに、データの有効性を判断
   *
   * @return  設定されているJoinFestaフレンドキーが有効であればtrueを返却する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnable( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   登録内容をリセットする
   */
  /* ----------------------------------------------------------------------------------------- */
  void Reset( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief 日付更新におけるリセット処理
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetWithDaytime( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定パケットが登録済みパケットと同一か判定
   *
   * @param[in]   packet 判定対象パケット
   *
   * @return  同一パケットであればtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsSamePacket( const JoinFestaPacketData& packet );

public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットコマンド情報を初期化
   * @brief   (コマンドはJoinFestaDefine::E_JOIN_FESTA_PACKET_REQUEST_NONEに設定）
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetPacketRequest( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットの拡張情報を変更
   */
  /* ----------------------------------------------------------------------------------------- */
  void ChangePacketGameStatus( void );

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]バトル招待用リクエストを設定する
   *
   * @param[in]   battleRule     バトルルール
   * @param[in]   isWifi         Wifi接続ならtrue、Wireless接続ならfalseを指定
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestInvitingBattle( Regulation::BATTLE_RULE battleRule, bool isWifi );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]バトル招待キャンセル用リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestCancelingBattle( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]バトル開始用リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestStartingBattle( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [子]バトル招待に対する返答を設定する
   *
   * @param[in]   hostFriendKey  招待者のフレンドキー
   * @param[in]   ticketId       招待者発行のチケットＩＤ
   * @param[in]   isJoin         参加意思。trueなら参加、falseなら不参加
   * @param[in]   isRequlation   レギュレーションを満たしているならtrueを指定する。
   * @param[in]   battleRule     親からもらったバトルルール
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestRecieveBattle( const JoinFestaFriendKey& hostFriendKey, u32 ticketId, bool isJoin, bool isRequlation, u8 battleRule );

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]トレード招待用リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestInvitingTrade( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]トレード招待キャンセル用リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestCancelingTrade( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [親]トレード開始用リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestStartingTrade( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [子]トレード招待に対する返答を設定する
   *
   * @param[in]   hostFriendKey  招待者のフレンドキー
   * @param[in]   ticketId       招待者発行のチケットＩＤ
   * @param[in]   isJoin         参加意思。trueなら参加、falseなら不参加
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestRecieveTrade( const JoinFestaFriendKey& hostFriendKey, u32 ticketId, bool isJoin );

public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]P2P通信対戦プレイ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestPlayingP2pBattle( Regulation::BATTLE_RULE battleRule );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]P2P通信交換プレイ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestPlayingP2pTrade( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]ＧＴＳプレイ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestPlayingGTS( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]バトルスポットプレイ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestPlayingBattleSpot( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]ミラクル交換プレイ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestPlayingMiracleTrade( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]ゲーム情報更新リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestUpadateGameStatus( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ゲーム情報更新リクエスト(ジョインフェスタ外)を設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestUpadateGameStatusField( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JFのお店買い物中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestJoinFestaShop( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   JFの人に話しかけ中リクエストを設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestJoinFestaPersonal( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション情報を設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestAttraction( PacketAttraction& attractionInfo );



  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットのアッパー対応処理
   * @memo    パケット受信後のパーソナル更新後、P2Pでパーソナルデータデシリアライズ後に呼び出す
   */
  /* ----------------------------------------------------------------------------------------- */
  void UpperPacketCope();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   バトルフェスパケットデータの補間対応処理
   * @memo    nijiは存在しないデータなのでmomijiで補間する
   */
  /* ----------------------------------------------------------------------------------------- */
  void BattleFesPacketInterpolation();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ファインダースタジオの写真Newフラグ取得
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsNewPhoto() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ファインダースタジオの写真NewフラグをOFFにする
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetNewPhotoOff();
  void SetNewPhotoOffEx(const u32 otherCRC);   /**< CRCが一致すればNewPhotoFlagをOFFにする  */


public:
  #if PM_DEBUG
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来の遊び招待リクエストを設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureCommand( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来の共通パケットを設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureUnion( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来の定型文を設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFuturePattern( JoinFestaScript::PatternType patternType );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来の一押し施設を設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureRecommendFacilitiesId( void );
  void SetRequestFutureRecommendFacilitiesColor( void );
  void SetRequestFutureRecommendFacilitiesCharacterId( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来のフェスタランク設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureFesRank( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来のきせかえアイテム総数設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureHaveDressUpItemNum( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来のアンケート回答設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureQuestionnaireAnswer( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来の所持施設ID設定する（アッパーROM動作確認用）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFutureAllFacilitiesId( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]未来のポケダイアリーID設定する（アッパーROM動作確認用）
   * @param   sendPattern   送信パターン(0～6)
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestFuturePokeDiaryId( int sendPattern );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   [無]不正のファインダースタジオデータを設定する（動作確認用）
   * @param   pattern   送信パターン(0～19)
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRequestNgFinderStudio( int pattern );

  #endif


public:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ゲームパケット情報内のプロフィール情報部を設定する
   *
   * @param[in]   gameData  ゲームデータ情報
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetPacketGameStatusWithProfile( GameSys::GameData* gameData );

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクエストコマンドを取得する
   *
   * @return  設定されているリクエストコマンド（NetAppLib::JoinFesta::JoinFestaDefine::E_JOIN_FESTA_PACKET_REQUEST_KIND）
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaDefine::E_JOIN_FESTA_PACKET_REQUEST_KIND GetRequestCommand( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   送信するパケットの共有部分の種類を取得する
   *
   * @return  設定されているパケット共有種類（NetAppLib::JoinFesta::JoinFestaDefine::E_JOIN_FESTA_UNION_PACKET_TYPE）
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaDefine::E_JOIN_FESTA_UNION_PACKET_TYPE GetUnionPacketType( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信対戦申し込みの返答情報がパケットに入っているか
   *
   * @return  trueで入っている（GetPacketBattleRecieveで取得可能）
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnablePacketBattleRecieve() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信対戦申し込みの返答情報を取得する
   *
   * @attention 共用パケットデータの為、永続データではない
   *            必ずIsEnablePacketBattleRecieveでチェックしてから取得して下さい
   *
   * @return  対戦返答情報(PacketBattleRecieve)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketBattleRecieve& GetPacketBattleRecieve( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信対戦招待の返答情報がパケットに入っているか
   *
   * @return  trueで入っている（GetPacketBattleInviteで取得可能）
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnablePacketBattleInvite() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信対戦招待情報を取得する
   *
   * @attention 共用パケットデータの為、永続データではない
   *            必ずIsEnablePacketBattleInviteでチェックしてから取得して下さい
   *
   * @return  対戦招待情報(PacketBattleInvite)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketBattleInvite& GetPacketBattleInvite( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   メッセージ情報がパケットに入っているか
   *
   * @return  trueで入っている（GetPacketMessageで取得可能）
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnablePacketMessage() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   メッセージ情報を取得する
   *
   * @attention 共用パケットデータの為、永続データではない
   *            必ずIsEnablePacketMessageでチェックしてから取得して下さい
   *
   * @return  メッセージ情報(PacketMessage)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketMessage& GetPacketMessage( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信交換申し込みの返答情報がパケットに入っているか
   *
   * @return  trueで入っている（GetPacketTradeRecieveで取得可能）
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnablePacketTradeRecieve() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信交換申し込みの返答情報を取得する
   *
   * @attention 共用パケットデータの為、永続データではない
   *            必ずIsEnablePacketTradeRecieveでチェックしてから取得して下さい
   *
   * @return  交換返答情報(PacketTradeRecieve)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketTradeRecieve& GetPacketTradeRecieve( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信交換招待の返答情報がパケットに入っているか
   *
   * @return  trueで入っている（GetPacketTradeInviteで取得可能）
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEnablePacketTradeInvite() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信交換招待情報を取得する
   *
   * @attention 共用パケットデータの為、永続データではない
   *            必ずIsEnablePacketTradeInviteでチェックしてから取得して下さい
   *
   * @return  交換招待情報(PacketTradeInvite)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketTradeInvite& GetPacketTradeInvite( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信パケット内個人情報を取得する
   *
   * @return  通信パケット内個人情報(PacketPersonalInfo)
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketPersonalInfo& GetPacketPersonalInfo( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション情報を取得する
   *
   * @return  アトラクション情報
   */
  /* ----------------------------------------------------------------------------------------- */
  const PacketAttraction& GetPacketAttraction( void ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション情報を取得する
   *
   * @return  アトラクション情報
   */
  /* ----------------------------------------------------------------------------------------- */
  PacketAttraction* GetPacketAttractionPtr( void );

public:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信パケット内ゲームステータス情報を取得する
   *
   * @param[out]  dst 情報格納先へのポインタ
   *
   * @return  情報の取得に成功したならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool GetPacketGameStatus1( PacketGameStatus1* dst ) const;
  bool GetPacketGameStatus2( PacketGameStatus2* dst ) const;
  bool GetPacketGameStatus3( PacketGameStatus3* dst ) const;
  bool GetPacketGameStatus4( PacketGameStatus4* dst ) const;
  bool GetPacketGameStatus5( PacketGameStatus5* dst ) const;
  bool GetPacketPhotoData( App::FinderStudio::Static::PhotoData* dst ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信パケット内のレコード情報を取得する
   *
   * @param[in]  レコードカテゴリ
   * @param[in]  レコードカテゴリ内のインデックス
   *
   * @return  データ（-1でデータなし）
   */
  /* ----------------------------------------------------------------------------------------- */
  s32 GetRecordData( const u32 recordCategory, const u32 recordIndex ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信対戦リクエスト申請対象となるユーザーを追加
   *
   * @param[in]   isWifi       ＷＩＦＩモードとして設定するならtrueを指定
   * @param[in]   personal     追加ユーザーのJoinFestaフレンドキー配列
   * @param[in]   relation     追加ユーザーとの関係性配列
   * @param[in]   num          追加ユーザー数
   * @param[in]   isCommitFlag 確定参加者フラグをセットするならtrueを指定
   *
   * @return  登録に成功したならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool SetBattleRequestTargetUser( bool isWifi, const JoinFestaFriendKey* personal,
                                   JoinFestaDefine::E_JOIN_FESTA_RELATION* relation, u32 num, bool isCommitFlag );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信交換リクエスト申請対象となるユーザーを追加
   *
   * @param[in]   personal     追加ユーザーのJoinFestaフレンドキー
   * @param[in]   relation     追加ユーザーとの関係性
   * @param[in]   num          追加ユーザー数。0の場合は確定招待者はいないものとする
   *
   * @return  登録に成功したならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool SetTradeRequestTargetUser( const JoinFestaFriendKey& personal, JoinFestaDefine::E_JOIN_FESTA_RELATION relation, u32 num );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定ユーザーがバトル招待対象リストに存在するか
   *
   * @param[in]   personal 調査対象ユーザーのJoinFestaフレンドキー
   * @param[in]   relation 対象者と主催者との関係
   *
   * @return  ターゲットリストに登録されているならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsBattleInviteTargetUser( const JoinFestaFriendKey& personal, JoinFestaDefine::E_JOIN_FESTA_RELATION* relation=NULL ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定ユーザーがトレード招待対象リストに存在するか判定
   *
   * @param[in]   personal 調査対象ユーザーのJoinFestaフレンドキー
   *
   * @return  ターゲットリストに登録されているならtrueを返却
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsTradeInviteTargetUser( const JoinFestaFriendKey& personal ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケットのタイムスタンプを更新する
   */
  /* ----------------------------------------------------------------------------------------- */
  void UpdatePacketTimestamp( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   現在のタイムスタンプを取得する
   *
   * @return  現在時間(秒）
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetTimeStamp( void );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   自身のパーソナルデータをセットアップする
   *
   * @param[in]   gameData ゲームデータ情報
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupMyself( GameSys::GameData* gameData );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   チュートリアル中のダミーデータをセットアップする
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupTutorialDummyData( const u32 index, const NetApp::JoinFesta::JoinFestaDataTable* pDataTable );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   チュートリアル中のダミーイベント発動する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupTutorialDummyEvent();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   最後のP2Pやった人用イベントを発動する
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetLastP2PPersonalEvent();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   指定難易度のパーソナルイベントをセットする
   *
   * @param[in]  personalEventSaveIndex   セーブデータのパーソナルイベント配列のインデックス
   * @param[in]  personalEventType   発動するパーソナルイベント
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetPersonalEvent( const u32 personalEventSaveIndex, const JoinFestaScript::PersonalEventType personalEventType );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルイベントが発動しているかチェックする
   * @return  trueで発動している
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsPersonalEventEnable() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルイベントIDを取得
   * @return  PersonalEventID  JoinFestaPersonalEventDefine::PersonalEventType定義
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaScript::PersonalEventType GetPersonalEventId() const; 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルイベントの終了
   */
  /* ----------------------------------------------------------------------------------------- */
  void FinishPersonalEvent();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルイベントをリセットする（無効化）
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetPersonalEvent();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   レコード勝負のパーソナルイベントのレコードID取得
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetPersonalEventRecordID1() const;
  u8 GetPersonalEventRecordID2() const;
  u8 GetPersonalEventRecordID3() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   レコード紹介のパーソナルイベントのレコードカテゴリ取得
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetPersonalEventRecordCategory1() const;
  u8 GetPersonalEventRecordCategory2() const;
  u8 GetPersonalEventRecordCategory3() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ズバリ当てろアンケートのパーソナルイベントのアンケートID取得
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetPersonalEventQuestionId() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   定型文取得
   * @param   patternType   定型文種類
   * @return  msg_jf_phraseのラベルインデックス値
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetPattern( const JoinFestaScript::PatternType patternType ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   一押し施設IDを取得
   * @return  施設ID（全施設のユニークID）
   */
  /* ----------------------------------------------------------------------------------------- */
  u16 GetRecommendFacilitiesId() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   一押し施設カラーを取得
   * @return  色定義
   */
  /* ----------------------------------------------------------------------------------------- */
  u16 GetRecommendFacilitiesColor() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   一押し施設店員IDを取得
   * @return  店員ID
   */
  /* ----------------------------------------------------------------------------------------- */
  u16 GetRecommendFacilitiesCharacterId() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトからのプレイヤーリストで選択されたかどうか設定
   * @param   isSelected (true:選択された  false:選択されてない)
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetScriptListSelected( bool isSelected );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スクリプトからのプレイヤーリストで既に選択されたかどうか
   * @retval  false:選択されてない
   * @retval  true:既に選択された
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsScriptListSelected() const;

  //=============================================================================================
  //=============================================================================================
  // アトラクション用
  //=============================================================================================
  //=============================================================================================
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション開催中か判定する
   * @return  trueで開催中
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsOpenAttraction() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   同一アトラクションに参加しているかチェック
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsSameAttraction( const PacketAttraction& attractionInfo ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のデータをリセットする
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResetAttractionData();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中の出現状態をセット
   * @param[in]  attractionState
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetAttractionAppearanceState( JoinFestaAttractionDefine::AppearanceState attractionState );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中の出現状態を取得
   * @return  attractionState
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaAttractionDefine::AppearanceState GetAttractionAppearanceState() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のダミーデータをセットアップする
   * @param[in] dummyCount   何体目のダミーデータか
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupAttractionDummyData( const u8 dummyCount );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のダミーデータかどうか
   * @return  trueでダミーデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsAttractionDummyData() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクションの加点対象の人物かどうか設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetAttractionAddPointFlag();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクションの加点対象の人物かどうか取得
   * @return  trueで加点対象
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsAttractionAddPoint() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のダミーデータの着せ替えをセットアップ
   * @param   dressUpParam 着せ替え情報
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupAttractionDummyDataDressup( const poke_3d::model::DressUpParam& dressUpParam );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のダミーデータの言語をセットアップ
   * @param   languageId 言語ID
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupAttractionDummyDataLanguageId( const u8 languageId );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のダミーデータ定型文あいさつを再設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void ResettingAttractionDummyDataPatternHello();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中のに発動したふりをするパーソナルイベントをセットアップする
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupAttractionPersonalEventFake( const u8 fakePersonalEvent );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション用に指定したパーソナルイベントが発動しているかチェックする
   * @return  trueで発動している
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsAttractionPersonalEventEnable() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション用に指定したパーソナルイベントを取得
   *
   * @return  personalEventId   パーソナルイベントのID
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetAttractionPersonalEventFake() const; 

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中の一言ウィンドウに出るメッセージを取得
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetAttractionSingleWordMessage() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   タイプ相性アトラクションのポケモンタイプ設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetAttractionPokeType( u8 pokeType1, u8 pokeType2 );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   タイプ相性アトラクションのポケモンタイプ取得
   */
  /* ----------------------------------------------------------------------------------------- */
  void GetAttractionPokeType( u8& pokeType1, u8& pokeType2 ) const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ポケモンタイプサーチアトラクションのポケモン設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetAttractionMonsNo( u16 monsNo );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ポケモンタイプサーチアトラクションのポケモン取得
   */
  /* ----------------------------------------------------------------------------------------- */
  u16 GetAttractionMonsNo() const;

  //=============================================================================================
  //=============================================================================================
  // プリセットNPC用
  //=============================================================================================
  //=============================================================================================
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プリセットNPC用のダミーデータをセットアップする
   * @param[in] id    0～11
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupPresetNpcData( const u32 id );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プリセットNPC用の着せ替えをセットアップする
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupPresetNpcDressUp( const NetApp::JoinFesta::JoinFestaDataTable* pDataTable );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プリセットNPC用データかどうか
   * @return  trueでプリセットNPC用データ
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsPresetNpcData() const;

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プリセットNPC用データID取得
   * @return  id
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetPresetNpcId() const;


#if PM_DEBUG
public:
  //
  /**
   * @brief パケットバージョンをセットする（デバッグ用）
   *
   * @param version パケットバージョン
   */
  void SetVersion( u32 version ){ m_core.m_header.version = version; }

  //! 全情報を埋める
  void DEBUG_SetFullData();

  //! データダンプ
  void DEBUG_Dump();
#endif

private:
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   汎用通信コマンドの設定
   *
   * @param[in]   commandId 設定するコマンド
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetBasicPacketCommand( JoinFestaDefine::E_JOIN_FESTA_PACKET_REQUEST_KIND commandId );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パケット共有部分の種類の設定
   *
   * @param[in]   unionPakcetType E_JOIN_FESTA_UNION_PACKET_TYPE定義
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetUnionPacketType( JoinFestaDefine::E_JOIN_FESTA_UNION_PACKET_TYPE unionPakcetType );

private:
  CoreData              m_core;                   //!< パラメータ本体（セーブされる）
  SubData               m_sub;                    //!< パラメータサブ（メモリのみ）
};




}    // JoinFesta
}    // NetAppLib

#endif // __JOIN_FESTA_PERSONAL_DATA_H__
