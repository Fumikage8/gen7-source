//==============================================================================
/**
 * @file	JoinFestaAttractionManager.h
 * @brief	ジョインフェスタアトラクションマネージャ
 * @author	ichiraku_katsuhiko
 * @date	2015/11/09　12:47
 */
// =============================================================================
#ifndef __JOIN_FESTA_ATTRACTION_MANAGER_H__
#define __JOIN_FESTA_ATTRACTION_MANAGER_H__
#pragma once

#include <macro/include/gfl2_macros.h>
#include <types/include/gfl2_Typedef.h>
#include <base/include/gfl2_Singleton.h>
#include <str/include/gfl2_Str.h>
#include <str/include/gfl2_StrSys.h>
#include <util/include/gfl2_std_string.h>

// JoinFestaScript
#include "niji_reference_files/script/JoinFestaPawnDefine.h"

// アトラクション定義
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaAttraction/JoinFestaAttractionDefine.h"

// アトラクション用通信リスナー
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaAttractionListener.h"
// タイムアウト計測
#include "NetStatic/NetAppLib/include/Util/NetAppTimeout.h"

// パーソナルデータ通知リスナー
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPersonalListener.h"

#include <util/include/gfl2_Map.h>
#include "System/include/GameStrLen.h"
#include <NetStatic/NetAppLib/include/JoinFesta/JoinFestaNetDefine.h>

GFL_NAMESPACE_BEGIN(NetAppLib)
GFL_NAMESPACE_BEGIN(JoinFesta)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// 前方宣言
class JoinFestaPersonalData;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

/* ----------------------------------------------------------------------------------------- */
/**
 * @brief   ジョインフェスタアトラクション管理クラス
 *          開催・参加・終了が出来る。
 *          アトラクションに関するデータ取得が出来る
 */
/* ----------------------------------------------------------------------------------------- */
class JoinFestaAttractionManager : public gfl2::base::Singleton<JoinFestaAttractionManager>,
                                   public JoinFestaAttractionListener,
                                   public NetAppLib::JoinFesta::JoinFestaPersonalListener
{
  GFL_FORBID_COPY_AND_ASSIGN(JoinFestaAttractionManager);
private:

  /**
   *  @enum RequestState
   *  リクエスト状態
   */
  enum RequestState{
    REQUEST_NONE,     //!< リクエストなし
    REQUEST_THROUGH,  //!< リクエスト投げ中
    REQUEST_FINISH,   //!< リクエスト完了
  };

public:

  /**
   *  @enum RequestResult
   *  リクエスト結果定義
   */
  enum RequestResult{
    REQUEST_SUCCESS,      //!< 成功
    REQUEST_FAILURE,      //!< 失敗

    // 個別でエラーメッセージ出したい場合に専用定義追加する
  };

public:
  // コンストラクタ
  JoinFestaAttractionManager( gfl2::heap::HeapBase* pHeap );
  // デストラクタ
  virtual ~JoinFestaAttractionManager();

  //=============================================================================
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクションIDからアトラクションデータを取得
   *
   * @param[in]   AttractionId アトラクションID
   * @return   アトラクションデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  NetAppLib::JoinFesta::JoinFestaAttractionDefine::CoreData GetAttractionData( const JoinFestaScript::AttractionId attractionId );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション全体の初期化
   */
  /* ----------------------------------------------------------------------------------------- */
  void ClearAttraction();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション開催リクエスト
   *
   * @param[in]   AttractionId 開催するアトラクションID
   *
   * @note    IsEndRequestでリクエスト終了待ち
   * @note    GetRequestResultで結果取得
   */
  /* ----------------------------------------------------------------------------------------- */
  void OpenRequest( const JoinFestaScript::AttractionId attractionId );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション参加
   *
   * @param[in]  person 開催者（参加者）のパーソナルデータ
   *
   * @note    IsEndRequestでリクエスト終了待ち
   * @note    GetRequestResultで結果取得
   */
  /* ----------------------------------------------------------------------------------------- */
  void JoinRequest( const NetAppLib::JoinFesta::JoinFestaPersonalData& person );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション終了リクエスト
   *
   * @note    IsEndRequestでリクエスト終了待ち
   * @note    GetRequestResultで結果取得
   */
  /* ----------------------------------------------------------------------------------------- */
  void FinishRequest();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクエスト終了待ち
   * @retval  true:リクエスト終了
   * @retval  false:リクエスト処理中  
   *
   * @note    GetRequestResultで結果取得
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsEndRequest();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リクエスト結果取得
   * @return  RequestResult リクエスト結果
   */
  /* ----------------------------------------------------------------------------------------- */
  RequestResult GetRequestResult();
    
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   制限時間カウントダウン開始
   */
  /* ----------------------------------------------------------------------------------------- */
  void TimeCountDownStart();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション中かどうか
   * @return  trueでアトラクション中
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsPlaying();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プレイ中のアトラクションIDを取得
   * @return  JoinFestaScript::AttractionId
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaScript::AttractionId GetPlayAttractionId();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   プレイ中のアトラクションIDからアトラクションデータを取得
   * @return   アトラクションデータ
   */
  /* ----------------------------------------------------------------------------------------- */
  NetAppLib::JoinFesta::JoinFestaAttractionDefine::CoreData GetPlayAttractionData();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   強制リタイアチェック
   * @return  trueで強制リタイア
   *
   *          GFNMCat[275][2366]対処用
   */
  /* ----------------------------------------------------------------------------------------- */
  bool CheckForceRetire();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リタイアリクエストフラグON
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetRetireRequest();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   リタイアリクエストフラグ取得
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsRetireRequest();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   通信エラーでリタイアしたフラグ取得
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsErrorRetire();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   自分のスコア加算
   */
  /* ----------------------------------------------------------------------------------------- */
  void AddScore();

#if PM_DEBUG
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：自分のスコア設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void DEBUG_SetScore( u16 score );
#endif

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   自分のスコア取得
   * @return  自分のスコア
   */
  /* ----------------------------------------------------------------------------------------- */
  u16 GetMyScore();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   トータルスコア取得
   * @return  トータルスコア（自分を含む）
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetTotalScore();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   参加人数取得
   * @return  参加人数（自分を含む）
   */
  /* ----------------------------------------------------------------------------------------- */
  u8 GetMemberNum();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション残り時間取得
   * @return  残り時間（フレーム値）
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetTimeLimitFrame();

#if PM_DEBUG
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：残り時間を設定する
   */
  /* ----------------------------------------------------------------------------------------- */
  void DEBUG_SetTimeLimit( u32 timeLimitFrame );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：残り時間カウントの有効化・無効化
   * @param   trueで有効化 falseで無効化
   */
  /* ----------------------------------------------------------------------------------------- */
  void DEBUG_SetTimeLimitEnable( bool isEnable );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：残り時間カウントの有効化・無効化
   * @return   trueで有効化 falseで無効化
   */
  /* ----------------------------------------------------------------------------------------- */
  bool DEBUG_IsTimeLimitEnable(){ return m_isTimeLimitStart; }

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：ダミー送信用イベント起動フラグ設定
   */
  /* ----------------------------------------------------------------------------------------- */
  void DEBUG_SetIsDummySendEvent( bool flag ){ m_debugIsDummySend = flag; }

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：ダミー送信用イベント起動
   * @param   trueで起動する
   */
  /* ----------------------------------------------------------------------------------------- */
  bool DEBUG_IsDummySendEventCheck(){ return m_debugIsDummySend; }

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：他人のアトラクション残り時間減らすかどうか
   * @param   flag trueで減らす
   */
  /* ----------------------------------------------------------------------------------------- */
  void DEBUG_SetOtherTimeLimitEnable( bool flag ){ m_debugOtherTimeLimitEnable = flag; }

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   デバッグ用：ダミー送信用イベント起動
   * @param   trueで減らす
   */
  /* ----------------------------------------------------------------------------------------- */
  bool DEBUG_IsOtherTimeLimitEnable(){ return m_debugOtherTimeLimitEnable; }

#endif

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション結果データ取得
   * @return  ResultData
   */
  /* ----------------------------------------------------------------------------------------- */
  JoinFestaAttractionDefine::ResultData& GetResultData();

  /************************************************************************/
  /* アンケートアトラクション用                                           */
  /************************************************************************/
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクションIDと回答Noから、回答メッセージのMSGID取得
   * @return  jf_questiondata.mstxtのメッセージID
   */
  /* ----------------------------------------------------------------------------------------- */
  u32 GetQuestionAnswerMsgId( const JoinFestaScript::AttractionId attractionId, u32 answerNo );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクションIDと回答Noから、加点対象の回答なのかチェック
   * @return  trueで加点対象
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsQuestionAnswerScoreUp( const JoinFestaScript::AttractionId attractionId, u32 answerNo );

  /************************************************************************/
  /* カイリキーライドアトラクション用                                     */
  /************************************************************************/
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   パーソナルから、加点対象なのかチェック
   * @return  trueで加点対象
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsKairikyRideScoreUp( const NetAppLib::JoinFesta::JoinFestaPersonalData* pTargetPerson );

  /************************************************************************/
  /* ケンタロスライドアトラクション用                                     */
  /************************************************************************/
  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ケンタロスライドで使用する壊せる岩のクリア（非表示）
   */
  /* ----------------------------------------------------------------------------------------- */
  void ClearKentarosuRideRockBreaker();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ケンタロスライドで使用する壊せる岩のセット（表示）
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetKentarosuRideRockBreaker();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   ケンタロスライドで使用する壊せる岩を全て壊したかチェック
   */
  /* ----------------------------------------------------------------------------------------- */
  bool IsKentarosuRideRockBreakerAllBreak();

  /************************************************************************/
  /* 
   * 以下、システム用メソッド。
   *                                                                 */
  /************************************************************************/

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   更新
   */
  /* ----------------------------------------------------------------------------------------- */
  void Update();

  //==========================================================================================
  // JoinFestaAttractionListener
  //==========================================================================================
  //------------------------------------------------------------------
  /**
   * @brief アトラクション参加成功
   * @param[out]  残り時間（フレーム値）
   */
  //------------------------------------------------------------------
  virtual void OnJoinSuccess( u32 timeLimitFrame );

  //------------------------------------------------------------------
  /**
   * @brief アトラクション参加失敗
   */
  //------------------------------------------------------------------
  virtual void OnJoinFailed( void );

  //------------------------------------------------------------------
  /**
   * @brief アトラクション作成成功
   */
  //------------------------------------------------------------------
  virtual void OnOpenSuccess( void );

  //------------------------------------------------------------------
  /**
   * @brief アトラクション作成失敗
   */
  //------------------------------------------------------------------
  virtual void OnOpenFailed( void );

  //------------------------------------------------------------------
  /**
  * @brief アトラクション終了成功
  */
  //------------------------------------------------------------------
  virtual void OnExitSuccess( void );

  /*****************************************************************/
  /* JoinFestaPersonalListener                                     */
  /*****************************************************************/
  //------------------------------------------------------------------
  /**
   * @brief ジョインフェスタパーソナルデータ追加イベント通知
   *
   * @param[in]  person  追加されたパーソナル情報
   */
  //------------------------------------------------------------------
  virtual void OnAddJoinFestaPerson( const NetAppLib::JoinFesta::JoinFestaPersonalData& person );

  //------------------------------------------------------------------
  /**
  * @brief ジョインフェスタパーソナルデータ更新イベント通知
  *
  * @param[in]  person         更新されたパーソナル情報
  * @param[in]  isUpdate パケット更新フラグ
  */
  //------------------------------------------------------------------
  virtual void OnUpdateJoinFesatPerson( const NetAppLib::JoinFesta::JoinFestaPersonalData& person, bool isUpdate );

private:

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション開始処理
   */
  /* ----------------------------------------------------------------------------------------- */
  void StartAttraction();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   トータルスコア計算
   */
  /* ----------------------------------------------------------------------------------------- */
  void CalcTotalScore();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スコア情報リスト更新
   * @param[in]  person         パーソナル情報
   */
  /* ----------------------------------------------------------------------------------------- */
  void UpdateScoreList( const NetAppLib::JoinFesta::JoinFestaPersonalData& person );

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   スコアの初期化
   */
  /* ----------------------------------------------------------------------------------------- */
  void ClearScore();

  /* ----------------------------------------------------------------------------------------- */
  /**
   * @brief   アトラクション結果データセットアップ
   */
  /* ----------------------------------------------------------------------------------------- */
  void SetupResultData();

private:
  RequestState                              m_requestState;       //! リクエスト状態
  RequestResult                             m_requestResult;      //! リクエスト結果
  JoinFestaScript::AttractionId             m_playAttractionId;   //! プレイ中のアトラクションID
  u16                                       m_privateScore;       //! 個人スコア
  u32                                       m_totalScore;         //! トータルスコア
  gfl2::util::Map<u64,JoinFestaAttractionDefine::ScoreInfo>  m_scoreList;          //! スコア情報リスト
  u32                                       m_timeLimitFrame;     //! 制限時間（フレーム値）
  bool                                      m_isTimeLimitStart;   //! 制限時間カウントダウン開始フラグ
  bool                                      m_retireRequest;      //! リタイアリクエストフラグ
  bool                                      m_isErrorRetire;      //! 通信エラーでリタイアしたフラグ
  JoinFestaAttractionDefine::ResultData     m_resultData;         //! アトラクション結果データ

  // ケンタロスライド用
  u8  m_saveRockDispNum;                                          //!< 表示している岩を保存して、壊れた時に判定する

  u64 m_lastAttractionUpdateMsec;                                 //!< アトラクション更新用

#if PM_DEBUG
  // デバッグ用
  bool    m_debugIsDummySend;
  bool    m_debugOtherTimeLimitEnable;    // 他人のアトラクション残り時間減らすかどうか
#endif
};

GFL_NAMESPACE_END(JoinFesta)
GFL_NAMESPACE_END(NetAppLib)

/** ---------------------------------------------------------------------
//! @brief  SINGLETONの前方参照宣言
// ---------------------------------------------------------------------*/
SINGLETON_INSTANCE_DECLARATION( NetAppLib::JoinFesta::JoinFestaAttractionManager);



#endif // __JOIN_FESTA_ATTRACTION_MANAGER_H__
