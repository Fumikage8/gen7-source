//============================================================================================
/**
 * @file		app_util_ScrollBar.h
 * @brief		スクロールバーの簡易処理
 * @author	Hiroyuki Nakamura
 * @date		11.11.10
 */
//============================================================================================
#ifndef __APP_UTIL_SCROLL_BAR_H__
#define __APP_UTIL_SCROLL_BAR_H__
#pragma	once

#include <AppLib/include/Tool/app_tool_ScrollBar.h>

#include <Layout/include/gfl2_GraphicsType.h>

#include <heap/include/gfl2_Heap.h>
#include <fs/include/gfl2_fs.h>
#include <GameSys/include/GameManager.h>

#if 0
// 前方宣言
GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(tool)
class PaneList;
GFL_NAMESPACE_END(tool)
GFL_NAMESPACE_END(app)
#endif

GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(util)

//--------------------------------------------------------------------------------------------
/**
 * @brief	スクロールバー
 */
//--------------------------------------------------------------------------------------------
class ScrollBar {
	GFL_FORBID_COPY_AND_ASSIGN( ScrollBar );

public:
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief	リクエスト
	 */
	//--------------------------------------------------------------------------------------------
	typedef enum {
		REQ_BAR_ON = 0,		//!< バー表示
		REQ_BAR_OFF,			//!< バー非表示
		REQ_BAR_IN,				//!< バーフェードイン（アルファブレンド）
		REQ_BAR_OUT,			//!< バーフェードアウト（アルファブレンド）
	}REQUEST;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief	セットアップパラメータ
	 */
	//--------------------------------------------------------------------------------------------
  struct SETUP_PARAM
  {
    gfl2::heap::HeapBase * heap;                //!< ヒープ
    app::tool::ScrollBar::ScrollDirection dir;  //!< スクロールの向き
    u32 max;                                    //!< スクロール最大値

    // @note  以下、[set1]か[set2]を設定してください
    // [set1]
    gfl2::lyt::LytWk * lytwk;                   //!< レイアウトワーク ( NULLの場合、[set2]を参照します )
    gfl2::lyt::LytMultiResID res_id;            //!< リソースID
    gfl2::lyt::LytPaneIndex parts_index;        //!< 本体の部品ペインのインデックス
    gfl2::lyt::LytPaneIndex mark_index;         //!< ツマミ部分のペインのインデックス
    gfl2::lyt::LytPaneIndex top_index;          //!< スクロール値最小位置のペインのインデックス
    gfl2::lyt::LytPaneIndex bottom_index;       //!< スクロール値最大位置のペインのインデックス
    // [set2]
    gfl2::lyt::LytPane * parts_pane;            //!< 本体の部品ペイン
    gfl2::lyt::LytPane * mark_pane;             //!< ツマミ部分のペイン
    gfl2::lyt::LytPane * top_pane;              //!< スクロール値最小位置のペイン
    gfl2::lyt::LytPane * bottom_pane;           //!< スクロール値最大位置のペイン
  };

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
   *
   * @param   param   セットアップパラメータ
	 */
	//--------------------------------------------------------------------------------------------
  ScrollBar( const SETUP_PARAM * param );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	~ScrollBar();

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		描画
	 *
	 * @param		val		現在の値
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Draw( f32 val );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		スクロール最大値を変更
	 *
	 * @param		scroll_max	スクロール最大値
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void ChangeParam( u32 scroll_max );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リクエスト発行
	 *
	 * @param		req		リクエスト
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetRequest( REQUEST req );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief   リクエスト取得
	 *
	 * @param   none
	 *
	 * @return  設定されているリクエスト
	 */
	//--------------------------------------------------------------------------------------------
	REQUEST GetRequest( void ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   描画判定
   *
   * @param   none
   *
   * @retval  true  リクエストが(REQ_BAR_ON,  REQ_BAR_IN)
   * @retval  false リクエストが(REQ_BAR_OFF, REQ_BAR_OUT)
   */
  //--------------------------------------------------------------------------------------------
	bool IsVisible( void ) const;

#if 0
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   自動フェード更新
   *
   * @param   pane_list 参照するペインリスト
   * 
   * @note  pane_listをによるscroll_barのフェード処理を
   *        本関数にまかせることができます。
   *        pane_listを使っている箇所は独自処理がないかぎり
   *        この関数を使用することが推奨です。
   *
   */
  //--------------------------------------------------------------------------------------------
  void UpdateAutoFade( const app::tool::PaneList *pane_list );
#endif

  //--------------------------------------------------------------------------------------------
  /**
   * @brief 表示設定  （リクエストのON,OFFも効かない完全に表示・表示切り替えです）
   *
   * @param flag  true表示  false非表示
   */
  //--------------------------------------------------------------------------------------------
  void SetDrawEnable( bool flag );
  
  //--------------------------------------------------------------------------------------------
  /**
   * @brief フレームを設定
   *
   * @param frame デフォルトはFRAMEMODE_DEFAULT
   */
  //--------------------------------------------------------------------------------------------
  void SetFrameMode( GameSys::FrameMode frame );

#if 0
  //--------------------------------------------------------------------------------------------
  /**
   * @brief バータイプ取得
   *
   * @param バータイプ ( 縦/横 )
   */
  //--------------------------------------------------------------------------------------------
  app::tool::ScrollBar::ScrollDirection GetScrollDirection(void) const { return dir; }
#endif

  //--------------------------------------------------------------------------------------------
  /**
   * @brief 大本のスクロールバーを取得
   *
   * @return スクロールバー
   */
  //--------------------------------------------------------------------------------------------
  app::tool::ScrollBar * GetScrollBar( void ) const;


private:
	app::tool::ScrollBar * pScrollBar;					//!< スクロールバー
	REQUEST request;	//!< リクエスト
	f32	max;					//!< スクロール最大値
	f32	alpha;				//!< アルファ値
	f32	fadeSpeed;		//!< フェード速度

  static const int next_request_max = 2;
  REQUEST next_request[ next_request_max ];
  u32 request_num;
  bool is_request;
  bool is_visible;
  f32 alpha_speed;
};

GFL_NAMESPACE_END(util)
GFL_NAMESPACE_END(app)

#endif //__APP_UTIL_SCROLL_BAR_H__
