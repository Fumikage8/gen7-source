//============================================================================================
/**
 * @file		app_tool_panelist.h
 * @brief		ペインリスト処理
 * @author	Hiroyuki Nakamura
 * @date		11.10.28
 */
//============================================================================================
#if !defined( APP_TOOL_PANELIST_H_INCLUDED )
#define APP_TOOL_PANELIST_H_INCLUDED

#pragma once

#include <Layout/include/gfl2_Layout.h>
#include <Heap/include/gfl2_Heap.h>

#include <AppLib/include/Tool/app_tool_ScrollValue.h>
#include <AppLib/include/Tool/app_tool_ButtonManager.h>
#include <AppLib/include/Tool/app_tool_MenuCursor.h>

#include <GameSys/include/GameFrameMode.h>


GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(tool)

//--------------------------------------------------------------------------------------------
/**
 * @brief	ペインリスト
 */
//--------------------------------------------------------------------------------------------
class PaneList
{
	GFL_FORBID_COPY_AND_ASSIGN( PaneList );

public:
	//! ペインデータ
	struct PANE_DATA
  {
    gfl2::lyt::LytPane * base;        //!< 親ペイン
    gfl2::lyt::LytTextBox * text;     //!< テキストボックスペイン
    gfl2::lyt::LytBounding * bound;   //!< 境界ペイン
    gfl2::lyt::LytPane * cursor_pos;  //!< カーソル位置の基準となるペイン
		u32 holdAnime;				//!< タッチ時のアニメ
		u32 releaseAnime;			//!< リリース時のアニメ
		u32 cancelAnime;			//!< キャンセル時のアニメ
		u32 selectAnime;			//!< キー選択アニメ
	};

	//! コールバッククラス
	class CallBack {
	public:
		//--------------------------------------------------------------------------------------------
		/**
		 * @brief		カーソル移動時のコールバック関数
		 *
		 * @param		work				外部から指定されたワーク
		 * @param		cur_pane		ペインデータ
		 * @param		pane_index	カーソル位置のペインデータインデックス
		 * @param		pos					カーソル位置
		 *
		 * @return	none
		 */
		//--------------------------------------------------------------------------------------------
		virtual void CallBack_CursorMove( void * work, const PANE_DATA * cur_pane, u32 pane_index, u32 pos ) = 0;
		//--------------------------------------------------------------------------------------------
		/**
		 * @brief		カーソルを非表示にするコールバック関数
		 *
		 * @param		work				外部から指定されたワーク
		 * @param		pane				ペインデータ
		 * @param		pane_index	カーソル位置のペインデータインデックス
		 * @param		pos					カーソル位置
		 *
		 * @return	none
		 */
		//--------------------------------------------------------------------------------------------
		virtual void CallBack_CursorOff( void * work, const PANE_DATA * pane, u32 pane_index, u32 pos ) = 0;
		//--------------------------------------------------------------------------------------------
		/**
		 * @brief		リストの項目を描画するコールバック関数
		 *
		 * @param		work				外部から指定されたワーク
		 * @param		pane				ペインデータ
		 * @param		pane_index	項目位置のペインデータインデックス
		 * @param		pos					項目位置
		 *
		 * @return	none
		 */
		//--------------------------------------------------------------------------------------------
		virtual void CallBack_ListWrite( void * work, const PANE_DATA * pane, u32 pane_index, u32 pos ) = 0;
		//--------------------------------------------------------------------------------------------
		/**
		 * @brief		入れ替え用コールバック関数
		 *
		 * @param		work	外部から指定されたワーク
		 * @param		pos1	入れ替え位置１
		 * @param		pos2	入れ替え位置２
		 *
		 * @return	none
		 */
		//--------------------------------------------------------------------------------------------
		virtual void CallBack_ItemChange( void * work, u32 pos1, u32 pos2 ) = 0;
	};

	static const u32 CALLBACK_PANE_NONE = 0xffffffff;		//!< コールバックへ引き渡すペインが存在しない

	static const u32 SE_NONE = 0xffffffff;		//!< SEなし

	//! ページスキップモード
	enum PageSkipMode
  {
		PAGE_SKIP_NONE = 0,			//!< ページ送り無効
		PAGE_SKIP_LR_KEY,				//!< 左右キーでページ送り
		PAGE_SKIP_LR_BUTTON,		//!< LRボタンでページ送り
	};

	//! セットアップパラメータ
	struct SETUP_PARAM
  {
		gfl2::heap::HeapBase * heap;  //!< ヒープ

		gfl2::lyt::LytWk * pLytWk;    //!< レイアウトワーク
		const PANE_DATA * paneList;   //!< ペインデータ
		u32	paneListMax;              //!< ペインデータ数

		u32	valMax;					//!< 実際に使用するリストの項目数（ペインの数ではない）
		u32	listPosMax;			//!< カーソル動作範囲（画面にはみ出る部分を除いた実際に入るリストの数）
		u32	listPos;				//!< 初期カーソル位置 ( 0 〜 listPosMax-1 の範囲 )
		f32	listScroll;			//!< 初期スクロール位置 ( 0 〜 valMax-listPosMax-1 の範囲 )
                        //   一番下にカーソルを位置させた状態で始めたいのであれば、listScroll+listposが
                        //   valMax-1になるようにする設定する。

		f32	defPY;					//!< ペインのデフォルトY座標 ( listPos = 0 の位置のペイン座標 )
                        //   この座標で指定した場所にあるペインが描画開始位置のペインになる
		f32	defSX;					//!< ペインのXサイズ(レイアウトデディターで厳密に確認）
		f32	defSY;					//!< ペインのYサイズ(レイアウトデディターで厳密に確認）

		s32	writeOffsetY;		//!< 上方向の表示限界(リストが半分はみ出ているなどの場合は-1, きっちり画面に入っている場合は0)

    gfl2::lyt::LytPane * listStartPane;   //!< 項目基準位置のペイン ( NULLの場合、動作時にプライオリティ変更を行わない )

    CallBack * cbFunc;	//!< コールバック関数
		void * cbWork;			//!< コールバック関数に渡すワーク

		gfl2::ui::DeviceManager * uiDevMan;		//!< UIデバイスマネージャ
		app::tool::MenuCursor * menuCursor;		//!< カーソル
	};

	//! 処理結果
	enum Result
  {
		RET_NONE = 0,						//!< 動作なし

		RET_LIST_UP,						//!< 上へスクロール中
		RET_LIST_DOWN,					//!< 下へスクロール中
		RET_LIST_PAGE_UP,				//!< 上へページ送り
		RET_LIST_PAGE_DOWN,			//!< 下へページ送り

		RET_LIST_TOUCH,					//!< タッチ処理中
		RET_LIST_AUTO_SCRILL,		//!< オートスクロール中

		RET_LIST_SELECT,				//!< 項目選択
		RET_LIST_CANCEL,				//!< キャンセル ( Bボタン )

		RET_LIST_CATCH,					//!< 項目キャッチ

		RET_LIST_PROCESSING,		//!< なんらかの処理を実行中 ( Aボタンアニメなど )
	};

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		リスト外からはみ出している時のスクロールとカーソル位置補正処理
   *
   * @param		pOutput       セットアップに設定したパラメータからlistPos/listScrollを補正して出力
   */
  //--------------------------------------------------------------------------------------------
  static void CommonAdjustmentListScrollAndPos( SETUP_PARAM* pOutput );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 *
	 * @param		setup				セットアップデータ
	 * @param		frameMode		動作フレームレート ※デフォルト = gamesystem::FRAMEMODE_DEFAULT
	 */
	//--------------------------------------------------------------------------------------------
	PaneList( const SETUP_PARAM * setup, bool is_effect = false, GameSys::FrameMode frameMode = GameSys::FRAMEMODE_DEFAULT );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	~PaneList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetConfig
   * @brief   動作関連を設定
   * @date    2015.03.17
   *
   * @param   skip            リストのスキップモード
   * @param   is_loop         true = リストがループする
   * @param   is_catch        true = 項目をキャッチ可能
   * @param   is_key_select   true = Aボタンで決定可能
   * @param   is_key_cancel   true = Bボタンでキャンセル可能
   *
   * @note  デフォルト設定
   *          スキップモード = 左右キー
   *                  ループ = true
   *                キャッチ = false
   *                 Aボタン = true
   *                 Bボタン = false
   */
  //-----------------------------------------------------------------------------
  void SetConfig( PageSkipMode skip, b8 is_loop, b8 is_catch, b8 is_key_select, b8 is_key_cancel );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetSE
   * @brief   SEを設定
   * @date    2015.03.17
   *
   * @param   move    カーソル移動時のSE
   * @param   select  決定時のSE
   * @param   cancel  キャンセル時のSE
   */
  //-----------------------------------------------------------------------------
  void SetSE( u32 move, u32 select, u32 cancel );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		十字キー有効/無効設定
	 *
	 * @param		flg		true = 有効
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetCrossKeyEnable( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ中のボタンをリセット
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
  void CancelButtonHold(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタンのSEを設定
	 *
	 * @param		pos		カーソル位置
	 * @param		se		SE番号
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetButtonSE( u32 pos, u32 se );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   ボタンのSEを設定（ペインデータインデックス指定）
   *
   * @param   index ペインデータインデックス
   * @param   se    SE番号
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void SetButtonSEPaneIndex( u32 index, u32 se );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		現在のカーソル位置にカーソルを配置
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void PutCursor(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		入力許可フラグ設定
	 *
	 * @param		is_enable		true = 許可、false = 不許可
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
  void SetInputEnabled( bool is_enable );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   入力許可フラグ取得
   *
   * @retval  true  = 可
   * @retval  false = 不可
   */
  //--------------------------------------------------------------------------------------------
  bool IsInputEnabled(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ制御オンリーフラグ設定
	 *
	 * @param		is_touch_only		true = タッチのみ、false = タッチとボタン
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetIsTouchOnly( bool is_touch_only );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソルデータ取得
	 *
	 * @param		pos			カーソル位置格納場所
	 * @param		scroll	スクロール値格納場所
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void GetCursorData( u32 * pos, f32 * scroll ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソルデータ設定
	 *
	 * @param		pos			カーソル位置格納場所
	 * @param		scroll	スクロール値格納場所
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetCursorData( u32 pos, f32 scroll );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		項目位置取得 ( カーソル位置＋スクロール値 )
	 *
	 * @param		none
	 *
	 * @return	項目位置
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetItemPos(void) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート処理
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result Update(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		外部スクロール処理初期化
	 *
	 * @param		mv	スクロール方向
	 *
	 * @retval	"true = スクロール可"
	 * @retval	"false = スクロール不可"
	 */
	//--------------------------------------------------------------------------------------------
	bool InitExScroll( int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		外部スクロール処理
	 *
	 * @param		none
	 *
	 * @retval	"true = スクロールした"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool MainExScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		スクロール方向取得
	 *
	 * @param		none
	 *
	 * @return	スクロール方向
	 */
	//--------------------------------------------------------------------------------------------
	int GetExScrollVec(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		十字キー取得
	 *
	 * @param		none
	 *
	 * @return	十字キー
	 */
	//--------------------------------------------------------------------------------------------
	gfl2::ui::VectorDevice * GetKey(void) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタン取得
	 *
	 * @param		none
	 *
	 * @return	ボタン
	 */
	//--------------------------------------------------------------------------------------------
	gfl2::ui::Button * GetButton(void) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ範囲エリア作成
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void MakeTouchArea(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ範囲エリア作成
	 *
	 * @param		lx	左X座標
	 * @param		rx	右X座標
	 * @param		uy	上Y座標
	 * @param		dy	下Y座標
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void MakeTouchArea( f32 lx, f32 rx, f32 uy, f32 dy );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リスト位置のペインを取得
	 *
	 * @param		pos		リスト位置
	 *
	 * @return	ペインのインデックス
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetPosPaneIndex( int pos );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   リスト位置のペインを取得
   *
   * @param   pos   リスト位置
   *
   * @retval  -1  = なし
   * @retval  -1 != ペインのインデックス
   */
  //--------------------------------------------------------------------------------------------
  int GetPosPaneIndexEz( int pos );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート処理結果を取得
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
  Result GetUpdateResult( void ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタンマネージャのアップデート結果を取得
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
  app::tool::ButtonManager::UpdateState GetButtonUpdateState( void ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リスト初期配置
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void InitListPut(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		入れ替えフラグ設定
	 *
	 * @param		flg		true = 入れ替え状態、false = 通常選択
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetChangeFlag( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		入れ替え処理用ペイン表示優先度基準ペイン設定
	 *
	 * @param		on		取得時の基準ペイン
	 * @param		off		配置時の基準ペイン
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
//	void SetupChangePosPane( gfl2::lyt::LytPaneIndex on, gfl2::lyt::LytPaneIndex off );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		入れ替え処理用ペイン表示優先度基準ペイン設定
   *
   * @param		on		取得時の基準ペイン
   * @param		off		配置時の基準ペイン
   *
   * @return	none
   */
  //--------------------------------------------------------------------------------------------
//  void SetupChangePosPane( gfl2::lyt::LytPane * on, gfl2::lyt::LytPane * off );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		複数のpanelistを同期するための処理
	 *
	 * @param		src		同期Src側
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Sync( PaneList* src );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		Bボタンを押した際に反応するペインの設定
	 *
	 * @param		list_pos		該当ペインの位置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetCancelListPos(s32 list_pos);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ドラッグ使用フラグ設定
	 *
	 * @param		flg		true = ドラッグする、false = ドラッグしない
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetUseDrag( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ使用フラグ設定
	 *
	 * @param		flg		true = タッチ可能、false = タッチ不可能
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetUseTouch( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetAlphaEffect
   * @brief	  範囲外の項目ペインへのエフェクト設定
   * @date    2015.08.07
   */
  //-----------------------------------------------------------------------------
//  void SetAlphaEffect(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    MakeListPos
   * @brief   カーソル位置とスクロール値を生成
   * @date    2015.09.07
   *
   * @param   list_max    リスト項目数
   * @param   move_max    カーソル移動最大値
   * @param   list_pos    リスト項目上のカーソル位置
   * @param   cursor_pos  表示上のカーソル位置
   * @param   scroll_val  スクロール値取得場所
   */
  //-----------------------------------------------------------------------------
  static void MakeListPos( s32 list_max, s32 move_max, s32 list_pos, s32 * cursor_pos, s32 * scroll_val );


  void SetKeyEnable(bool flag){
    m_bKey = flag;
  }
  void SetButtonEnable(bool flag){
    m_bButton = flag;
  }
  void SetTpEnable(bool flag){
    m_bTp = flag;
  }
  void SetTpReleaseEnable(bool flag){
    m_bTpRelease = flag;
  }

  //-------------------------------------------------------------------------
  /**
    * @brief ボタンを有効な状態にする
    * @param buttonID  有効にするボタン
    * @param isAnime   true指定時にアニメーションを行う
    */
  //-------------------------------------------------------------------------
  void SetButtonActive( app::tool::ButtonManager::ButtonId buttonID, bool isAnime );

  //-----------------------------------------------------------------------------
  /**
    * @brief ボタンを無効な状態にする
    * @param buttonID  無効にするボタン
    * @param isAnime   true指定時にアニメーションを行う
    */
  //-----------------------------------------------------------------------------
  void SetButtonPassive( app::tool::ButtonManager::ButtonId buttonID, bool isAnime );

  //-----------------------------------------------------------------------------
  /**
    * @brief ボタンの動作をさせなくする
    *
    * @param is_enable trueで動作  falseで動作しない
    *        SetInputEnableのボタン指定版です
    */
  //-----------------------------------------------------------------------------
  void SetButtonInputEnable( app::tool::ButtonManager::ButtonId buttonID, bool is_enable );
  
private:
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタンマネージャ作成
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateButtonManager(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタンマネージャ削除
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void DeleteButtonManager(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタンマネージャアップデート
	 *
	 * @param		none
	 *
	 * @return	アップデート結果
	 */
	//--------------------------------------------------------------------------------------------
	u32 UpdateButtonManager(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ中のボタンを取得
	 *
	 * @param		none
	 *
	 * @return	ボタンID
	 */
	//--------------------------------------------------------------------------------------------
	u32 BM_GetHoldButton(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		選択されたボタンを取得
	 *
	 * @param		none
	 *
	 * @return	ボタンID
	 */
	//--------------------------------------------------------------------------------------------
	u32 BM_GetSelectButton(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソル配置
	 *
	 * @param		pos		配置位置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void PutCursor( u32 pos );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソル表示切り替え
	 *
	 * @param		flg		true = 表示、false = 非表示
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetVisibleCursor( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コールバック：カーソル移動
	 *
	 * @param		pos		カーソル位置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CB_CursorMove( u32 pos );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コールバック：カーソル非表示
	 *
	 * @param		pos		カーソル位置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CB_CursorOff( u32 pos );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コールバック：入れ替え
	 *
	 * @param		pos1	入れ替え位置１
	 * @param		pos2	入れ替え位置２
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CB_ItemChange( u32 pos1, u32 pos2 );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチパネル取得
	 *
	 * @param		none
	 *
	 * @return	タッチパネル
	 */
	//--------------------------------------------------------------------------------------------
	gfl2::ui::TouchPanel * GetTouchPanel(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ペイン座標取得
   *
   * @param		pane  ペイン
   *
   * @return	座標
   */
  //--------------------------------------------------------------------------------------------
  gfl2::math::VEC3 GetPanePos( gfl2::lyt::LytPane * pane ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ペイン座標設定
	 *
	 * @param		pane  ペイン
	 * @param		pos   ペインの座標
	 *
	 * @return	nonw
	 */
	//--------------------------------------------------------------------------------------------
	void SetPanePos( gfl2::lyt::LytPane * pane, gfl2::math::VEC3 & pos );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ペイン表示切り替え
   *
   * @param		pane  ペイン
   * @param		flg   true = 表示, false = 非表示
   *
   * @return	none
   */
  //--------------------------------------------------------------------------------------------
  void SetPaneVisible( gfl2::lyt::LytPane * pane, bool flg );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ペイン表示状態取得
   *
   * @param		pane  ペイン
   *
   * @retval	"true = 表示"
   * @retval	"false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool GetPaneVisible( gfl2::lyt::LytPane * pane );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リストエリアチェック
	 *
	 * @param		x		X座標
	 * @param		y		Y座標
	 *
	 * @retval	"true = 範囲内"
	 * @retval	"false = 範囲外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckListArea( f32 x, f32 y );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ範囲エリアチェック
	 *
	 * @param		x		X座標
	 * @param		y		Y座標
	 *
	 * @retval	"true = 範囲内"
	 * @retval	"false = 範囲外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckTouchArea( s32 x, s32 y );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ範囲エリアチェック
	 *
	 * @param		none
	 *
	 * @retval	"true = 範囲内"
	 * @retval	"false = 範囲外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckTouchArea(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ座標セット
	 *
	 * @param		init	初期化時 = true
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetTouchPos( bool init );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ドラッグスクロール開始チェック
	 *
	 * @param		none
	 *
	 * @retval	"true = 開始"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckDragScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ScrollValue作成
	 *
	 * @param		level		速度レベル
	 * @param		mv			移動方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateScrollValue( u32 level, s32 mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ScrollValue削除
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void DeleteScrollValue(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		デフォルト位置(カーソル0の位置)のペインのインデックスを取得
	 *
	 * @param		none
	 *
	 * @return	ペインのインデックス
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetDefaultPositionPane(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ペインからリスト位置を取得
	 *
	 * @param		index		ペインのインデックス
	 *
	 * @return	リスト位置
	 */
	//--------------------------------------------------------------------------------------------
	s32 GetPaneListPos( u32 index );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ中のペインを取得
	 *
	 * @param		none
	 *
	 * @return	ペインのインデックス
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetTouchPane(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		指定ペインをタッチしているか
	 *
	 * @param		pane  ペイン
	 *
	 * @retval	"true = タッチしている"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckTouchPane( gfl2::lyt::LytPane * pane );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		タッチ座標のカーソル位置を取得
	 *
	 * @param		y		Y座標
	 *
	 * @return	カーソル位置
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetTouchListPos( f32 y );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リストスクロール
	 *
	 * @param		mv_y		移動値
	 * @param		mv			移動方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void ScrollListPut( f32 mv_y, int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キーでのリストスクロール
	 *
	 * @param		mv			移動方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void ScrollListPutKey( int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		浮動小数点を補正
	 *
	 * @param		p		補正する値
	 *
	 * @return	補正した値
	 *
	 * @li	0.9999以上を繰り上げ、0.0001未満を破棄
	 */
	//--------------------------------------------------------------------------------------------
	f32 ReviseFloat( f32 p );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		スクロール後のリスト位置を補正
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void ReviseInitScrollList(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リストペインのY座標順のテーブル作成
	 *
	 * @param		tbl					テーブル作成場所
	 * @param		def_index		基準となるペインのインデックス
	 * @param		def_y				配置開始Y座標作成場所
	 *
	 * @return	基準となるペインのインデックス
	 *
	 * @li	"def_index = DEFAULT_PANE_NONE"の場合、カーソル0の位置を基準とする
	 */
	//--------------------------------------------------------------------------------------------
	u32 MakePabeListRowTable( s32 * tbl, u32 def_index, f32 * def_y );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キースクロール初期設定
	 *
	 * @param		mv		移動方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void InitKeyScroll( int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソル移動
	 *
	 * @param		val		移動値
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CursorMove( int val );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ページ送り：上
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result PageUp(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ページ送り：下
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result PageDown(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ドラッグ処理継続チェック
	 *
	 * @param		none
	 *
	 * @retval	"true = ドラッグ中"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckDragContinue(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キャッチムーブ可能か
	 *
	 * @param		none
	 *
	 * @retval	"true = 可"
	 * @retval	"false = 不可"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckCatchItem(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		基準ペインのリスト位置取得
	 *
	 * @param		none
	 *
	 * @return	リスト位置
	 */
	//--------------------------------------------------------------------------------------------
	f32 GetBaseListPos(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ドラッグ処理中のスクロール値
	 *
	 * @param		none
	 *
	 * @return	スクロール値
	 */
	//--------------------------------------------------------------------------------------------
	f32 GetUpdateDragScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キー操作での入れ替えスクロール処理初期化
	 *
	 * @param		mv	スクロール方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void InitKeyScrollChange( int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		リストスクロール（入れ替え用）
	 *
	 * @param		mv_y		移動値
	 * @param		mv			移動方向
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void ScrollListPutChange( f32 mv_y, int mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		入れ替え処理用ペイン表示優先度切り替え
	 *
	 * @param		index		ペインデータインデックス
	 * @param		flg			true = 取得、false = 配置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetItemChangePanePriority( u32 index, bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カーソル移動SE再生
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void PlayCursorMoveSE(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キー選択アニメ再生
	 *
	 * @param		none
	 *
	 * @retval	"true = 再生"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool StartKeySelectAnime(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		キー選択アニメ再生チェック
	 *
	 * @param		none
	 *
	 * @retval	"true = 再生中"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckKeySelectAnime(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @func    ListLoop
   * @brief   リストループ処理
   * @date    2015.10.17
   *
   * @param   mv  カーソル移動方向
   *
   * @return  処理結果
   */
  //--------------------------------------------------------------------------------------------
  Result ListLoop( s32 mv );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：入力待ち
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateInput(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：キースクロール
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateKeyScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：入れ替え用キースクロール
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateChangeKeyScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：ドラッグ処理
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateDrag(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：ドラッグスクロール
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateDragScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：オートスクロール
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateAutoScroll(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート：キー選択アニメ
	 *
	 * @param		none
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
	Result UpdateKeySelectAnime(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		スクロールフレーム速度取得
	 *
	 * @param		speed	キースクロール速度テーブルインデックス
	 *
	 * @return	処理結果
	 */
	//--------------------------------------------------------------------------------------------
  u32 GetScrollFrame( int speed );

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangePutListPriority
   * @brief	  項目の表示プライオリティを配置順に変更
   * @date    2015.03.17
   */
  //-----------------------------------------------------------------------------
  void ChangePutListPriority(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangeCursorPosItemPriority
   * @brief	  カーソル位置の項目の表示プライオリティを最高にする（入れ替え用）
   * @date    2015.04.30
   */
  //-----------------------------------------------------------------------------
  void ChangeCursorPosItemPriority(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetEffect
   * @brief	  項目ペインにエフェクトをかける
   * @date    2015.08.07
   */
  //-----------------------------------------------------------------------------
  void SetEffect(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CalcEffectParam
   * @brief	  項目ペインのエフェクト値取得
   * @date    2015.08.07
   *
   * @param   index   ペインデータテーブルのインデックス
   *
   * @return  エフェクト値
   */
  //-----------------------------------------------------------------------------
  u32 CalcEffectParam( u32 index );

  //-----------------------------------------------------------------------------
  /**
   * @func    GetEffectParam
   * @brief	  項目ペインのエフェクト値計算
   * @date    2015.08.07
   *
   * @param   p1  座標１
   * @param   p2  座標２
   *
   * @return  エフェクト値
   */
  //-----------------------------------------------------------------------------
  u32 GetEffectParam( f32 p1, f32 p2 );

  
#if PM_DEBUG
	void DebugPrintPanePos(void);
#endif // PM_DEBUG

private:
	//! シーケンス定義
  enum {
    PANELIST_SEQ_INPUT = 0,					//!< 入力待ち
    PANELIST_SEQ_KEY_SCROLL,				//!< キーでのスクロール
    PANELIST_SEQ_DRAG,							//!< ドラッグ処理
    PANELIST_SEQ_DRAG_SCROLL,				//!< ドラッグ操作でのスクロール
    PANELIST_SEQ_AUTO_SCROLL,				//!< 自動スクロール
    PANELIST_SEQ_KEY_SELECT_ANIME,	//!< キー選択アニメ
  };

  static const u32 DEFAULT_PANE_NONE = 0xffffffff;				//!< 基準となるペインなし
  static const u32 TOUCH_PANE_NONE = DEFAULT_PANE_NONE;		//!< タッチ座標にペインなし

  static const u32 AUTO_SCROLL_END = 0xffffffff;					//!< オートスクロール通常停止

  static const u32 SCROLL_FRAME_CHG_COUNT = 6;	//!< キースクロールフレーム切り替えカウント
  static const u32 ScrollFrame60[4];						//!< キースクロールフレームテーブル ( 1/60 )
  static const u32 ScrollFrame30[4];						//!< キースクロールフレームテーブル ( 1/30 )
  
private:
	SETUP_PARAM	param;		//!< セットアップパラメータ

  PageSkipMode m_skipMode;  //!< ページスキップモード
  b8	m_loopFlag;				    //!< ループフラグ true = ループ
  b8	m_catchFlag;			    //!< キャッチフラグ true = 有効
  b8	m_keySelectFlag;	    //!< Aボタンで決定できるか true = 可
  b8	m_keyCancelFlag;	    //!< Bボタンでキャンセルできるか true = 可

  u32	m_moveSE;					//!< カーソル移動時のSE
  u32 m_selectSE;				//!< 決定時のSE
  u32	m_cancelSE;				//!< キャンセル時のSE

	f32	touchAreaLX;			//!< タッチ範囲座標：左
	f32	touchAreaRX;			//!< タッチ範囲座標：右
	f32	touchAreaUY;			//!< タッチ範囲座標：上
	f32	touchAreaDY;			//!< タッチ範囲座標：下

	f32 listScrollMax;		//!< スクロール最大値
	f32	tmpScroll;				//!< 外部へ戻すために使用するスクロール値

	u8	trgCount;					//!< キー入力カウンタ
	u8	trgSpeed;					//!< キースクロール速度テーブルインデックス
	s8	scrollVec;				//!< スクロール方向
	s8	scrollCount;			//!< スクロールカウンタ

	u32	updateSeq;					//!< アップデートシーケンス

	app::tool::ButtonManager * pButtonManager;	//!< ボタンマネージャ
	u32 * seTbl;																//!< SEテーブル

	app::tool::ScrollValue * pScrollValue;			//!< スクロールバー
	s16	nowTPX;					//!< 現在のタッチX座標
	s16	nowTPY;					//!< 現在のタッチY座標
	s16	oldTPX;					//!< 前回のタッチX座標
	s16	oldTPY;					//!< 前回のタッチY座標
	s16	startTPX;				//!< タッチ開始X座標
	s16	startTPY;				//!< タッチ開始Y座標

	u32 curPane;				//!< カーソル位置のペイン
	u32	basePane;				//!< 基準ペイン
	f32	baseListPos;		//!< 基準リスト位置
	bool	reviseFlag;		//!< スクロール補正フラグ
	f32	reviseParam;		//!< スクロール補正パラメータ
	f32	revisePY;				//!< スクロール補正Y座標
	u32	reviseIndex;		//!< 補正基準ペイン

	f32	autoScrollValue;		//!< 自動スクロール移動値
	u32	autoScrollStopPos;	//!< 自動スクロール停止位置
	u32 autoScrollListPos;	//!< 自動スクロール後のカーソル位置

	bool chgFlag;		//!< 入れ替えフラグ
	u32	chgPane;		//!< 入れ替えるペイン
//  gfl2::lyt::LytPane * m_chgOnPane;   //!< 入れ替え開始時の挿入位置ペイン
//  gfl2::lyt::LytPane * m_chgOffPane;  //!< 入れ替え終了時の挿入位置ペイン

  u16 m_catchFrame;   //!< キャッチムーブ開始までのフレーム値
  u16 m_catchCount;   //!< キャッチムーブ開始カウンタ

  Result result;					//!< アップデートの結果

	s32 * tmpPaneListTable;		//!< テンポラリペインリストテーブル

	bool crossKeyEnable;	//!< 十字キー有効/無効設定 true = 有効
  bool input_enabled;		//!< 入力制御フラグ
  bool input_touch_only;		//!< タッチ制御オンリーフラグ

	s32 cancelListPos;	//!< Bボタンで特定の項目を動作させる場合のListPos

  GameSys::FrameMode m_frameMode;  //!< フレームレート

	bool useDrag;		//!< ドラッグ使用フラグ
	bool useTouch;		//!< タッチ使用フラグ

  bool m_isEffect;

  bool m_bKey;        //キーを取得しても良い場合
  bool m_bButton;     //ボタンを取得しても良い場合
  bool m_bTp;         //tpを取得しても良い場合
  bool m_bTpRelease;  //tpのリリースのみ取得しても良い場合
  
};


GFL_NAMESPACE_END(tool)
GFL_NAMESPACE_END(app)

#endif // APP_TOOL_PANELIST_H_INCLUDED
