//============================================================================================
/**
 * @file    app_tool_CursorManager.h
 * @brief   カーソル移動処理
 * @author  Hiroyuki Nakamura
 * @date    11.07.26
 */
//============================================================================================
#if !defined( __APP_TOOL_CURSORMANAGER_H__ )
#define __APP_TOOL_CURSORMANAGER_H__
#pragma once

#include <heap/include/gfl2_Heap.h>
#include <macro/include/gfl2_Macros.h>
#include <types/include/gfl2_Typedef.h>
#include <ui/include/gfl2_UI.h>

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/**
 * @namespace  app::tool
 * @brief      アプリツール
 */
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
GFL_NAMESPACE_BEGIN( app )
GFL_NAMESPACE_BEGIN( tool )

//--------------------------------------------------------------------------------------------
/**
 * @brief   カーソルマネージャ
 */
//--------------------------------------------------------------------------------------------
class CursorManager {
public:
  //! @brief 動作結果
  typedef enum {
    RET_NO_MOVE_UP    = 0xfffffff8,     //!< 十字キー上が押されたが、移動なし
    RET_NO_MOVE_DOWN  = 0xfffffff9,     //!< 十字キー下が押されたが、移動なし
    RET_NO_MOVE_LEFT  = 0xfffffffa,     //!< 十字キー左が押されたが、移動なし
    RET_NO_MOVE_RIGHT = 0xfffffffb,     //!< 十字キー右が押されたが、移動なし
    RET_MOVE          = 0xfffffffd,     //!< 移動
    RET_MOVE_NONE     = 0xffffffff      //!< 動作なし
  }MOVE_RET;

  //! @brief キー入力データ
  typedef struct {
    u8  up;       //!< 上方向へのインデックス番号
    u8  down;     //!< 下方向へのインデックス番号
    u8  left;     //!< 左方向へのインデックス番号
    u8  right;    //!< 右方向へのインデックス番号
  }MOVE_KEY;

  //! @brief 移動データ
  typedef struct {
    u32  id;        //!< ID
    MOVE_KEY  key;  //!< キー入力データ
  }MOVE_DATA;


public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ（移動履歴作成方式）
   *
   * @param   mvdata        カーソル移動データ
   * @param   data_max      データ数
   * @param   heap          ヒープ
   * @param   init_pos      初期カーソル位置（ デフォルト = 0 ）
   * @param   stick_enable  アナログパッドを有効にするか ( デフォルト = true )
   */
  //--------------------------------------------------------------------------------------------
  CursorManager( const MOVE_DATA * mvdata, u32 data_max, gfl2::heap::HeapBase * heap, u8 init_pos = 0, bool stick_enable = true );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ（移動履歴参照方式）
   *
   * @param   mvdata      カーソル移動データ
   * @param   data_max    データ数
   * @param   rec_work    移動履歴
   * @param   init_pos    初期カーソル位置（ デフォルト = 0 ）
   *
   *  移動履歴はdata_max分必要
   */
  //--------------------------------------------------------------------------------------------
//  CursorManager( const MOVE_DATA * mvdata, u32 data_max, MOVE_KEY * rec_work, u8 init_pos = 0 );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ（移動履歴なし方式）
   *
   * @param   mvdata        カーソル移動データ
   * @param   data_max      データ数
   * @param   init_pos      初期カーソル位置（ デフォルト = 0 ）
   * @param   stick_enable  アナログパッドを有効にするか ( デフォルト = true )
   */
  //--------------------------------------------------------------------------------------------
  CursorManager( const MOVE_DATA * mvdata, u32 data_max, u8 init_pos = 0, bool stick_enable = true );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  ~CursorManager();

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動許可設定初期化
   *
   * @param   none
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void InitMoveEnable(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動許可設定
   *
   * @param   pos   データ位置
   * @param   flg   true = 移動可, false = 移動不可
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void SetMoveEnable( u8 pos, bool flg );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   メイン処理（ベタ）
   *
   * @param   none
   *
   * @return  動作結果
   */
  //--------------------------------------------------------------------------------------------
  MOVE_RET MainHold(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   メイン処理（トリガ）
   *
   * @param   none
   *
   * @return  動作結果
   */
  //--------------------------------------------------------------------------------------------
  MOVE_RET MainTrigger(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   メイン処理（リピート）
   *
   * @param   none
   *
   * @return  動作結果
   */
  //--------------------------------------------------------------------------------------------
  MOVE_RET MainRepeat(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   位置設定
   *
   * @param   pos    位置
   *
   * @retval  "true = 移動した"
   * @retval  "false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool SetPos( u8 pos );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   現在の位置取得
   *
   * @param   none
   *
   * @return  前回の位置
   */
  //--------------------------------------------------------------------------------------------
  u8 GetPos(void) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   現在の位置取得
   *
   * @param   none
   *
   * @return  前回の位置
   */
  //--------------------------------------------------------------------------------------------
  u8 GetOldPos(void) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   指定位置のID取得
   *
   * @param   pos    位置
   *
   * @return  ID
   */
  //--------------------------------------------------------------------------------------------
  u32 GetID( u32 pos ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   現在位置のID取得
   *
   * @param   none
   *
   * @return  ID
   */
  //--------------------------------------------------------------------------------------------
  u32 GetID(void) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   前回の位置のID取得
   *
   * @param   none
   *
   * @return  ID
   */
  //--------------------------------------------------------------------------------------------
  u32 GetOldID(void) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動履歴初期化
   *
   * @param   none
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void InitMoveRecord(void);


private:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動許可チェック
   *
   * @param   pos    データ位置
   *
   * @retval  "0 = 移動不可"
   * @retval  "1 = 移動可"
   */
  //--------------------------------------------------------------------------------------------
  u32 GetMoveEnable( u8 pos ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動履歴作成
   *
   * @param   none
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void CreateMoveRecord(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動履歴削除
   *
   * @param   none
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void DeleteMoveRecord(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   移動メイン処理
   *
   * @param   mv  移動方向
   *
   * @retval  "true = 移動した"
   * @retval  "false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool MoveMain( u32 mv );


private:
  gfl2::heap::HeapBase * pHeap;   //!< ヒープ

  gfl2::ui::VectorDevice * pKey;  //!< 十字キー

  const MOVE_DATA * dat;    //!< 移動データ
  MOVE_KEY * mvRec;         //!< 履歴データ
  u32  dataMax;             //!< 移動データ数
  u8  nowPos;               //!< 現在のカーソル位置
  u8  oldPos;               //!< 前回のカーソル位置

  u8  stickCount;   //!< ※未使用（代入のみ）
  u8  stickWait;    //!< ※未使用（代入のみ）

  #define  MV_TBL_MAX    ( 8 )  //!< 移動許可テーブルサイズ
  u32 mvTbl[MV_TBL_MAX];        //!< 移動許可テーブル
};


GFL_NAMESPACE_END( tool )
GFL_NAMESPACE_END( app )

#endif // __APP_TOOL_CURSORMANAGER_H__
