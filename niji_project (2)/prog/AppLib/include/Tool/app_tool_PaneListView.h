//=============================================================================
/**
 * @file    app_tool_PaneListView.h
 * @brief   UIVew用ペインリスト
 * @author  Hiroyuki Nakamura
 * @date    2015.03.18
 */
//=============================================================================
#if !defined( APP_TOOL_PANELIST_VIEW_H_INCLUDED )
#define APP_TOOL_PANELIST_VIEW_H_INCLUDED

#pragma once

#include <Heap/include/gfl2_Heap.h>

#include <AppLib/include/Util/app_util_ScrollBar.h>
#include <AppLib/include/Tool/app_tool_PaneList.h>
#include <AppLib/include/Ui/UIView.h>


GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(tool)


//=============================================================================
/**
 * @class PaneListView
 * @brief UIView用ペインリスト
 * @date  2015.03.18
 */
//=============================================================================
class PaneListView
  : public app::ui::UIView
  , public app::ui::UIInputListener
//  , public app::tool::MenuWindowListener
//  , public app::tool::PaneList::CallBack
{
	GFL_FORBID_COPY_AND_ASSIGN( PaneListView );

public:
  //=============================================================================
  /**
   * @class Listener
   * @brief リスナークラス
   * @date  2015.04.02
   */
  //=============================================================================
  class Listener
  {
  public:
    //-----------------------------------------------------------------------------
    /**
     * @func    PaneListItemSelectListener
     * @brief   ペインリスト決定時に呼ばれるリスナー
     * @date    2015.04.02
     *
     * @param   pos   カーソル位置
     */
    //-----------------------------------------------------------------------------
    virtual void PaneListItemSelectListener( u32 pos ){};

    //-----------------------------------------------------------------------------
    /**
     * @func    PaneListItemCatchListener
     * @brief   ペインリスト項目キャッチ時に呼ばれるリスナー
     * @date    2015.05.11
     *
     * @param   pos   カーソル位置
     */
    //-----------------------------------------------------------------------------
    virtual void PaneListItemCatchListener( u32 pos ){};
  };


public:
  //-----------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   *
   * @param   heap        ヒープ
   * @param   is_effect   エフェクトを有効にするか ※デフォルト=無効
   */
  //-----------------------------------------------------------------------------
  PaneListView( app::util::Heap * heap, bool is_effect = false );

  //-----------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //-----------------------------------------------------------------------------
  ~PaneListView();

  //-----------------------------------------------------------------------------
  /**
   * @func    Update
   * @brief   更新処理
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  virtual void Update(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Draw
   * @brief   描画処理
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  virtual void Draw( gfl2::gfx::CtrDisplayNo displayNo );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetListener
   * @brief   リスナーを設定
   * @date    2015.04.02
   */
  //-----------------------------------------------------------------------------
  void SetListener( Listener * listener );

  //-----------------------------------------------------------------------------
  /**
   * @func    IsButtonAnimation
   * @brief   ボタンのアニメ状態を取得する
   * @date    2015.03.18
   *
   * @retval  true  = アニメ中
   * @retval  false = アニメしていない
   */
  //-----------------------------------------------------------------------------
  virtual bool IsButtonAnimation(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @func    GetUpdateResult
   * @brief   ペインリストの更新結果を取得
   * @date    2015.03.18
   *
   * @return  更新結果
   */
  //-----------------------------------------------------------------------------
  PaneList::Result GetUpdateResult(void) const;

  //-----------------------------------------------------------------------------
  /**
   * @func    CreatePaneList
   * @brief   ペインリストを生成
   * @date    2015.03.18
   *
   * @param   setup   セットアップパラメータ
   */
  //-----------------------------------------------------------------------------
  void CreatePaneList( const PaneList::SETUP_PARAM * setup );

  //-----------------------------------------------------------------------------
  /**
   * @func    DeletePaneList
   * @brief   ペインリストを削除
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  void DeletePaneList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ResetPaneList
   * @brief   ペインリストを再設定
   * @date    2015.03.18
   *
   * @param   setup   セットアップパラメータ
   */
  //-----------------------------------------------------------------------------
  void ResetPaneList( const PaneList::SETUP_PARAM * setup );

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateScrollBar
   * @brief   スクロールバーを生成
   * @date    2015.03.18
   *
   * @param   setup   セットアップパラメータ
   */
  //-----------------------------------------------------------------------------
  void CreateScrollBar( const app::util::ScrollBar::SETUP_PARAM * setup );

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteScrollBar
   * @brief   スクロールバーを削除
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  void DeleteScrollBar(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    GetPaneList
   * @brief   ペインリスト取得
   * @date    2015.03.27
   *
   * @return  ペインリスト
   */
  //-----------------------------------------------------------------------------
  app::tool::PaneList * GetPaneList(void);


private:
  //-----------------------------------------------------------------------------
  /**
   * @func    UpdatePaneList
   * @brief   ペインリストの更新処理
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  void UpdatePaneList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ResetScrollBar
   * @brief   スクロールバーを再設定
   * @date    2015.03.18
   *
   * @param   max   最大スクロール値
   */
  //-----------------------------------------------------------------------------
  void ResetScrollBar( u32 max );

  //-----------------------------------------------------------------------------
  /**
   * @func    UpdateScrollBar
   * @brief   スクロールバーの更新処理
   * @date    2015.03.18
   */
  //-----------------------------------------------------------------------------
  void UpdateScrollBar(void);


  //--------------------------------------------------------------------------------------------
  /**
  * @brief  タッチパネルイベントの検知
  *
  * @param  pTouchPanel タッチパネル
  * @param  isTouch     タッチ状態であるならtrue、タッチされていないならfalse
  *                     (タッチトリガを調べたい場合はTouchPanel::IsTouchTrigger()にて判断可能）
  *
  * @return 同フレーム内での他入力イベントを許可するならtrue、
  *         他のイベントを排除するならfalseを返却すること。
  */
  //--------------------------------------------------------------------------------------------
  virtual ListenerResult OnTouchEvent( gfl2::ui::TouchPanel* pTouchPanel, bool isTouch );

  //--------------------------------------------------------------------------------------------
  /**
  * @brief   タッチパネルのダブルクリックイベントの検知
  *
  * @param  pTouchPanel タッチパネル
  *
  * @return 同フレーム内での他入力イベントを許可するならtrue、
  *         他のイベントを排除するならfalseを返却すること。
  */
  //--------------------------------------------------------------------------------------------
  virtual ListenerResult OnDoubleClickEvent( gfl2::ui::TouchPanel * pTouchPanel );

  //--------------------------------------------------------------------------------------------
  /**
  * @brief ペインイベントの検知
  *       【ボタンマネージャー関係】
  *
  * @param  painId   通知を受けるペインＩＤ
  *
  * @return 同フレーム内での他入力イベントを許可するならtrue、
  *         他のイベントを排除するならfalseを返却すること。
  */
  //--------------------------------------------------------------------------------------------
  virtual ::app::ui::UIInputListener::ListenerResult OnLayoutPaneEvent( const u32 painId );

  //--------------------------------------------------------------------------------------------
  /**
  * @brief ペイン長押しイベントの検知
  *       【ボタンマネージャー関係】
  *
  * @param  painId   通知を受けるペインＩＤ
  *
  * @return 同フレーム内での他入力イベントを許可するならtrue、
  *         他のイベントを排除するならfalseを返却すること。
  */
  //--------------------------------------------------------------------------------------------
  virtual ListenerResult OnLayoutPaneLongPressEvent( const u32 painId );

  //--------------------------------------------------------------------------------------------
  /**
  * @brief ペイン選択アニメーションの開始を検知
  *       【ボタンマネージャー関係】
  *
  * @param  painId   通知を受けるペインＩＤ
  *
  * @return none
  */
  //--------------------------------------------------------------------------------------------
  virtual void OnLayoutPaneStartingAnimeEvent( const u32 painId );

  //--------------------------------------------------------------------------------------------
  /**
  * @brief ペインタッチ時を検知
  *       【ボタンマネージャー関係】
  *
  * @param  painId   通知を受けるペインＩＤ
  *
  * @return none
  * 
  * @note 主な用途  RELEASE判定だが、決定前時にカーソルを移動したい、とか
  * 
  *                 TRIGER判定として使いたい場合は、ここを使わずに
  *                 ボタンマネージャーモードをTRIGGERにして
  *                 OnLayoutPaneEventを使うべき。
  */
  //--------------------------------------------------------------------------------------------
  virtual void OnLayoutPaneTouchTriggerEvent( const u32 paneId );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief  キー入力の検知
   *         ※タッチパネルの入力が優先される
   *
   * @param  pButton  ボタン ( A,B,X,Y,L,R... )
   * @param  pKey     十字キー
   * @param  pStick   アナログスティック
   *
   * @return 同フレーム内での他入力イベントを許可するならtrue、
   *         他のイベントを排除するならfalseを返却すること。
   */
  //--------------------------------------------------------------------------------------------
  virtual ListenerResult OnKeyAction( gfl2::ui::Button* pButton, gfl2::ui::VectorDevice* pKey, gfl2::ui::VectorDevice* pStick );
  

private:
  app::util::Heap * m_heap;             //!< ヒープ
  PaneList * m_pPaneList;               //!< ペインリスト
  app::util::ScrollBar * m_pScrollBar;  //!< スクロールバー

  Listener * m_listener;  //!< リスナー

  bool m_isEffect;  //!< true = 範囲外の半透明化
};


GFL_NAMESPACE_END(tool)
GFL_NAMESPACE_END(app)

#endif // APP_TOOL_PANELIST_VIEW_H_INCLUDED
