//=============================================================================
/**
 * @file    ScriptBufferManager.h
 * @brief   スクリプト読み込み用バッファ管理クラス
 * @author  Miyuki Iwasawa
 * @date    2015.02.28
 */
//=============================================================================
#if !defined(__SCRIPTBUFFERMANAGER_H__)
#define __SCRIPTBUFFERMANAGER_H__
#pragma once

#include <fs/include/gfl2_Fs.h>

/* ------------------------------------------------------------------------- */
/**
 * @brief フィールド
 */
/* ------------------------------------------------------------------------- */
GFL_NAMESPACE_BEGIN( Field );
/* ------------------------------------------------------------------------- */
/**
 * @brief スクリプト
 */
/* ------------------------------------------------------------------------- */
GFL_NAMESPACE_BEGIN( FieldScript );

/// クラスの前方宣言
struct ScriptBuffer;

//=============================================================================
/**
 * @class ScriptBufferManager
 * @brief スクリプト読み込み用バッファ管理クラス
 */
//=============================================================================
class ScriptBufferManager
{
  GFL_FORBID_COPY_AND_ASSIGN( ScriptBufferManager );  ///<　コピーコンストラクタ + 代入禁止

private:
  u16     m_BufferNum;  ///< バッファ数
  ScriptBuffer * m_pScrBuffer;  ///< バッファのポインタ配列
  gfl2::fs::AsyncFileManager * m_pAsyncFileManager;  ///< ファイル読み込みマネージャ

  /* ------------------------------------------------------------------------- */
  /**
   * @brief バッファ読み込み終了チェック
   *
   * @param buffer バッファ
   *
   * @return true:終了, false:未終了
   */
  /* ------------------------------------------------------------------------- */
  bool isReadFinished( ScriptBuffer* buffer ) const;

public:
  static const u32 NOT_FOUND = 0xffff;  ///< 見つからなかった定義

  /* ------------------------------------------------------------------------- */
  /**
   * @brief コンストラクタ
   *
   * @param p_heap ヒープへのポインタ
   * @param size バッファサイズ
   */
  /* ------------------------------------------------------------------------- */
  ScriptBufferManager( gfl2::heap::HeapBase * p_heap, u32 size );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief デストラクタ
   */
  /* ------------------------------------------------------------------------- */
  ~ScriptBufferManager();

  /* ------------------------------------------------------------------------- */
  /**
   * @brief セットアップ
   *
   * @param p_fileread ファイル読み込みマネージャへのポインタ
   * @param p_heap ファイル読み込みテーブル作成につかうヒープ
   * @param use_hio_flag HIOを使用するフラグ
   */
  /* ------------------------------------------------------------------------- */
  void Setup( gfl2::fs::AsyncFileManager * p_fileread, gfl2::heap::HeapBase * p_heap, gfl2::heap::HeapBase * p_heapWork, bool use_hio_flag );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief セットアップ待ち
   *
   * @retval  true  セットアップ完了
   */
  /* ------------------------------------------------------------------------- */
  bool SetupWait( void );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief クリーンアップ
   */
  /* ------------------------------------------------------------------------- */
  void Cleanup( void );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief AMXインデックスからインデックスを取得
   *
   * @param amx_id AMXID
   *
   * @return インデックス
   */
  /* ------------------------------------------------------------------------- */
  u32 GetIndex( u16 amx_id ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief ファイル読み込みリクエスト
   * @note  既に読み込みリクエストがある場合は参照カウンタを回す
   * @note  呼び出したら必ずReleaseBufferを実行する事。
   *
   * @param p_heap 読み込みに使うヒープ
   * @param amx_id AMXインデックス
   * @param amxname AMX名
   *
   * @return 生成したバッファのインデックス
   */
  /* ------------------------------------------------------------------------- */
  u32 RequestReadFile( gfl2::heap::HeapBase * p_heap, u16 amx_id, const char* amxname );
  u32 SetAmxData( gfl2::heap::HeapBase * p_heap, void * temp_buffer, u32 temp_size, u16 amx_id );
  /* ------------------------------------------------------------------------- */
  /**
   * @brief AMXインデックスからバッファのポインタを取得
   *
   * @param amx_id AMXインデックス
   *
   * @return バッファへのポインタ
   */
  /* ------------------------------------------------------------------------- */
  void * GetBuffer( u32 amx_id ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief AMXインデックスからバッファのサイズを取得
   *
   * @param amx_id AMXインデックス
   *
   * @return バッファのサイズ
   */
  /* ------------------------------------------------------------------------- */
  size_t GetBufferSize( u32 amx_id ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief AMXインデックスを指定してバッファを解放
   * @note  参照カウンタが0になった際に実際に開放される
   *
   * @param amx_id AMXインデックス
   *
   * @return true:解放できた, false:解放失敗
   */
  /* ------------------------------------------------------------------------- */
  bool ReleaseBuffer( u32 amx_id );
  /* ------------------------------------------------------------------------- */
  /**
   * @brief AMXインデックスを指定して、対象バッファの読み込みが終了しているか判定
   *
   * @param amx_id AMXインデックス
   *
   * @return true:完了している, false:完了していない
   */
  /* ------------------------------------------------------------------------- */
  bool IsReadFinished( u32 amx_id ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief すべてのバッファ読み込みが完了しているか判定
   *
   * @return true:完了している, false:完了していない
   */
  /* ------------------------------------------------------------------------- */
  bool IsReadAllFinished( void ) const;

};  //End of Class ScriptBufferManager

GFL_NAMESPACE_END( FieldScript );
GFL_NAMESPACE_END( Field );

#endif  // __SCRIPTBUFFERMANAGER_H__

