//======================================================================
/**
 * @file TeamSelectLowTopPokePartySelectView.cpp
 * @date 2015/07/02 19:29:11
 * @author uchida_yuto
 * @brief トップ画面のポケモンパーティー選択下画面View
 * @par Copyright
 * (C)1995-2015 GAME FREAK inc. All Rights Reserved.
 */
//======================================================================
#include "NetApp/TeamSelect/source/View/TeamSelectLowTopPokePartySelectView.h"
#include "NetApp/TeamSelect/source/TeamSelectShareParam.h"

#include "Applib/include/Tool/app_tool_MenuCursor.h"

#include "niji_conv_header/app/teamselect/res2d/teamSelect.h"
#include "niji_conv_header/app/teamselect/res2d/teamSelect_anim_list.h"
#include "niji_conv_header/app/teamselect/res2d/teamSelect_pane.h"

#include "niji_conv_header/message/msg_battleteam_select.h"

//  サウンド
#include <Sound/include/Sound.h>

GFL_NAMESPACE_BEGIN(NetApp)
GFL_NAMESPACE_BEGIN(TeamSelect)

  //  ポケモンパーティ－のレイアウト作成のデータ一覧
  const struct TeamSelectLowTopPokePartySelectView::POKE_PARTY_VIEW_SETUP_DATA  TeamSelectLowTopPokePartySelectView::m_sPokePartyLayoutSetupDataArray[]  =
  {
    //  項目1
    {
      //  Viewのパーツペイン
      PANENAME_TEAMSELECT_TAM_LOW_000_PANE_TEAM_00,

      //  Viewのアニメ
      {
        //  アニメid
        {
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_PATERN_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_PATERN_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_02,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_03,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_04,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00_COLOR_TEAM_05,
        },

        //  Viewのポケモンアイコンのアニメid
        {
          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_00_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_00_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_00_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_01_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_01_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_01_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_02_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_02_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_02_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_03_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_03_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_03_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_04_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_04_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_04_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__ICONPOKE_05_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_05_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_00__GENDER_05_ICON_FEMALE
          }
        }
      }
    },

    //  項目2
    {
      //  Viewのパーツペイン
      PANENAME_TEAMSELECT_TAM_LOW_000_PANE_TEAM_01,

      //  Viewのアニメ
      {
        //  アニメid
        {
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_PATERN_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_PATERN_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_02,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_03,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_04,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01_COLOR_TEAM_05,
        },

        //  Viewのポケモンアイコンのアニメid
        {
          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_00_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_00_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_00_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_01_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_01_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_01_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_02_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_02_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_02_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_03_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_03_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_03_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_04_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_04_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_04_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__ICONPOKE_05_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_05_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_01__GENDER_05_ICON_FEMALE
          }
        }
      }
    },

    //  項目3
    {
      //  Viewのパーツペイン
      PANENAME_TEAMSELECT_TAM_LOW_000_PANE_TEAM_02,

      //  Viewのアニメ
      {
        //  アニメid
        {
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_PATERN_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_PATERN_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_02,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_03,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_04,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02_COLOR_TEAM_05,
        },

        //  Viewのポケモンアイコンのアニメid
        {
          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_00_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_00_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_00_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_01_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_01_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_01_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_02_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_02_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_02_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_03_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_03_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_03_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_04_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_04_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_04_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__ICONPOKE_05_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_05_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_02__GENDER_05_ICON_FEMALE
          }
        }
      }
    },

    //  項目4
    {
      //  Viewのパーツペイン
      PANENAME_TEAMSELECT_TAM_LOW_000_PANE_TEAM_03,

      //  Viewのアニメ
      {
        //  アニメid
        {
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_PATERN_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_PATERN_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_00,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_01,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_02,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_03,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_04,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03_COLOR_TEAM_05,
        },

        //  Viewのポケモンアイコンのアニメid
        {
          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_00_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_00_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_00_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_01_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_01_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_01_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_02_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_02_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_02_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_03_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_03_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_03_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_04_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_04_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_04_ICON_FEMALE
          },

          {
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_DIE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_REVIVE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_ITEM_CATCH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_ITEM_RELEASE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_JAMP_HIGH,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_JAMP_MIDDLE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_JAMP_LOW,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_SICK,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_JAMP_SELECT,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__ICONPOKE_05_STOP,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_05_ICON_MALE,
            LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__TEAM_03__GENDER_05_ICON_FEMALE
          }
        }
      }
    }
  };

  //  ユーザー入力時のスクロール設定値
  const App::Tool::NewPaneList::ScrollParam TeamSelectLowTopPokePartySelectView::m_saDefaultScrollParam[ App::Tool::NewPaneList::SCROLL_PARAM_MAX ] =
  {
    //!< 初速度, 減速度
    { 0.2f, 0.05f },
    { 0.3f, 0.06f },
    { 0.4f, 0.07f },
    { 0.5f, 0.08f },
  };

  //  ループ自動移動時のスクロール値
  const App::Tool::NewPaneList::ScrollParam TeamSelectLowTopPokePartySelectView::m_saAutoLoopScrollParam[ App::Tool::NewPaneList::SCROLL_PARAM_MAX ]  = 
  {
    { 6.0f, 0.04f },
    { 6.1f, 0.03f },
    { 6.2f, 0.02f },
    { 6.3f, 0.01f },
  };

  TeamSelectLowTopPokePartySelectView::TeamSelectLowTopPokePartySelectView( app::util::Heap* pHeap, app::util::AppRenderingManager* pRenderManager ) :
  UIView( pHeap, pHeap->GetDeviceAllocator(), pHeap->GetDeviceAllocator() ),
  m_listParty( this, pHeap )
  {
    _Clear();

    GFL_ASSERT( pRenderManager );
    m_pHeap           = pHeap;
    m_pRenderManager  = pRenderManager;
  }

  TeamSelectLowTopPokePartySelectView::~TeamSelectLowTopPokePartySelectView()
  {
    {
      u32 loopNum = GFL_NELEMS( m_pPokePartyLayoutList );
      for( u32 i = 0; i < loopNum; ++i )
      {
        GFL_SAFE_DELETE( m_pPokePartyLayoutList[ i ] );
      }
    }

    UIView::ReleaseButtonManager();
    UIView::Delete2D();
  }

  //------------------------------------------------------------------
  /**
    * @brief   初期化
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::Initialize( const struct INIT_PARAM& rInitParam )
  {
    GFL_ASSERT( rInitParam.pLytBinData );
    GFL_ASSERT( rInitParam.pAppMsgData );
    GFL_ASSERT( rInitParam.pWordSet );

    m_initParam = rInitParam;

    _Initialize2D( m_initParam.pLytBinData, m_initParam.pAppMsgData, m_initParam.pWordSet );

    gfl2::lyt::LytWk* pLayoutWork         = UIView::GetLayoutWork( LYT_WORK_NORMAL );
    ::app::util::G2DUtil* pG2DUtil        = UIView::GetG2DUtil();
    gfl2::lyt::LytMultiResID& rMultiResId = pG2DUtil->GetLayoutResourceID( 0 );

    //  ボタン関連の設定
    {
      struct ButtonSetupData
      {
        gfl2::lyt::LytParts*  pItemBtnPartsPane;
        s32                   textId;
      };

      struct ButtonSetupData aItemBtnData[ BUTTON_ID_MAX ]  = 
      {
        //  Yボタンはテキストを出す(textid がないが)
        { pLayoutWork->GetPartsPane( PANENAME_TEAMSELECT_TAM_LOW_000_PANE_BUTTON_Y ),     msg_bts_sel_07 },
        { pLayoutWork->GetPartsPane( PANENAME_TEAMSELECT_TAM_LOW_000_PANE_BUTTON_A_01 ),  msg_bts_sel_01 },
        { pLayoutWork->GetPartsPane( PANENAME_TEAMSELECT_TAM_LOW_000_PANE_CURSOR_L ), -1 },
        { pLayoutWork->GetPartsPane( PANENAME_TEAMSELECT_TAM_LOW_000_PANE_CURSOR_R ), -1 }
      };

      //  テキスト設定
      {
        u32 loopNum = GFL_NELEMS( aItemBtnData );
        for( u32 i = 0; i < loopNum; ++i )
        {
          switch ( i )
          {
            case BUTTON_ID_TEAM_ENTER:
            case BUTTON_ID_TEAM_SETTING:
            {
              pG2DUtil->SetTextBoxPaneString( pLayoutWork->GetTextBoxPane( aItemBtnData[ i ].pItemBtnPartsPane, PANENAME_COMMON_BTN_LOW_013_PANE_TEXTBOX_00, &rMultiResId ), aItemBtnData[ i ].textId );
              break;
            }
          }
        }
      }

      const ::app::ui::ButtonInfoEx aButtonPaneIdxList[ BUTTON_ID_MAX ] =
      {
        //  チーム編成ボタン
        {
          BUTTON_ID_TEAM_SETTING,
          aItemBtnData[ BUTTON_ID_TEAM_SETTING ].pItemBtnPartsPane,
          pLayoutWork->GetBoundingPane( aItemBtnData[ BUTTON_ID_TEAM_SETTING ].pItemBtnPartsPane, PANENAME_COMMON_BTN_LOW_013_PANE_BOUND_00, &rMultiResId ),
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_TOUCH,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_CANSEL,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_TOUCH_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_ACTIVE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_Y_PASSIVE
        },

        //  チーム決定
        {
          BUTTON_ID_TEAM_ENTER,
          aItemBtnData[ BUTTON_ID_TEAM_ENTER ].pItemBtnPartsPane,
          pLayoutWork->GetBoundingPane( aItemBtnData[ BUTTON_ID_TEAM_ENTER ].pItemBtnPartsPane, PANENAME_COMMON_BTN_LOW_013_PANE_BOUND_00, &rMultiResId ),
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_TOUCH,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_CANSEL,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_TOUCH_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_ACTIVE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__BUTTON_A_01_PASSIVE
        },

        //  チーム選択左移動
        {
          BUTTON_ID_SELECT_LEFT,
          aItemBtnData[ BUTTON_ID_SELECT_LEFT ].pItemBtnPartsPane,
          pLayoutWork->GetBoundingPane( aItemBtnData[ BUTTON_ID_SELECT_LEFT ].pItemBtnPartsPane, PANENAME_COMMON_CUR_LOW_004_PANE_BOUND_00, &rMultiResId ),
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_TOUCH,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_CANSEL,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_TOUCH_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_ACTIVE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_L_PASSIVE
        },

        //  チーム選択右移動
        {
          BUTTON_ID_SELECT_RIGHT,
          aItemBtnData[ BUTTON_ID_SELECT_RIGHT ].pItemBtnPartsPane,
          pLayoutWork->GetBoundingPane( aItemBtnData[ BUTTON_ID_SELECT_RIGHT ].pItemBtnPartsPane, PANENAME_COMMON_CUR_LOW_004_PANE_BOUND_00, &rMultiResId ),
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_TOUCH,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_CANSEL,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_TOUCH_RELEASE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_ACTIVE,
          LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000__CURSOR_R_PASSIVE
        },
      };

      UIResponder::CreateButtonManager( m_pHeap, pLayoutWork, aButtonPaneIdxList, GFL_NELEMS( aButtonPaneIdxList ) );
 
      //  入力コールバック設定
      UIView::SetInputListener( this );

      {
        app::tool::ButtonManager* pButtonManager  = UIView::GetButtonManager();

        u32 loopNum = GFL_NELEMS( aButtonPaneIdxList );
        for( u32 i = 0; i < loopNum; ++i )
        {
          pButtonManager->SetButtonSelectSE( BUTTON_ID_TEAM_SETTING + i, SEQ_SE_DECIDE1 );
        }
      }
    }

    //  ポケモンパーティーレイアウト作成
    {
      TeamSelectPokePartyLayoutParts::LAYOUT_PARAM  layoutParam;

      u32 loopNum = GFL_NELEMS( m_pPokePartyLayoutList );
      for( u32 i = 0; i < loopNum; ++i )
      {
        m_pPokePartyLayoutList[ i ] = GFL_NEW( m_pHeap->GetDeviceHeap() ) TeamSelectPokePartyLayoutParts();

        _OuputPokePartyLayoutParam( &layoutParam, i );
        m_pPokePartyLayoutList[ i ]->Initialize( &layoutParam );
      }
    }

    m_listParty.Initialize();
  }

  //------------------------------------------------------------------
  /**
    * @brief   終了処理
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::Terminate()
  {
    m_listParty.Terminate();
  }

  //------------------------------------------------------------------
  /**
    * @brief   破棄可能か
    */
  //------------------------------------------------------------------
  bool TeamSelectLowTopPokePartySelectView::IsDelete()
  {
    return  ( UIView::IsDrawing() == false );
  }

  //--------------------------------------------------------------------------------------------
  /**
  * @brief      開始処理
  * @param[in]  currentListIdx: リストのカレントidx
  */
  //--------------------------------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::Start()
  {
    {
      u32 loopNum = GFL_NELEMS( m_pPokePartyLayoutList );
      // @fix GFNMCat[1478] 初期座標が０になっていたが、レイアウト位置調整で０ではなくなっていた。
      //                    初期座標値を設定するよ
      for( u32 i = 0; i < loopNum; ++i )
      {
        m_pPokePartyLayoutList[ i ]->SetYPos( m_pPokePartyLayoutList[ i ]->GetDefaultPos().y );
      }
    }
  }

  //--------------------------------------------------------------------------------------------
  /**
  * @brief  更新処理
  *         子ウインドウについても自動的にコールする(子→親の順）
  */
  //--------------------------------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::Update()
  {

    if( m_state == STATE_IDLE )
    {
      bool bMove  = m_listParty.IsMoveScroll();
      //  スクロール中はボタンを押せないようにする
      _SetEnableButtonInput( ( bMove == false ) );

      //  矢印ボタンの表示更新
      _UpdateArrowButtonVisible();
    }

    if( m_state == STATE_INPUT_EVENT_WAIT )
    {
      if( UIView::IsButtonAnimation() == false )
      {
        //  ボタンアニメ終了
        SetState( STATE_INPUT_STOP );
      }
    }

    if( m_state == STATE_INPUT_STOP )
    {
    }

    if( m_state == STATE_AUTO_SCROLL )
    {
      enum
      {
        SUB_STATE_REQ_MOVE  = 0,
        SUB_STATE_WAIT_MOVE
      };

      if( m_subState == SUB_STATE_REQ_MOVE )
      {
        u32 currentListIdx  = m_listParty.GetCurrentListIdx();
        if( m_autoScrollListGoalIdx == currentListIdx )
        {
          //  ゴールに到達したので終了
          if( m_bAutoScrollEndNextStateIdle == true )
          {
            SetState( STATE_IDLE );
          }
          else
          {
            //  すでに入力ＯＦＦ状態になっている
            SetState( STATE_INPUT_STOP );
          }
        }
        else
        if( m_autoScrollListGoalIdx < currentListIdx )
        {
          //  戻る
          m_listParty.RequestScroll( App::Tool::NewPaneList::SCROLL_MODE_MINUS );

          m_subState  = SUB_STATE_WAIT_MOVE;
        }
        else
        if( currentListIdx < m_autoScrollListGoalIdx )
        {
          //  進める
          m_listParty.RequestScroll( App::Tool::NewPaneList::SCROLL_MODE_PLUS );

          m_subState  = SUB_STATE_WAIT_MOVE;
        }
      }

      if( m_subState == SUB_STATE_WAIT_MOVE )
      {
        if( m_listParty.IsMoveScroll() == false )
        {
          m_subState  = SUB_STATE_REQ_MOVE;
        }
      }
    }

    UIView::Update();

    //  リスト側で再生するSEを停止するか
    if( m_bListPlaySE == false )
    {
      m_listParty.StopSE();
    }
  }

  //--------------------------------------------------------------------------------------------
  /**
  * @brief  描画処理
  *         子ウインドウについても自動的にコールする(親→子の順）
  */
  //--------------------------------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::Draw( gfl2::gfx::CtrDisplayNo displayNo )
  {
    ::app::util::G2DUtil* pG2DUtil  = UIView::GetG2DUtil();
    for( s32 i = 0; i < LYT_WORK_MAX; ++i )
    {
      pG2DUtil->AddDrawableLytWkForOneFrame( m_pRenderManager, displayNo, i );
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief   ペインタッチ時を検知
    * @param[in] buttonId ボタンid
    * @return 入力処理を続けるかを返す
    */
  //------------------------------------------------------------------
  app::ui::UIInputListener::ListenerResult TeamSelectLowTopPokePartySelectView::OnLayoutPaneEvent( const u32 id )
  {
    //  idle状態でないと入力は受け付けない
    if( m_state != STATE_IDLE )
    {
      return  ENABLE_ACCESS;
    }

    m_pushButtonId  = (ButtonId)id;
    if( m_pushButtonId == BUTTON_ID_SELECT_LEFT )
    {
      if( m_bMoveListSkipInput == true )
      {
        //  先頭に移動
        SetStateAutoScroll( 0 );
      }
      else
      {
        //  リストを左に移動
        m_listParty.RequestScroll( App::Tool::NewPaneList::SCROLL_MODE_MINUS );
      }

      // @fix NMCat[460] Ｌ／Ｒを押した時の移動スキップを実行したのでクリアする
      m_bMoveListSkipInput  = false;

      return  DISABLE_ACCESS;
    }
    else
    if( m_pushButtonId == BUTTON_ID_SELECT_RIGHT )
    {
      if( m_bMoveListSkipInput == true )
      {
        //  最後尾に移動
        SetStateAutoScroll( m_initParam.viewArrayNum - 1 );
      }
      else
      {
        //  リストを右に移動
        m_listParty.RequestScroll( App::Tool::NewPaneList::SCROLL_MODE_PLUS );
      }

      // @fix NMCat[460] Ｌ／Ｒを押した時の移動スキップを実行したのでクリアする
      m_bMoveListSkipInput  = false;

      return  DISABLE_ACCESS;
    }
    else
    {
      SetState( STATE_INPUT_EVENT_WAIT );
    }

    return  DISABLE_ACCESS;
  }

  //------------------------------------------------------------------
  /**
    * @brief   キー入力通知用リスナ
    * @param[in] pButton  ボタン入力の情報
    * @param[in] pKey     キー入力の情報
    * @param[in] pStick   スティック入力の情報
    * @return 入力処理を続けるかを返す
    */
  //------------------------------------------------------------------
  app::ui::UIInputListener::ListenerResult TeamSelectLowTopPokePartySelectView::OnKeyAction( gfl2::ui::Button* pButton, gfl2::ui::VectorDevice* pKey, gfl2::ui::VectorDevice* pStick )
  {
    //  idle状態でないと入力は受け付けない
    if( m_state != STATE_IDLE )
    {
      return  ENABLE_ACCESS;
    }

    app::tool::ButtonManager* pButtonManager  = UIView::GetButtonManager();

    if( pButton->IsTrigger( gfl2::ui::BUTTON_A ) )
    {
      if( pButtonManager->IsButtonInputEnable( BUTTON_ID_TEAM_ENTER ) == true )
      {
        pButtonManager->StartSelectedAct( BUTTON_ID_TEAM_ENTER );

        return  DISABLE_ACCESS;
      }
    }
    else
    if( pButton->IsTrigger( gfl2::ui::BUTTON_Y ) )
    {
      if( pButtonManager->IsButtonInputEnable( BUTTON_ID_TEAM_SETTING ) == true )
      {
        pButtonManager->StartSelectedAct( BUTTON_ID_TEAM_SETTING );

        return  DISABLE_ACCESS;
      }
    }
    else
    if( m_listParty.IsMoveScroll() == false )
    {
      // @fix GFNMCat[697] ここの処理に来た段階でリストの端に来ていることもあるので矢印ボタンの表示更新しないと不要なボタン入力が起きる
      _UpdateArrowButtonVisible();

      if( pButton->IsTrigger( gfl2::ui::BUTTON_L ) )
      {
        //  先頭に移動
        // @fix NMCat[460] 矢印が表示していない場合に強制移動フラグをonにするとoffにする処理が通らないので矢印が押せるかどうかの判定を追加
        if( pButtonManager->IsButtonVisible( BUTTON_ID_SELECT_LEFT ) == true )
        {
          m_bMoveListSkipInput  = true;
          pButtonManager->StartSelectedAct( BUTTON_ID_SELECT_LEFT );

          return  DISABLE_ACCESS;
        }
      }
      else
      if( pButton->IsTrigger( gfl2::ui::BUTTON_R ) )
      {
        //  最後尾に移動
        // @fix NMCat[460] 矢印が表示していない場合に強制移動フラグをonにするとoffにする処理が通らないので矢印が押せるかどうかの判定を追加
        if( pButtonManager->IsButtonVisible( BUTTON_ID_SELECT_RIGHT ) == true )
        {
          m_bMoveListSkipInput  = true;
          pButtonManager->StartSelectedAct( BUTTON_ID_SELECT_RIGHT );

          return  DISABLE_ACCESS;
        }
      }
      else
      // @fix GFNMCat[2318] ボタン押しっぱなしで移動できるように
      if( pButton->IsHold( gfl2::ui::BUTTON_LEFT ) )
      {
        m_bMoveListSkipInput  = false;
        pButtonManager->StartSelectedAct( BUTTON_ID_SELECT_LEFT );
        return  DISABLE_ACCESS;
      }
      // @fix GFNMCat[2318] ボタン押しっぱなしで移動できるように
      else
      if( pButton->IsHold( gfl2::ui::BUTTON_RIGHT ) )
      {
        m_bMoveListSkipInput  = false;
        pButtonManager->StartSelectedAct( BUTTON_ID_SELECT_RIGHT );
        return  DISABLE_ACCESS;
      }
    }

    return  ENABLE_ACCESS;
  }

  //------------------------------------------------------------------
  /**
    * @brief   状態設定
    * @param[in] newStaet 設定する状態
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::SetState( const State newStaet )
  {
    m_state     = newStaet;
    m_subState  = 0;

    if( m_state == STATE_IDLE )
    {
      UIView::SetInputEnabledAllView( true );
      m_listParty.SetSpeedScroll( m_saDefaultScrollParam );
    }
    else
    if( m_state == STATE_INPUT_EVENT_WAIT )
    {
      // @fix NMCat[5703] 注意喚起メッセージを表示する時はこのViewを表示しないように親から外している
      //                  １フレームのタイミングだが、うまく合えば発生する
      if( UIView::GetSuperView() != NULL )
      {
        UIView::GetSuperView()->SetInputEnabledAllView( false );
      }
    }
    else
    if( m_state == STATE_INPUT_STOP )
    {
      UIView::SetInputEnabledAllView( false );
    }
    else
    if( m_state == STATE_AUTO_SCROLL )
    {

      m_listParty.SetSpeedScroll( m_saAutoLoopScrollParam );

      //  自動スクロールの妨げになる操作をしないようにする
      
      app::tool::ButtonManager* pButtonManager  = UIView::GetButtonManager();

      //  スクロール中はボタンを押せないようにする
      _SetEnableButtonInput( false );

      //  矢印を押せないようにする
      pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_LEFT );
      pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_RIGHT );
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief      指定したチーム項目のオブジェクトのY座標設定をする
    * @param[in]  selectIdx : 座標設定するパーティーオブジェクトの選択idx
    * @param[in]  yPos : Y座標
    */
  //------------------------------------------------------------------
  void  TeamSelectLowTopPokePartySelectView::SetPosYPokePartyFrame( const u32 selectIdx, const f32 yPos )
  {
    u32 idx = selectIdx;
    GFL_ASSERT( idx < GFL_NELEMS( m_pPokePartyLayoutList ) );

    m_pPokePartyLayoutList[ idx ]->SetYPos( yPos );
  }

  //------------------------------------------------------------------
  /**
    * @brief   選択したリストidx取得
    */
  //------------------------------------------------------------------
  u32  TeamSelectLowTopPokePartySelectView::GetCurrentListIdx() const
  {
    return  m_listParty.GetCurrentListIdx();
  }

  //------------------------------------------------------------------
  /**
    * @brief   選択したレイアウトリストidx取得
    */
  //------------------------------------------------------------------
  u32  TeamSelectLowTopPokePartySelectView::GetCurrentLayoutListIdx() const
  {
    return  m_listParty.GetCurrentLayoutListIdx();
  }

  //------------------------------------------------------------------
  /**
    * @brief      自動スクロールステート設定
    * @param[in]  listGoalIdx: スクロール後のゴールidx
    * @param[in]  bNextStateIdle: 処理終了時にステートをidleにするか
    * @return     設定成功 true / 設定失敗 false
    */
  //------------------------------------------------------------------
  bool TeamSelectLowTopPokePartySelectView::SetStateAutoScroll( const u32 listGoalIdx, const bool bNextStateIdle )
  {
    GFL_ASSERT( listGoalIdx < m_initParam.viewArrayNum );

    if( m_listParty.GetCurrentListIdx() != listGoalIdx )
    {
      m_autoScrollListGoalIdx = listGoalIdx;
      m_bAutoScrollEndNextStateIdle = bNextStateIdle;

      SetState( STATE_AUTO_SCROLL );

      return true;
    }

    return false;
  }

  //------------------------------------------------------------------
  /**
    * @brief   リストのＹ座標
    */
  //------------------------------------------------------------------
  f32 TeamSelectLowTopPokePartySelectView::GetListYPos()
  {
    return  ( m_pPokePartyLayoutList[ 0 ]->GetDefaultPos().y );
  }

  //------------------------------------------------------------------
  /**
    * @brief   2D画面の作成
    * @param   pAppLytBuff レイアウトデータのバイナリポインタ
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::_Initialize2D( void* pAppLytBuff, gfl2::str::MsgData* pAppMsgData, print::WordSet* pWordSet )
  {
    // アーカイブIDテーブル
    const ::app::util::G2DUtil::LytResData aResTbl[] =
    {
      {  pAppLytBuff, 32, ::app::util::G2DUtil::ATTACH_NONE },
    };

    //  作成するレイアウトワーク
    const ::app::util::G2DUtil::LytwkData aSetupData[ LYT_WORK_MAX ] =
    {
      {
        0,
        LYTRES_TEAMSELECT_TEAMSELECT_TAM_LOW_000_BFLYT,
        LA_TEAMSELECT_TEAMSELECT_TAM_LOW_000___NUM,
        pAppLytBuff,
        true,
        ::app::util::G2DUtil::SETUP_LOWER,
        true
      }
    };

    UIView::Create2D( m_pHeap, NULL, 32, aResTbl, GFL_NELEMS(aResTbl), aSetupData, GFL_NELEMS(aSetupData), pAppMsgData, pWordSet );
  }

  //------------------------------------------------------------------
  /**
    * @brief       TeamSelectPokePartyLayoutPartsクラスのレイアウトパラメータを出力
    * @param[out]  出力パラメータ
    * @param[in]   viewレイアウトidx( 0 - 3 )
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::_OuputPokePartyLayoutParam( struct TeamSelectPokePartyLayoutParts::LAYOUT_PARAM* pOutParam, const u32 layoutIdx )
  {
    GFL_ASSERT( pOutParam );
    GFL_ASSERT( 0 < GFL_NELEMS( m_pPokePartyLayoutList ) );
    GFL_ASSERT( GFL_NELEMS( m_sPokePartyLayoutSetupDataArray ) == GFL_NELEMS( m_pPokePartyLayoutList ) );
    GFL_ASSERT( layoutIdx < GFL_NELEMS( m_pPokePartyLayoutList ) );

    pOutParam->lytWorkId            = LYT_WORK_NORMAL;
    pOutParam->pLayoutWork          = UIView::GetLayoutWork( LYT_WORK_NORMAL );
    pOutParam->pG2dUtil             = UIView::GetG2DUtil();
    pOutParam->pLytMuitiResID       = &pOutParam->pG2dUtil->GetLayoutResourceID( 0 );
    pOutParam->pPokeIconTexManager  = m_initParam.pPokeIconTexManager;

    const struct POKE_PARTY_VIEW_SETUP_DATA* pSetupData = &m_sPokePartyLayoutSetupDataArray[ layoutIdx ];

    //  ルートのペインポインタ取得
    pOutParam->pRootViewPartsPane  = pOutParam->pLayoutWork->GetPartsPane( pSetupData->rootPaneIdx );
    GFL_ASSERT( pOutParam->pRootViewPartsPane );

    //  アニメidデータをコピー転送
    gfl2::std::MemCopy( &pSetupData->animeData, &pOutParam->animeData, sizeof( pOutParam->animeData ) );
  }

  //------------------------------------------------------------------
  /**
    * @brief      レイアウトViewパラメータを設定
    * @param[in]  viewListIdx:     描画リストidx
    * @param[in]  viewDataListIdx: idx値の配列のViewデータを設定
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::_SetListItemView( const u32 viewListIdx, const u32 viewDataListIdx )
  {
    GFL_ASSERT( viewListIdx < GFL_NELEMS( m_pPokePartyLayoutList ) );
    GFL_ASSERT( viewDataListIdx < m_initParam.viewArrayNum );

    m_pPokePartyLayoutList[ viewListIdx ]->SetViewParam( &m_initParam.pViewParamArray[ viewDataListIdx ], false );
  }

  //------------------------------------------------------------------
  /**
    * @brief   ボタンの有効設定
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::_SetEnableButtonInput( const bool bFlg )
  {
    // @fix NMCat[459] スクロール中は親のボタンも封鎖する
    SetModal( bFlg == false );

    app::tool::ButtonManager* pButtonManager  = UIView::GetButtonManager();

    //  スクロール移動中は特定のボタンを押せないようにする
    pButtonManager->SetButtonInputEnable( BUTTON_ID_TEAM_ENTER, bFlg );
    // @fix NMCat[459] 入れ替えボタンを封鎖していなかった
    pButtonManager->SetButtonInputEnable( BUTTON_ID_TEAM_SETTING, bFlg );
    pButtonManager->SetButtonInputEnable( BUTTON_ID_SELECT_LEFT, bFlg );
    pButtonManager->SetButtonInputEnable( BUTTON_ID_SELECT_RIGHT, bFlg );
  }

  //  矢印ボタンの表示更新
  void TeamSelectLowTopPokePartySelectView::_UpdateArrowButtonVisible()
  {
    app::tool::ButtonManager* pButtonManager  = UIView::GetButtonManager();

    u32 currentListIdx  = m_listParty.GetCurrentListIdx();
    if( m_initParam.viewArrayNum <= 1 )
    {
      //  選択項目が１以下であれば、リスト操作ボタンは非表示に
      pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_LEFT );
      pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_RIGHT );
    }
    else
    {
      pButtonManager->SetButtonVisible( BUTTON_ID_SELECT_LEFT );
      pButtonManager->SetButtonVisible( BUTTON_ID_SELECT_RIGHT );

      if( currentListIdx <= 0 )
      {
        pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_LEFT );
      }
      else
      if( ( m_initParam.viewArrayNum - 1 ) <= currentListIdx )
      {
        pButtonManager->SetButtonInvisible( BUTTON_ID_SELECT_RIGHT );
      }
    }
  }

//  ここから先は TeamSelectLowTopPokePartySelectView::ListParty クラスの定義
  //-----------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //-----------------------------------------------------------------------------
  TeamSelectLowTopPokePartySelectView::ListParty::ListParty( TeamSelectLowTopPokePartySelectView* pRootView, app::util::Heap* pUtilHeap )
  {
    _Clear();

    GFL_ASSERT( pRootView );
    GFL_ASSERT( pUtilHeap );

    m_pRootView = pRootView;
    m_pUtilHeap = pUtilHeap;
  }

  //-----------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //-----------------------------------------------------------------------------
  TeamSelectLowTopPokePartySelectView::ListParty::~ListParty()
  {
  }

  //------------------------------------------------------------------
  /**
    * @brief   初期化
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::ListParty::Initialize()
  {
    gfl2::lyt::LytWk* pLytWk  = m_pRootView->GetLayoutWork( LYT_WORK_NORMAL );
    GFL_ASSERT( pLytWk );

    u32 paneListMax = GFL_NELEMS( m_aListPaneData );
    u32 itemListMax = m_pRootView->_GetListMax();    

    App::Tool::NewPaneList::SETUP_PARAM param =
    {
      App::Tool::NewPaneList::TYPE_H,

      pLytWk,
      m_aListPaneData,
      //  描画管理するペイン最大数
      paneListMax,

      //  リスト最大数
      itemListMax,
      0,
      0,
      0.0f,

      0.0f,
      0.0f,

      160.0f,

      -1,
      1,

      NULL,
    };

    //  高さはレイアウトデータに合わせる
    {
      const TeamSelectPokePartyLayoutParts& rTmpPartyListItem  = m_pRootView->_GetPokePartyListItem( 0 );
      param.start_y = rTmpPartyListItem.GetDefaultPos().y;
    }

    {
      App::Tool::NewPaneList::PANE_DATA*  pCurrentPaneData  = NULL;
      for( u32 i = 0; i < paneListMax; ++i )
      {
        const TeamSelectPokePartyLayoutParts& pCurrentListItem  = m_pRootView->_GetPokePartyListItem( i );

        pCurrentPaneData  = &m_aListPaneData[ i ];

        pCurrentPaneData->base        = pCurrentListItem.GetLayoutParam().pRootViewPartsPane;
        pCurrentPaneData->bound       = pCurrentPaneData->base;
        pCurrentPaneData->cursor_pos  = pCurrentPaneData->base;
        pCurrentPaneData->anm_touch   = app::tool::ButtonManager::ANIMATION_NULL;
        pCurrentPaneData->anm_release = app::tool::ButtonManager::ANIMATION_NULL;
        pCurrentPaneData->anm_cancel  = app::tool::ButtonManager::ANIMATION_NULL;
        pCurrentPaneData->anm_select  = app::tool::ButtonManager::ANIMATION_NULL;
      }
    }

    m_pNewPaneList = GFL_NEW( m_pUtilHeap->GetDeviceHeap() ) App::Tool::NewPaneList( m_pUtilHeap, &param, this );

    {
      //  縦の非タッチ領域値から上下のタッチ領域座標を指定
      const u32 cNonTouchAreaHeightSize  = 30;

      //  横はフルサイズで指定
      m_pNewPaneList->SetupTouchArea( cNonTouchAreaHeightSize, DISPLAY_LOWER_HEIGHT - cNonTouchAreaHeightSize, 0, DISPLAY_LOWER_WIDTH );
    }

    m_pNewPaneList->SetupInsertPane( NULL );
    m_pNewPaneList->SetupNoLoop();
    m_pNewPaneList->SetupSE( SEQ_SE_DECIDE1, SEQ_SE_SELECT1 );
    m_pNewPaneList->SetupEffectMode( App::Tool::NewPaneList::EFFECT_MODE_ALPHA );
    //  タッチ入力のみ、キー入力は使う側で判定する。なぜなら矢印オブジェクトのアニメ制御をしてからリスト移動するから
    m_pNewPaneList->SetupInputMode( false, true, false );

    m_pNewPaneList->Initialize();

    //  ルートViewにくっつける
    m_pRootView->AddSubView( m_pNewPaneList );

    //  初回表示設定
    {
      u32 loopNum= 0;
      if( paneListMax <= itemListMax )
      {
        loopNum = paneListMax;
      }
      else
      {
        //  ペイン表示項目数より全リストアイテム数が少ない
      }

      for( u32 i = 0; i < loopNum; ++i )
      {
        m_pRootView->_SetListItemView( i, i );
      }
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief   終了処理
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::ListParty::Terminate()
  {
    if( m_pNewPaneList != NULL )
    {
      m_pNewPaneList->RemoveFromSuperView();
      m_pNewPaneList->Terminate();
      GFL_SAFE_DELETE( m_pNewPaneList );
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief      リストスクロール移動
    * @param[in]  mode スクロールタイプ
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::ListParty::RequestScroll( const App::Tool::NewPaneList::ScrollMode mode )
  {
    if( m_pNewPaneList != NULL )
    {
      m_pNewPaneList->SetExScroll( mode );
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief      リストスクロール移動量設定
    * @param[in]  pScrollSpeedParamArray: スピード値の配列
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::ListParty::SetSpeedScroll( const App::Tool::NewPaneList::ScrollParam* pScrollSpeedParamArray )
  {
    if( m_pNewPaneList != NULL )
    {
      GFL_ASSERT( pScrollSpeedParamArray );
      m_pNewPaneList->SetupScrollParam( pScrollSpeedParamArray );
    }
  }

  //------------------------------------------------------------------
  /**
    * @brief   リストスクロール中
    * @return   リストスクロール中 true / リストスクロール停止 false
    */
  //------------------------------------------------------------------
  bool TeamSelectLowTopPokePartySelectView::ListParty::IsMoveScroll() const
  {
    return  m_pNewPaneList->IsModuleAction();
  }

  //------------------------------------------------------------------
  /**
    * @brief    リストのカレントリストidx
    * @return   カレントリストidx
    */
  //------------------------------------------------------------------
  u32 TeamSelectLowTopPokePartySelectView::ListParty::GetCurrentListIdx() const
  {
    return  m_pNewPaneList->GetListPos();
  }

  //------------------------------------------------------------------
  /**
    * @brief    リストのレイアウトリストidx
    * @return   レイアウトリストidx
    */
  //------------------------------------------------------------------
  u32 TeamSelectLowTopPokePartySelectView::ListParty::GetCurrentLayoutListIdx() const
  {
    u32 paneListMax = GFL_NELEMS( m_aListPaneData );
    return  m_pNewPaneList->GetListPos() % paneListMax;
  }

  //------------------------------------------------------------------
  /**
    * @brief    リストのSE再生を停止
    */
  //------------------------------------------------------------------
  void TeamSelectLowTopPokePartySelectView::ListParty::StopSE()
  {
    Sound::StopSE( SEQ_SE_DECIDE1 );
    Sound::StopSE( SEQ_SE_SELECT1 );
  }

  void TeamSelectLowTopPokePartySelectView::ListParty::PaneListListener_Write( const App::Tool::NewPaneList::PANE_DATA * pane, u32 pane_index, u32 pos )
  {
    GFL_ASSERT( pane_index < GFL_NELEMS( m_aListPaneData ) );
    //  項目内容を更新
    m_pRootView->_SetListItemView( pane_index, pos );
  }

  void TeamSelectLowTopPokePartySelectView::ListParty::PaneListListener_MoveCursor( const App::Tool::NewPaneList::PANE_DATA * pane, u32 pane_index, u32 pos )
  {
  }

  void TeamSelectLowTopPokePartySelectView::ListParty::PaneListListener_Decide( u32 pos )
  {
    GFL_PRINT( "★Decide -middle[%d]\n", pos );
  }

GFL_NAMESPACE_END(TeamSelect)
GFL_NAMESPACE_END(NetApp)
