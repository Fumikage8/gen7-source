	//================================================================================================
/**
 * @brief 鳴き声プレイヤー
 * @file VoicePlayer.h
 * @author obata_toshihiro
 * @date 2012.02.07
 */
	//================================================================================================
#ifndef __VOICEPLAYER_H__
#define __VOICEPLAYER_H__
#pragma once

#include "Sound/include/PMSoundSystem.h"

namespace Sound {

  class VoiceDataManager;


  class VoicePlayer
  {
    public:

	//================================================================================================
  /**
   * @brief コンストラクタ
   * @param sound_system       再生に使用するサウンドシステム
   * @param sound_handle_index 再生に使用するサウンドハンドル
   * @param seq_itemID         再生するシーケンスのサウンドアイテムID
   * @param warc_ItemID        再生する波形アーカイブのサウンドアイテムID
   * @param actor_index_3D     ボイスプレイヤーに関連づける専用3Dアクターのindex
   */
	//================================================================================================
      VoicePlayer( 
          PMSoundSystem* sound_system,
          PMSoundSystem::HandleIndex sound_handle_index,
					gfl2::fs::AsyncFileManager* pFileReadManager,
          u32 seq_itemID,
          u32 warc_ItemID,
          u8 actor_index_3D );

	//================================================================================================
  /**
   * @brief デストラクタ
   */
	//================================================================================================
      virtual ~VoicePlayer();

	//================================================================================================
  /**
   * @brief アクティベート
	 * @param heap バッファ確保対象ヒープ
	 * @retval true = 成功 : false = 失敗
   */
	//================================================================================================
			b32 Activate(gfl2::heap::HeapBase* heap); 
	
	//================================================================================================
  /**
   * @brief デアクティベート
	 * @retval true = 実行 : false = なにもしなかった
   */
	//================================================================================================
			b32 Deactivate(void); 
	
	//================================================================================================
  /**
   * @brief アクティベート判定
	 * @retval true = アクティベート済み : false = 未アクティベート
   */
	//================================================================================================
			b32 IsActivate( void );
	
  //================================================================================================
  /**
   * @brief  プレイヤーの状態リセットリクエスト(ゲームリセット用)
   *
   * @note    BTS6040対策
   * @note    既に読み込み中のスレッド終了を待ち、ボイス再生中の場合はStopさせます
   *          trueが返るまで呼び続けてください
   *
	 * @retval true   ストップリクエストが処理された
   * @retval false  まだ処理中
   */
	//================================================================================================
      b32 ResetForceReq( void );
	
	//================================================================================================
  /**
   * @brief   ボイス波形登録
   * @param		seqID		再生するシーケンスID
   * @param		warcID  再生する波形アーカイブID
   * @param		heap		ファイル展開用ヒープ
	 * @retval	true = ロードスレッド設定終了
   * @retval  false = ロード不可状態
   */
	//================================================================================================
			b32 RegisterVoice(u32 seqID, u32 warcID, gfl2::heap::HeapBase* heap);
	
  //================================================================================================
  /**
   * @brief   ボイス波形解放
	 * @retval	true = 波形解放
   * @retval  false = 解放失敗
   */
	//================================================================================================
			b32 FreeVoice(u32 seqID, u32 warcID, gfl2::heap::HeapBase* heap);

	//================================================================================================
  /**
   * @brief   読み込み済みボイスの再生
	 * @param		act3D	3Dモード
	 * @retval	true = 再生開始 : false = 再生ボイスなし
   */
	//================================================================================================
			b32 PlayVoiceRegister( b32 act3D = false);
	
	//================================================================================================
  /**
   * @brief ボイスのロード + 再生
   * @param		seqID		再生するシーケンスID
   * @param		warcID  再生する波形アーカイブID
   * @param		heap		ファイル展開用ヒープ
	 * @param		act3D		3Dモード
	 * @retval	true = ロードスレッド＆再生設定終了 : false = ロード不可状態
   */
	//================================================================================================
			b32 PlayVoice
				(u32 seqID, u32 warcID, gfl2::heap::HeapBase* heap, b32 act3D = false, u32 userId = 0 );
	
	//================================================================================================
  /**
   * @brief ボイスの停止
	 * @param	fadeFrames フェードフレーム(GFBTS2505対策で必ず0になるので指定の意味はない 130514)
	 * @retval true = 実行 : false = なにもしなかった
   */
	//================================================================================================
			b32 StopVoice(s32 fadeFrames);
	
	//================================================================================================
  /**
   * @brief 更新処理
   */
	//================================================================================================
      void Update( void );

	//================================================================================================
  /**
   * @brief 再生処理中判定(読み込み + ボイス再生+フェードアウト中はtrue)
   * @retval true = 再生中 : false 再生中でない
   */
	//================================================================================================
			b32 IsPlayingState( void ) const;
	
  //================================================================================================
  /**
   * @brief ボイス再生中ステート判定(ボイス再生+フェードアウト中はtrue)
   * @retval true = 再生中 : false 再生中でない
   */
	//================================================================================================
      b32 IsVoicePlayingState( void ) const;
  
  //================================================================================================
  /**
   * @brief ボイスエフェクトリクエスト有効ステータス判定(読み込み + ボイス再生中はtrue)
   * @retval true = エフェクト有効中 : false エフェクトリクエストを受け付けない
   */
	//================================================================================================
      b32 IsEffectEnableState( void ) const;

	//================================================================================================
  /**
   * @brief 再生時エフェクト
   */
	//================================================================================================
	//================================================================================================
  /*
   * @brief 再生エフェクト 複数種のエフェクトをまとめてリクエスト
   * @param effectInfo  エフェクトパラメータ指定構造体参照
   * 
   * @note
   * この関数を呼び終わったらeffectInfoは破棄してOK
   */
	//================================================================================================
      void ChangeEffect( const VoicePlayInfo& vEffectInfo );

	//================================================================================================
  /*
   * @brief ボリューム変更 リクエスト処理
   * @param value  音量の倍率( 1.0fで等倍 )
   * @param change_frame 音量変化にかけるフレーム数(省略可：省略した場合は即時変化=0)
   */
	//================================================================================================
			void ChangeVolume( const f32 value, const u32 change_frame = 0 );
  
	//================================================================================================
  /*
   * @brief ピッチ変更 リクエスト処理
   * @param value   周波数比率
   * @note
   * 周波数比率 0.5 = 1 オクターブ 低
   * 周波数比率 1.0 = 等倍 ( デフォルト値 )
   * 周波数比率 2.0 = 1 オクターブ 高
   */
	//================================================================================================
      void ChangePitch( const f32 value );
  
	//================================================================================================
  /**
   * @brief パン変更 リクエスト処理
   * @param value   パン
   * @note
   * value が -1.0 なら, 音が左から聞こえる.
   * value が  0.0 なら, 音が正面から聞こえる.
   * value が +1.0 なら, 音が右から聞こえる.
   */
	//================================================================================================
      void ChangePan( const f32 value );

	//================================================================================================
  /**
   * @brief サラウンド変更 リクエスト処理(現状、通常モードのみ有効)
   * @param value  パン
   * @note
   * value が  0.0 なら, 音が最前方から聞こえる.
   * value が +1.0 なら, 音が中央から聞こえる.
   * value が +2.0 なら, 音が最後方から聞こえる.
   */
	//================================================================================================
      void ChangeSurroundPan( const f32 value );
  
	//================================================================================================
  /**
   * @brief テンポ変更 リクエスト処理(現状、通常モードのみ有効)
   * @param value   テンポを倍率で指定( 1.0fで元に戻る )
   */
	//================================================================================================
      void ChangeTempo( const f32 value );
	//================================================================================================
  /**
   * @brief ポジション変更 リクエスト処理(3Dモードのみ有効)
   * @param pos   ポジション
   */
	//================================================================================================
      void Change3DPos( const gfl2::math::VEC3& pos );

	//================================================================================================
  /**
   * @brief ベロシティ変更 リクエスト処理(3Dモードのみ有効)
   * @param velocity  ベロシティを指定
   */
	//================================================================================================
      void Change3DVelocity( const gfl2::math::VEC3& velocity );

	//================================================================================================
  /**
   * @brief サウンドのエフェクトセンド量を変更する
   *
   * @param busID AUXのバス
   * @param send  センド量
   * @retval true送られた false失敗
   */
	//================================================================================================
      b32 SetFxSend( nw::snd::AuxBus busID, float send );

  //================================================================================================
  /**
  * @BRIEF サウンドのユーザー指定番号を取得する
  *
  * @RETVAL 再生時に指定された番号
  */
  //================================================================================================
      u32 GetVoiceUserId(void){ return m_userId; }

	//================================================================================================
  /**
   * @brief 非公開部
   */
	//================================================================================================
    private: 

      enum State {
        STATE_EMPTY,				// 未アクティベート(空)
        STATE_STANDBY,			// 待機中
        STATE_LOADING,			// データ読み込み待ち
        STATE_PLAYSTANDBY,	// 再生待ち
        STATE_PLAYING,			// 再生中
        STATE_STOPPING,			// 停止(フェードアウト)待ち
        STATE_NUM,
      };

      enum PlayMode {
        PLAY_MODE_NORMAL,  //通常再生
        PLAY_MODE_3DACTOR, //3Dアクター再生
        PLAY_MODE_NUM,
      };

      enum RegistMode {
        WAVE_FREE,    //読み込み済み波形を破棄
        WAVE_REGIST,  //読み込み済み波形を維持
      };  

      struct SoundData {
        void* buffer;     // 読み込んだデータのバッファ
        u32 dataSize;     // 読み込んだデータのサイズ
        u32 dataID;       // 読み込んだデータのID
      };

      PMSoundSystem* m_soundSystem;                   // 再生に使用するサウンドシステム
      PMSoundSystem::HandleIndex m_soundHandleIndex;  // 再生に使用するサウンドハンドル
			gfl2::fs::AsyncFileManager* m_pFileReadManager;		// ファイル読み込みマネージャ
      u32 m_seqItemID;                                // 再生するシーケンスのアーカイブ内アイテムID
      u32 m_warcItemID;                               // 再生する波形アーカイブのアーカイブ内アイテムID
      State m_state;                                  // プレイヤー状態
      PlayMode			m_playMode;                       // プレイモード
      VoicePlayInfo m_effect;                         // サウンドエフェクトリクエスト管理構造体
      u8 m_3DActorIndex;                              // 3D再生用アクターIndex
      u32 m_userId;                                   // 使用者が指定できるId
			SoundData m_sd_seq;															// サウンドシーケンスデータ
			SoundData m_sd_warc;														// サウンド波形データ

      b32        m_req_play;                         // 再生リクエストフラグ
			RegistMode	m_regist_mode;				  						// バッファ登録状態維持(連続再生モード)

      gfl2::heap::HeapBase* m_heapForLoad;            //データロード用ヒープの保存 GFNMCat[5264] Sound::Updateのスレッド化対策

      void PlayCore( void );                          // ノーマルサウンドプレイ実行
      void StopCore( void );                          // プレイモード共通再生停止処理
  
			void InitSoundData(SoundData* pSd);
			void CreateSoundData(SoundData* pSd, gfl2::heap::HeapBase* heap, u32 size);
			void DeleteSoundData(SoundData* pSd);

			void _loadVoice(u32 seqID, u32 warcID, gfl2::heap::HeapBase* heap);
      void _loadVoiceReq(u32 seqID, u32 warcID, gfl2::heap::HeapBase* heap); //GFNMCat[5264] Sound::Updateのスレッド化対策
			void _playVoice( void );
			State _stopVoiceReq( RegistMode regist_mode, s32 fadeFrames);
			void _stopVoice( RegistMode regist_mode );
			void _registerVoice( b32 set_f );

			b32 IsVoicePlaying( void ) const;

			inline void OnEffectBit(const VoiceEffectBit effectBit);
			inline void OffEffectBit(const VoiceEffectBit effectBit);
			inline b32 GetEffectBit(const VoiceEffectBit effectBit) const;
 
      void VoiceEffectCore( void );

			void ChangeVolumeCore(void);
      void ChangePitchCore( void );
      void ChangePanCore( void );
      void ChangeTempoCore( void );
      void ChangeSurroundPanCore( void );
      void Change3DPosCore( void );
      void Change3DVelocityCore( void );

      void RegisterVoiceDataWithSoundDataManager( u32, const void* );

      State UpdateState_EMPTY( void );
      State UpdateState_STANDBY( void );
      State UpdateState_LOADING( void );
      State UpdateState_PLAYSTANDBY( void );
      State UpdateState_PLAYING( void );
      State UpdateState_STOPPING( void );
  };


} //namespace Sound 

#endif //__VOICEPLAYER_H__ 
