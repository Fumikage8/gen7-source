#pragma once
//=================================================================================================
/**
*  @file   FieldMoveModelManager.h
*  @brief  フィールド用 動作モデルマネージャー
*  @author yy-ikeuchi@gamefreak.co.jp
*  @date   2015.02.17
*/
//=================================================================================================
#include <heap/include/gfl2_Heap.h>
#include "../../../../../../poke_3d_lib/model/include/gfl2_CharaModelFactory.h"
#include "../../include/MoveModel/FieldMoveModel.h"

namespace Field{ namespace MoveModel {

class FieldMoveModelManager
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  FieldMoveModelManager();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~FieldMoveModelManager();

  //----------------------------------------------------------------------------
  /**
  *  @brief  初期化
  *
  *  @param  pFileManager ファイルマネージャー
  *  @param  pFileHeap    ファイルマネージャーで使われるヒープ
  *  @param  arcId        ファイルマネージャー
  *  @return trueは成功、falseは失敗
  */
  //-----------------------------------------------------------------------------
  bool Initialize(gfl2::fs::AsyncFileManager* pFileManager, gfl2::heap::HeapBase* pFileHeap, u32 arcId);

  //----------------------------------------------------------------------------
  /**
  *  @brief  解放
  */
  //-----------------------------------------------------------------------------
  void Terminate(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  前更新(コリジョン以外の座標/姿勢の変更を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void PrevUpdate(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  更新(コリジョンシーンへの座標/姿勢の登録を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void Update(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  後更新(コリジョンシーンからの結果を適用し最終的な座標/姿勢の決定を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void PostUpdate(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  動作モデルの作成
  *
  *  @param  fieldMoveModelId       動作モデルID
  *  @param  pFieldMoveModelHeader  動作モデルリクエスト
  *  @return 成否
  */
  //-----------------------------------------------------------------------------
  bool Create(FIELD_MOVE_MODEL_ID fieldMoveModelId,const FieldMoveModelHeader* pFieldMoveModelHeader);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  動作モデルの削除
  *
  *  @param  fieldMoveModelId  動作モデルID
  */
  //-----------------------------------------------------------------------------
  void Delete(FIELD_MOVE_MODEL_ID fieldMoveModelId);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIエディタに自身のインスタンスを登録
  *
  *  @param  エディタに表示したい動作モデルID
  */
  //-----------------------------------------------------------------------------
  void CreateRttiEditorPage(FIELD_MOVE_MODEL_ID fieldMoveModelId);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIエディタから自身のインスタンスを削除
  *
  *  @param  エディタから削除したい動作モデルID
  */
  //-----------------------------------------------------------------------------
  void DeleteRttiEditorPage(FIELD_MOVE_MODEL_ID fieldMoveModelId);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  動作モデルの取得
  *
  *  @param  fieldMoveModelId  動作モデルID
  *  @return 動作モデル
  */
  //-----------------------------------------------------------------------------
  FieldMoveModel* getFieldMoveModel(FIELD_MOVE_MODEL_ID fieldMoveModelId){ return &m_fieldMoveModel[ (u32)fieldMoveModelId ]; }

  //=====================================================================================================================
  //! @brief poke_3d::model::CharaModelManagerのラッパー部分
  //=====================================================================================================================

  //-----------------------------------------------------------------------------
  /**
  *  @brief  指定キャラリソースの非同期ロード開始
  *
  *  @param  characterId       キャラクターID
  */
  //-----------------------------------------------------------------------------
  void LoadAsync(u32 characterId){ m_charaModelFactory.LoadModelAsync(characterId); }

  //-----------------------------------------------------------------------------
  /**
  *  @brief  指定キャラリソースが非同期ロード中かどうか
  *
  *  @param  characterId       キャラクターID
  *  @return trueは成功、falseは失敗
  */
  //-----------------------------------------------------------------------------
  bool IsLoaded(u32 characterId){ return m_charaModelFactory.IsModelLoaded(characterId); }

  //-----------------------------------------------------------------------------
  /**
  *  @brief  指定キャラリソースの破棄
  *
  *  @param  characterId       キャラクターID
  */
  //-----------------------------------------------------------------------------
  void Unload(u32 characterId){ m_charaModelFactory.UnloadModel(characterId); }

  //-----------------------------------------------------------------------------
  /**
  *  @brief  キャラクターリソースの全破棄
  */
  //-----------------------------------------------------------------------------
  void UnloadAll(void){ m_charaModelFactory.UnloadModelAll(); }

private:
  
  //=====================================================================================================================
  //! @brief 内部
  //=====================================================================================================================

  gfl2::heap::HeapBase             *m_pHeap;
  FieldMoveModel                    m_fieldMoveModel[FIELD_MOVE_MODEL_MAX];
  poke_3d::model::CharaModelFactory m_charaModelFactory;
};

}; //end of namespace MoveModel
}; //end of namespace Field
