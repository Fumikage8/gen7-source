#pragma once
//=================================================================================================
/**
*  @file   FieldMoveModel.h
*  @brief  フィールド用 動作モデル
*  @author yy-ikeuchi@gamefreak.co.jp
*  @date   2015.02.17
*/
//=================================================================================================
#include "FieldMoveModel_define.h"
#include "../MoveCode/FieldMoveCode_define.h"
#include "../ActionCommand/FieldActionCommand_define.h"
#include "../Collision/DynamicActor.h"
#include "../../../../../../poke_3d_lib/model/include/gfl2_CharaModel.h"

namespace Field{ namespace MoveModel {

class FieldMoveCodeBase;

class FieldMoveModel : public poke_3d::model::CharaModel
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  FieldMoveModel();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~FieldMoveModel();

  //----------------------------------------------------------------------------
  /**
  *  @brief  初期化
  *
  *  @param  pFieldMoveModelHeader  作成リクエスト
  *  @return trueは成功、falseは失敗
  */
  //-----------------------------------------------------------------------------
  virtual bool Setup(const FieldMoveModelHeader * pFieldMoveModelHeader);

  //----------------------------------------------------------------------------
  /**
  *  @brief  解放
  */
  //-----------------------------------------------------------------------------
  void Clear(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  前更新(コリジョン以外の座標/姿勢の変更を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void PrevUpdate(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  更新(コリジョンシーンへの座標/姿勢の登録を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void Update(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  後更新(コリジョンシーンからの結果を適用し最終的な座標/姿勢の決定を行う)
  */
  //-----------------------------------------------------------------------------
  virtual void PostUpdate(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  初期化しているかどうか
  *
  *  @param  trueは初期化済み、falaraは未初期化
  */
  //-----------------------------------------------------------------------------
  b32 isSetup(void){ return m_isSetup; }

  //----------------------------------------------------------------------------
  /**
  *  @brief  当たる側アクターの取得
  */
  //-----------------------------------------------------------------------------
  DynamicActor* getDynamicActor(void){ return &m_dynamicActor; }

  //----------------------------------------------------------------------------
  /**
  *  @brief  動作ビット  ON
  *
  *  @param  fieldMoveModelStateBit  ビット
  */
  //-----------------------------------------------------------------------------
  void onStateBit(FieldMoveModelStateBit fieldMoveModelStateBit);

  //----------------------------------------------------------------------------
  /**
  *  @brief  動作ビット  OFF
  *
  *  @param  fieldMoveModelStateBit  ビット
  */
  //-----------------------------------------------------------------------------
  void offStateBit(FieldMoveModelStateBit fieldMoveModelStateBit);

  //----------------------------------------------------------------------------
  /**
  *  @brief  動作ビット  チェック
  *
  *  @param  fieldMoveModelStateBit  ビット
  *  @return trueはbitOn、falseはbitOff
  */
  //-----------------------------------------------------------------------------
  bool CheckStateBit(FieldMoveModelStateBit fieldMoveModelStateBit) const;  

  //----------------------------------------------------------------------------
  /**
  *  @brief  アクションコマンドの設定
  *
  *  @param  actionCommand  アクションコマンド
  */
  //-----------------------------------------------------------------------------
  void SetActionCommand(FieldActionCommandId actionCommand);

  //----------------------------------------------------------------------------
  /**
  *  @brief  アクションコマンドの強制停止
  */
  //-----------------------------------------------------------------------------
  void ClearActionCommand(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIマネージャーに自身のプロパティを登録
  */
  //-----------------------------------------------------------------------------
  virtual void RegistRtti(void);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIエディタに自身のインスタンスを登録
  *
  *  @param  エディタに表示したい名前
  */
  //-----------------------------------------------------------------------------
  virtual void CreateRttiEditorPage(c16* pDispName);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  RTTIエディタから自身のインスタンスを削除
  */
  //-----------------------------------------------------------------------------
  virtual void DeleteRttiEditorPage(void);

private:

  //! ステート
  b32                      m_isSetup;
  u32                      m_StateBit;
  s32                      m_test;

  //! ムーブコード
  const FieldMoveCodeBase *m_MoveCode;
  FieldMoveCodeWork        m_moveCodeWork;

  //! アクションコマンド
  ActionCommandWork        m_ActionCommandWork;

  //! コリジョン
  DynamicActor             m_dynamicActor;

};


}; //end of namespace MoveModel
}; //end of namespace Field
