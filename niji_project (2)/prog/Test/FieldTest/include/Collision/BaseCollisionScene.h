#pragma once
//=================================================================================================
/**
 *  @file   BaseCollisionScene.h
 *  @brief  ベースコリジョンシーン
 *  @author yy-ikeuchi@gamefreak.co.jp
 *  @date   2015.02.17
 */
//=================================================================================================
#include <types/include/gfl2_Typedef.h>

class BaseSolver;
class BaseActor;
class StaticActor;
class DynamicActor;

namespace fld  { namespace mmodel {
  class MoveModel;
}}

namespace gfl2 {
  namespace gfx {
    class IGLAllocator;
  }
  namespace renderingengine { namespace scenegraph { namespace instance {
    class InstanceNode;
  } } }
}

//----------------------------------------------------------------------------------------
//! @brief コリジョンシステム
//----------------------------------------------------------------------------------------
class BaseCollisionScene
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  BaseCollisionScene();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  virtual ~BaseCollisionScene();

  //-----------------------------------------------------------------------------
  /**
  *  @brief  初期化
  *
  *  @param  pHeap  利用するヒープ
  */
  //-----------------------------------------------------------------------------
  virtual void setup(gfl2::gfx::IGLAllocator* pHeap);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  削除
  */
  //-----------------------------------------------------------------------------
  virtual void terminate(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  コリジョン判定
  */
  //-----------------------------------------------------------------------------
  virtual void update(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突されるアクターの作成
  *
  *  @return アクター
  */
  //-----------------------------------------------------------------------------
  StaticActor* createStaticActor(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突するアクターの作成
  *
  *  @return アクター
  */
  //-----------------------------------------------------------------------------
  DynamicActor* createDynamicActor(void);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突されるアクターの追加
  *
  *  @param  pActor  コリジョンシステムに登録したいアクター
  */
  //-----------------------------------------------------------------------------
  void registStaticActor(StaticActor *pActor);

  //----------------------------------------------------------------------------
  /**
  *  @brief  衝突するアクターの追加
  *
  *  @param  pActor  コリジョンシステムに登録したいアクター
  */
  //-----------------------------------------------------------------------------
  void registDynamicActor(DynamicActor *pActor);

private:

  //----------------------------------------------------------------------------
  /**
  *  @brief   解決者の作成
  *
  *  @return  solver
  *  @note    この関数をオーバーライドすることにより衝突の挙動を変更できます
  */
  //-----------------------------------------------------------------------------
  virtual BaseSolver* createSolver(void);

private:

  gfl2::gfx::IGLAllocator*                                   m_pAllocator;
  gfl2::renderingengine::scenegraph::instance::InstanceNode* m_rootStaticActorRoot;
  gfl2::renderingengine::scenegraph::instance::InstanceNode* m_rootDynamicActorRoot;
  BaseSolver*                                                m_pSolver;
  u32                                                        m_SolverUpdateCnt;

};
