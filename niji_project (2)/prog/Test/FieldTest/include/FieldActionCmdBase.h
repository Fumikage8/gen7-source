//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		FieldActionCmdBase.h
 *	@brief  フィールドアクションコマンド　基底クラス
 *	@author	tomoya takahashi
 *	@date		2011.05.14
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifndef __FIELDACTIONCMDBASE_H__
#define __FIELDACTIONCMDBASE_H__

#include <types/include/gfl2_Typedef.h>
#include <math/include/gfl2_Quaternion.h>
#include "FieldPawnTypes.h"

namespace fld { namespace mmodel {
	class MoveModel;
}}

namespace field{
namespace mmodel{

//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					クラス宣言
*/
//-----------------------------------------------------------------------------
class ActionCmdBase
{
public:

  //-------------------------------------
  ///	アクションコマンド　更新の戻り値
  //=====================================
  enum AcmdRet{
    ACMD_RET_NONE,          ///<何も実行されなかった
    ACMD_RET_CONTINUE,      ///<続く
    ACMD_RET_ONE_TIME_END,  ///<このフレームの処理は終わり
    ACMD_RET_END,           ///<コマンドの処理完了
  };
  
  //-------------------------------------
  ///	動作コード処理　共通ワーク　ワークサイズ
  //=====================================
  static const u32 WORK_SIZE  = 256;

  //-------------------------------------
  ///	動作コード処理　共通ワーク
  //=====================================
  struct ActionCmdWork
  {
    fld::mmodel::MoveModel*	p_model;			///< 動作モデル
    Acmd					acmd;				///< アクションコマンド
    u32						seq;				///< シーケンス
	gfl2::math::Quaternion	qua;				///< 姿勢
    u32						work[WORK_SIZE/4];	///< 共有ワーク
  };

  //----------------------------------------------------------------------------
  /**
   *	@brief  アクションコマンドワーク　初期化
   *
   *	@param	p_wk        ワーク
   *	@param	p_model     動作モデルワークベース
   */
  //-----------------------------------------------------------------------------
  static void InitializeAcmdWork( ActionCmdWork* p_wk, fld::mmodel::MoveModel* p_model );

  //----------------------------------------------------------------------------
  /**
   *	@brief  共有ワーク取得
   *
   *	@param	p_wk      ワーク
   *	@param	size      サイズ
   *
   *	@return 共有ワークサイズ
   */
  //-----------------------------------------------------------------------------
  static void* GetAcmdWork( ActionCmdWork* p_wk, u32 size );

  //----------------------------------------------------------------------------
  /**
   *	@brief  アクションコマンドの設定
   *
   *	@param	p_wk
   *	@param	acmd 
   */
  //-----------------------------------------------------------------------------
  static void SetAcmd( ActionCmdWork* p_wk, Acmd acmd , gfl2::math::Quaternion qua);

  //----------------------------------------------------------------------------
  /**
   *	@brief  シーケンスを進める
   *
   *	@param	p_wk    ワーク
   *	@param	add     変動値
   */
  //-----------------------------------------------------------------------------
  static void AddAcmdWorkSeq( ActionCmdWork* p_wk, s32 add );

  //----------------------------------------------------------------------------
  /**
   *	@brief  シーケンスを設定
   *
   *	@param	p_wk    ワーク
   *	@param	seq     シーケンス
   */
  //-----------------------------------------------------------------------------
  static void SetAcmdWorkSeq( ActionCmdWork* p_wk, s32 seq );

  //----------------------------------------------------------------------------
  /**
   *	@brief  シーケンスを取得
   *
   *	@param	p_wk    ワーク
   */
  //-----------------------------------------------------------------------------
  static s32 GetAcmdWorkSeq( ActionCmdWork* p_wk );

  //----------------------------------------------------------------------------
  /**
   *	@brief  終了チェック
   *
   *	@param	p_wk  ワーク
   *
   *	@retval true    終了
   *	@retval false   途中
   */
  //-----------------------------------------------------------------------------
  static bool IsAcmdWorkEnd( const ActionCmdWork* cp_wk );

  //----------------------------------------------------------------------------
  /**
   *	@brief  ワークリセット
   *
   *	@param	p_wk  ワーク
   */
  //-----------------------------------------------------------------------------
  static void ClearAcmdWork( ActionCmdWork* p_wk );
  
  //-------------------------------------
  ///	アクション処理型
  //  静的メンバ関数じゃないと登録できない。
  //=====================================
  typedef AcmdRet (*AcmdFunc)( ActionCmdWork* );

  //-------------------------------------
  ///	登録できるシーケンスの最大数
  //=====================================
  static const u32 ACMDFUNC_SEQ_MAX = 16;

public:
  
  // コンストラクタ
  ActionCmdBase(void) : m_SeqNum(0){}

  // デストラクタ
  virtual ~ActionCmdBase(){}


  //----------------------------------------------------------------------------
  /**
   *	@brief  対応するアクションコマンドを返す
   *
   *	@return アクションコマンド
   */
  //-----------------------------------------------------------------------------
  virtual Acmd GetAcmdID( void ) const = 0;

  //----------------------------------------------------------------------------
  /**
   *	@brief  アクションコマンドの更新
   *
   *	@retval ACMD_RET_ONE_TIME_END,      ///<続く
   *	@retval ACMD_RET_END,           ///<終わり
   */
  //-----------------------------------------------------------------------------
  ActionCmdBase::AcmdRet UpdateAcmd( ActionCmdWork* p_wk ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  動作モデルPush処理による強制終了時の処理
   */
  //-----------------------------------------------------------------------------
  virtual void PushCmd( ActionCmdWork* p_wk ) const {}

public:

  //----------------------------------------------------------------------------
  /**
   *	@brief  共通終了処理
   *
   *	@param	p_work  ワーク
   *
   *	@retval ACMD_RET_END
   */
  //-----------------------------------------------------------------------------
  static ActionCmdBase::AcmdRet AcEnd( ActionCmdWork* p_work );

protected:

  AcmdFunc    m_pFuncTbl[ACMDFUNC_SEQ_MAX];		///< シーケンス分の関数テーブル
  u32         m_SeqNum;							///< シーケンス数

};

} // mmodel
} // field

#endif	// __FIELDACTIONCMDBASE_H__

