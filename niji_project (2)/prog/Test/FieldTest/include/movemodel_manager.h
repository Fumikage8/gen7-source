#pragma once
//=================================================================================================
/**
*  @file  movemodel_manager.h
*  @brief
*  @author  tamada@gamefreak.co.jp
*  @date  2014.03.11
*/
//=================================================================================================
#include <heap/include/gfl2_Heap.h>
#include "movemodel_define.h"

class graphics;
class RscManager;

namespace fld{ namespace mmodel {

class MoveModel;
class MoveCodeBase;

class MoveModelManager
{
public:

  //-----------------------------------------------------------------------------
  /**
  *  @brief  コンストラクタ
  */
  //-----------------------------------------------------------------------------
  MoveModelManager(gfl2::heap::HeapBase * p_heap);

  //-----------------------------------------------------------------------------
  /**
  *  @brief  デストラクタ
  */
  //-----------------------------------------------------------------------------
  ~MoveModelManager();

  //----------------------------------------------------------------------------
  /**
  *  @brief  初期化
  *    
  *  @return trueは成功、falseは失敗
  */
  //-----------------------------------------------------------------------------
  bool  Initialize  ( void );

  //----------------------------------------------------------------------------
  /**
  *  @brief  解放
  */
  //-----------------------------------------------------------------------------
  void  Terminate  ( void );

  //----------------------------------------------------------------------------
  /**
  *  @brief  モデルの作成
  *    
  *  @param  p_header    リクエスト
  *  @return モデルのインスタンス
  */
  //-----------------------------------------------------------------------------
  MoveModel*  CreateMoveModel( const MoveModelHeader * p_header );

  //----------------------------------------------------------------------------
  /**
  *  @brief  モデルの削除
  *
  *  @param  削除したいモデル
  */
  //-----------------------------------------------------------------------------
  void  DeleteMoveModel  ( MoveModel * p_model );

  //----------------------------------------------------------------------------
  /**
  *  @brief  モデルの全削除
  */
  //-----------------------------------------------------------------------------
  void  DeleteAllModels( void );

  //----------------------------------------------------------------------------
  /**
  *  @brief  管理モデルの全更新
  *    
  *  @param  frame    進める時間
  */
  //-----------------------------------------------------------------------------
  void  UpdateAllModels( void );

  //----------------------------------------------------------------------------
  /**
  *  @brief  モデルの取得
  *    
  *  @param  id  取得したいモデルのID
  *  @return    モデルのインスタンス
  */
  //-----------------------------------------------------------------------------
  MoveModel  *GetMoveModel( MMDL_ID id ) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief  モデルの取得
  *    
  *  @param  dataIndex   取得したいモデルの要素
  *  @return モデルのインスタンス
  */
  //-----------------------------------------------------------------------------
  MoveModel*  GetMoveModelByDataIndex( u32 dataIndex ) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief  MoveCodeの取得
  *    
  *  @param  code   取得したいコードの要素
  *  @return MoveCodeのインスタンス
  */
  //-----------------------------------------------------------------------------
  static const MoveCodeBase * GetMoveCode( MOVE_CODE code );

private:

  gfl2::heap::HeapBase      *m_pHeap;
  MoveModel                 *m_MoveModel[ MMDL_MAX ];
  static const MoveCodeBase *m_MoveCodeTable[ fld::mmodel::MOVE_CODE_NONE ];  //@todo 管理方法変更

};

}; //end of namespace mmodel
}; //end of namespace fld

