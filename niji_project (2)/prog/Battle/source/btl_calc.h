#if !defined( __BTL_CALC_H__ )
#define __BTL_CALC_H__
//=============================================================================================
/**
 * @file  btl_Calc.h
 * @brief ポケモンXY バトル -システム-  各種、数値の計算ルーチン
 * @author  taya
 *
 * @date  2010.12.20  作成
 */
//=============================================================================================
#pragma once

#include "Battle/include/battle_SetupParam.h"

#include "btl_common.h"
#include "btl_sickcont.h"
#include "btl_pokeparam.h"

GFL_NAMESPACE_BEGIN(btl)

class MainModule;
class POKECON;

namespace calc {

//--------------------------------------------------------------
/**
 *  逃げたクライアント情報
 */
//--------------------------------------------------------------
typedef struct {
  u32 count;
  u8  clientID[ BTL_CLIENT_MAX ];
}ESCAPEINFO;

//--------------------------------------------------------------
/**
 *  ポケモンの能力値IDテーブル
 */
//--------------------------------------------------------------
extern const pml::pokepara::PowerID  PokePowerIDTable[ pml::pokepara::POWER_NUM ];


//=============================================================================================
/**
 * システム初期化
 *
 * @param   randSys       乱数コンテキスト
 * @param   bSakasaBtl    true なら 相性さかさバトルモード
 * @param   heapHandle
 */
//=============================================================================================
extern void InitSys( RandSys* randSys, bool bSakasaBtl, HeapHandle heapHandle );


//=============================================================================================
/**
 * システム（乱数系）リセット
 *
 * @param   randContext
 */
//=============================================================================================
extern void ResetSys( const u32 randSeed );

//=============================================================================================
/**
 * システム終了
 */
//=============================================================================================
extern void QuitSys( void );


//=============================================================================================
/**
 *  タイプ相性基礎計算
 *
 * @param   wazaType    ワザのタイプ
 * @param   pokeType    ワザを受けるポケモンタイプ
 *
 * @retval  BtlTypeAff
 */
//=============================================================================================
extern BtlTypeAff TypeAff( pml::PokeType wazaType, pml::PokeType pokeType );

//=============================================================================================
/**
 * 基本ダメージ計算
 *
 * @param   wazaPow
 * @param   atkPower
 * @param   atkLevel
 * @param   defGuard
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 DamageBase( u32 wazaPower, u32 atkPower, u32 atkLevel, u32 defGuard );


//=============================================================================================
/**
 *  相性ダメージ計算
 *
 * @param   rawDamage
 * @param   aff
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 AffDamage( u32 rawDamage, BtlTypeAff aff );

//=============================================================================================
/**
 * 相性値の掛け合わせ（２タイプあるポケモン対応）
 *
 * @param   aff1
 * @param   aff2
 *
 * @retval  BtlTypeAff    掛け合わせ後の相性値
 */
//=============================================================================================
extern BtlTypeAff TypeAffMul( BtlTypeAff aff1, BtlTypeAff aff2 );


//=============================================================================================
/**
 * タイプ相性計算（ポケモンタイプそのまま使用可能）
 *
 * @param   wazaType
 * @param   pokeType
 *
 * @retval  BtlTypeAff
 */
//=============================================================================================
extern BtlTypeAff TypeAffPair( pml::PokeType wazaType, PokeTypePair pokeType );


//=============================================================================================
/**
 *  抵抗相性を全て取得
 *
 * @param   type    タイプ
 * @param   dst     [out] 抵抗相性を持つタイプを格納する配列
 *
 * @retval  u8
 */
//=============================================================================================
extern u8 GetResistTypes( pml::PokeType type, pml::PokeType* dst );

//=============================================================================================
/**
 * 乱数値を返す
 *  ※返す値は 0〜(pattern-1) の範囲。pattern==0だと、32bit全範囲。
 *
 * @param   pattern   乱数の取りうる値の範囲
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 GetRand( u32 range );

//=============================================================================================
/**
 *  min以上 〜 max以下の範囲内で乱数取得
 *
 * @param   min
 * @param   max
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 RandRange( u32 min, u32 max );

//=============================================================================================
/**
 * 整数×倍率（固定少数）計算
 *
 * @param   value
 * @param   ratio
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 MulRatio( u32 value, fx32 ratio );


//=============================================================================================
/**
 * 倍率計算（整数x固定小数）※ゼロになった場合、最低１に切り上げ
 *
 * @param   value
 * @param   ratio   倍率（％）
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 MulRatio_OverZero( u32 value, fx32 ratio );

//=============================================================================================
/**
 * 倍率計算（整数x整数）
 *
 * @param   value
 * @param   ratio   倍率（％）
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 MulRatioInt( u32 value, u32 ratio );

//=============================================================================================
/**
 * 命中率計算
 *
 * @param   defPer
 * @param   rank
 *
 * @retval  u8
 */
//=============================================================================================
extern u8 HitPer( u8 defPer, u8 rank );

//=============================================================================================
/**
 * 乱数によるクリティカル判定
 *
 * @param   rank     クリティカルランク
 * @param   ratio    通常計算結果に補正する倍率（１：補正なし／２：クリティカル率２倍）
 *
 * @retval  bool  true=クリティカル発生
 */
//=============================================================================================
extern bool CheckCritical( u8 rank, int ratio );

//=============================================================================================
/**
 * ワザ系状態異常の、デフォルトの継続パラメータを作成
 *
 * @param   sick
 * @param   cont    [out]
 *
 */
//=============================================================================================
extern void MakeDefaultWazaSickCont( WazaSick sick, const BTL_POKEPARAM* attacker, BTL_SICKCONT* cont );

//=============================================================================================
/**
 * ワザ系状態異常の継続パラメータ（ポケモン依存型）を作成
 *
 * @param   pokeID
 */
//=============================================================================================
extern BTL_SICKCONT MakeWazaSickCont_Poke( u8 pokeID, u8 causePokeID );


//=============================================================================================
/**
 * ポケモン系状態異常の、デフォルトの継続パラメータを作成
 *
 * @param   sick    状態異常コード
 *
 * @retval  BTL_SICK_CONT   デフォルト状態異常パラメータ
 */
//=============================================================================================
extern BTL_SICKCONT MakeDefaultPokeSickCont( pml::pokepara::Sick sick, u8 causePokeID );


//=============================================================================================
/**
 * ランク段階によるステータスの増減計算
 *
 * @param   defaultVal    ランクフラットな状態の値
 * @param   rank          ランク段階
 *
 * @retval  u16   ランク状態による変化後の値
 */
//=============================================================================================
extern u16 StatusRank( u16 defaultVal, u8 rank );


//=============================================================================================
/**
 * ポケモンの最大HP * 1/n を計算（最低０）
 *
 * @param   bpp
 * @param   denom
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 QuotMaxHP_Zero( const BTL_POKEPARAM* bpp, u32 denom );

//=============================================================================================
/**
 * ポケモンの最大HP * 1/n を計算（最低１になるように補正）
 *
 * @param   bpp
 * @param   denom
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 QuotMaxHP( const BTL_POKEPARAM* bpp, u32 denom );


//=============================================================================================
/**
 * 基本状態異常か判定
 *
 * @param   sickID
 *
 * @retval  BOOL
 */
//=============================================================================================
extern bool IsBasicSickID( WazaSick sickID );

//=============================================================================================
/**
 * 該当の天候によるターンチェックダメージを計算
 *
 * @param   bpp
 * @param   weather
 *
 * @retval  u16     ダメージ値
 */
//=============================================================================================
extern u16 RecvWeatherDamage( const BTL_POKEPARAM* bpp, BtlWeather weather );

//=============================================================================================
/**
 * 天候・ワザタイプ相性による威力倍率補正
 *
 * @param   weather
 * @param   wazaType
 *
 * @retval  fx32
 */
//=============================================================================================
extern fx32 GetWeatherDmgRatio( BtlWeather weather, pml::PokeType wazaType );

//=============================================================================================
/**
 * 天候が晴れの扱いか？(BTL_WEATHER_SHINEとBTL_WEATHER_DAY)
 *
 * @param   weather
 *
 * @retval  bool
 */
//=============================================================================================
//@バトル変更箇所
extern bool IsShineWeather( BtlWeather weather );

//=============================================================================================
/**
 * 天候が雨の扱いか？(BTL_WEATHER_RAINとBTL_WEATHER_STORM)
 *
 * @param   weather
 *
 * @retval  bool
 */
//=============================================================================================
//@バトル変更箇所
extern bool IsRainWeather( BtlWeather weather );

//=============================================================================================
/**
 * ワザデータの状態異常継続パラメータ値から、バトルで使う状態異常継続パラメータ値へ変換
 *
 * @param   wazaSickCont
 * @param   attacker    ワザを使ったポケモン
 * @param   sickCont    [out]
 *
 */
//=============================================================================================
extern void WazaSickContToBppSickCont( SICKCONT_PARAM wazaSickCont, const BTL_POKEPARAM* attacker, BTL_SICKCONT* sickCont );

//=============================================================================================
/**
 * ポケモンID（max=31）６個分の配列を 32bit にpackする
 *
 * @param   pokeIDList
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 PokeIDx6_Pack32bit( const u8* pokeIDList );

//=============================================================================================
/**
 * 32bit にpackするしたポケモンID（max=31）６個分を配列に書き戻し
 *
 * @param   pokeIDList
 *
 * @retval  u32
 */
//=============================================================================================
extern void PokeIDx6_Unpack32bit( u32 pack, u8* pokeIDList );

//=============================================================================================
/**
 * 最大ヒット回数を受け取り、実際にヒットする回数（ランダム補正）を返す
 *
 * @param   numHitMax
 *
 * @retval  u8
 */
//=============================================================================================
extern u8 HitCountStd( u8 numHitMax );

//=============================================================================================
/**
 * 「メンタルハーブ」で治る対象の状態異常チェック
 *
 * @param   bpp
 *
 * @retval  WazaSick
 */
//=============================================================================================
extern WazaSick CheckMentalSick( const BTL_POKEPARAM* bpp );

//=============================================================================================
/**
 * タイプ相性（厳密）->タイプ相性（おおまか）に変更
 *
 * @param   aff
 *
 * @retval  BtlTypeAffAbout
 */
//=============================================================================================
extern BtlTypeAffAbout TypeAffAbout( BtlTypeAff aff );

//=============================================================================================
/**
 * 確率事象チェック
 *
 * @param   per
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 IsOccurPer( u32 per );

//=============================================================================================
/**
 * 数値切り上げ
 *
 * @param   value
 * @param   min
 *
 * @retval  int
 */
//=============================================================================================
extern int Roundup( int value, int min );

//=============================================================================================
/**
 * 選択対象タイプを返す
 *
 * @param waza      取得対象の技
 * @param attacker  技を撃つポケモン
 */
//=============================================================================================
extern WazaTarget GetWazaTarget( WazaID waza, const BTL_POKEPARAM* attacker );

//=============================================================================================
/**
 * 「のろい」の選択対象タイプを返す
 *
 * @param   attacker
 *
 * @retval  WazaTarget
 */
//=============================================================================================
extern WazaTarget GetNoroiTargetType( const BTL_POKEPARAM* attacker );

//=============================================================================================
/**
 * ワザターゲットをランダムで自動決定（サーバ計算用）
 *
 * @param   mainModule
 * @param   bpp
 * @param   waza
 *
 * @retval  BtlTargetPos
 */
//=============================================================================================
extern BtlPokePos DecideWazaTargetAuto( const MainModule* mainModule, const POKECON* pokeCon, const BTL_POKEPARAM* bpp, WazaID waza, b32 IsClient = false );

//=============================================================================================
/**
 * ワザターゲットをランダムで自動決定
 *  （クライアント用：整合性チェックサーバの計算に影響を与えないよう乱数系の状態をキープする）
 *
 * @param   mainModule
 * @param   pokeCon
 * @param   bpp
 * @param   waza
 * @param   pRandContextSaveWork    乱数コンテキスト保存用の一時ワーク領域（クライアントが用意）
 *
 * @retval  BtlPokePos
 */
//=============================================================================================
extern BtlPokePos  DecideWazaTargetAutoForClient( const MainModule* mainModule, const POKECON* pokeCon,
      const BTL_POKEPARAM* bpp, WazaID waza, RandContext*  pRandContextSaveWork );

//=============================================================================================
/**
 * アイテムパラメータ取得
 *
 * @param   item
 * @param   paramID
 *
 * @retval  s32
 */
//=============================================================================================
extern s32 ITEM_GetParam( u16 item, u16 paramID );

//=============================================================================================
/**
 * アイテムがメールかどうか判定
 *
 * @param   item
 *
 * @retval  bool    メールならtrue
 */
//=============================================================================================
extern bool ITEM_IsMail( u16 item );


//=============================================================================================
/**
 * パーソナルパラメータ取得
 *
 * @param   mons_no
 * @param   form_no
 * @param   paramID
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 PERSONAL_GetParam( int mons_no, int form_no, pml::personal::ParamID paramID );

//=============================================================================================
/**
 * 【パーソナル】指定レベルになるための経験値取得
 *
 * @param   monsno
 * @param   formno
 * @param   level
 *
 * @retval  u32
 */
//=============================================================================================
extern u32 PERSONAL_GetMinExp( int monsno, int formno, u8 level );


//=============================================================================================
/**
 * 【パーソナル】進化レベルを超えているポケモンかどうか判定
 *
 * @param   mons_no
 * @param   formno
 * @param   level
 *
 * @retval  bool
 */
//=============================================================================================
extern bool PERSONAL_IsEvoCancelPokemon( int mons_no, FormNo formno, u8 level );


//=============================================================================================
/**
 * 特定のワザを除外した中からランダムでワザを決定（ゆびをふる専用？）
 *
 * @param   excludeWazaTbl    除外するワザIDテーブル
 * @param   tblElems          除外するワザIDテーブルの要素数
 *
 * @retval  WazaNo    決定したワザID
 */
//=============================================================================================
extern WazaNo RandWaza(const WazaNo* wazaTbl, u16 tblElems );

//=============================================================================================
// 賞金計算
//=============================================================================================
extern u32 CalcWinMoney( const BATTLE_SETUP_PARAM* sp );

extern u32 CalcLoseMoney( const BATTLE_SETUP_PARAM* sp, const POKECON* pokeCon );

//=============================================================================================
// ルールごとに変わる要素
//=============================================================================================
extern bool RULE_IsNeedSelectTarget( BtlRule rule );
extern u8   RULE_HandPokeIndex( BtlRule rule, u8 numCoverPos );






//--------------------------------------------------------------------
// BitFlag 配列処理
//--------------------------------------------------------------------

inline void BITFLG_Construction( u8* flags, u8 bufsize )
{
  flags[0] = bufsize;
  for(u32 i=1; i<bufsize; ++i){
    flags[i] = 0;
  }
}
inline void BITFLG_Set( u8* flags, u32 index )
{
  u8 byte = 1 + index / 8;
  u8 bit = index % 8;

  if( byte < flags[0] ){
    flags[ byte ] |= (1 << bit);
  }
}
inline bool BITFLG_Check( const u8* flags, u32 index )
{
  u8 byte = 1 + index / 8;
  u8 bit = index % 8;

  if( byte < flags[0] ){
    return (flags[ byte ] & (1 << bit)) != 0;
  }
  return 0;
}
inline void BITFLG_Off( u8* flags, u32 index )
{
  u8 byte = 1 + index / 8;
  u8 bit = index & 8;
  if( byte < flags[0] ){
    flags[ byte ] &= (~((u8)(1 << bit)));
  }
}

inline u32 ABS( int value )
{
  if( value < 0 ){
    value *= -1;
  }
  return value;
}


} // end of namespace 'calc'
GFL_NAMESPACE_END(btl)

#endif // __BTL_CALC_H__
