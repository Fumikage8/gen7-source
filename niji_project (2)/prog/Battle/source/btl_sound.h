#if !defined( __BTL_SOUND_H__ )
#define __BTL_SOUND_H__
//=============================================================================================
/**
 * @file    btl_sound.h
 * @brief   XY バトルシステム サウンド制御
 * @author  taya
 *
 * @date  2012.04.19  作成
 */
//=============================================================================================
#pragma once

#include "./btl_common.h"

GFL_NAMESPACE_BEGIN(btl)

  class BtlSound  {
  public:
    BtlSound( void );
    ~BtlSound();


    //--------------------------------------------------------------
    /**
     *  初期化
     */
    //--------------------------------------------------------------
    void Initialize( void );

    //--------------------------------------------------------------
    /**
     *  Main
     */
    //--------------------------------------------------------------
    void Main( void );

    //--------------------------------------------------------------
    /**
     *  BGM 再生
     */
    //--------------------------------------------------------------
    void StartBGM( u32 bgmNo );

    //--------------------------------------------------------------
    /**
     *  現在の BGM をフェードアウトし、次の BGM へ切り替え
     */
    //--------------------------------------------------------------
    void SwitchBGM( u32 nextBGMNo, u32 fadeFrames );

    //--------------------------------------------------------------
    /**
     *  BGM 停止
     */
    //--------------------------------------------------------------
    void StopBGM( void );

    //--------------------------------------------------------------
    /**
     *  BGM フェードアウト開始
     *  @note ノイズ防止のため10frame = xy_snd::BGM_FADE_VERY_FAST以上の値を指定すること
     */
    //--------------------------------------------------------------
    void FadeOutBGM( u32 frames );

    //--------------------------------------------------------------
    /**
     *  BGM フェードイン開始
     */
    //--------------------------------------------------------------
    void FadeInBGM( u32 frames );

    //--------------------------------------------------------------
    /**
     * BGM フェード中かどうか判定
     *
     * @retval  bool    フェード中なら true
     */
    //--------------------------------------------------------------
    bool CheckFadeOnBGM( void );


    //--------------------------------------------------------------
    /**
     * ピンチBGMへ切り替え
     */
    //--------------------------------------------------------------
    void StartPinchBGM( void );

    //--------------------------------------------------------------
    /**
     * ピンチBGMから通常BGMへ復帰
     */
    //--------------------------------------------------------------
    void StopPinchBGM( void );


    //--------------------------------------------------------------
    /**
     * SE再生
     */
    //--------------------------------------------------------------
    void PlaySE( u32 SENo );

    //--------------------------------------------------------------
    /**
     * SE終了待ち
     */
    //--------------------------------------------------------------
    bool IsSEFinished( u32 SENo );

    //--------------------------------------------------------------
    /**
     * ME再生
     */
    //--------------------------------------------------------------
    void StartME( u32 MENo );

    //--------------------------------------------------------------
    /**
     * ME終了待ち
     */
    //--------------------------------------------------------------
    bool WaitMEFinish( u32 MENo );

    //--------------------------------------------------------------
    /**
     * ME再生中チェック
     */
    //--------------------------------------------------------------
    bool IsMEPlaying( u32 MENo );


    void RestartBaseBGM( void);
    void StartNewBGMFromME( u32 bgmNo );

    //--------------------------------------------------------------
    /**
     *  再生BGMレイヤーを初期状態に強制的に戻す
     */
    //--------------------------------------------------------------
    void ForceFlatBgmLayer( void );

    //--------------------------------------------------------------
    /**
     * SEを全て停止
     */
    //--------------------------------------------------------------
    void StopAllSE( void );

    //技、鳴き声再生時のBGM制御
    void BgmVolumeDown_Waza(void);
    void BgmVolumeReset_Waza(void);
    void BgmVolumeDown_Voice(bool isPikach5);
    void BgmVolumeReset_Voice(void);
    void BgmVolumeDown_MegaEvo(void);
    void BgmVolumeReset_MegaEvo(void);
    void BgmVolumeDown_ZWaza(void);
    void BgmVolumeReset_ZWaza(void);


  private:
    enum {
      BGM_FADE_FRAMES = 8,
    };

    bool   m_bPinchModeDisable;
    bool   m_bBgmSwitchReq;
    int    m_bgmPushCounter;

    u32    m_nextBgmNo;
    f32    m_bgmVolume;

    bool m_fadeBgmMega;
    bool m_fadeBgmZWaza;
    bool m_fadeBgmWaza;
    bool m_fadeBgmVoice;


  };  // class BtlSound

GFL_NAMESPACE_END(btl)


#endif // __BTL_SOUND_H__
