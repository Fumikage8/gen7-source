//-----------------------------------------------------------------------------
/**
 * @file   btl_SideEffectStatus.h
 * @brief  １種類のサイドエフェクトの状態
 * @author obata_toshihiro
 * @date   2015.06.16
 */
//-----------------------------------------------------------------------------
#ifndef BTL_SIDEEFFECTSTATUS_H_INCLUDED
#define BTL_SIDEEFFECTSTATUS_H_INCLUDED

#include <types/include/gfl2_Typedef.h>
#include <macro/include/gfl2_Macros.h>

#include "./btl_sickcont.h"
#include "./btl_SideEff.h"


namespace btl {


  /**
   * @class SideEffectStatus
   * @brief １種類のサイドエフェクトの状態を管理する
   */
  class SideEffectStatus
  {
    GFL_FORBID_COPY_AND_ASSIGN( SideEffectStatus );

  public:

    //-------------------------------------------------------------------------
    /**
     * @brief コンストラクタ
     * @param sideEffect  管理対象のサイドエフェクト
     */
    //-------------------------------------------------------------------------
    SideEffectStatus( BtlSideEffect sideEffect );

    //-------------------------------------------------------------------------
    /**
     * @brief デストラクタ
     */
    //-------------------------------------------------------------------------
    virtual ~SideEffectStatus();


  public:

    //-------------------------------------------------------------------------
    /**
     * @brief サイドエフェクトを追加する
     *        すでに効果を発揮している場合、重ねがけする
     *
     * @param contParam  サイドエフェクトの継続パラメータ
     *
     * @retval true  サイドエフェクトを追加( 重ねがけ )した
     * @retval false サイドエフェクトを追加( 重ねがけ )できなかった
     */
    //-------------------------------------------------------------------------
    bool AddEffect( const BTL_SICKCONT& contParam );

    //-------------------------------------------------------------------------
    /**
     * @brief サイドエフェクトを解除する
     *
     * @retval true  サイドエフェクトを解除した
     * @retval false サイドエフェクトを解除できなかった( もともと有効でなかった )
     */
    //-------------------------------------------------------------------------
    bool RemoveEffect( void );

    //-------------------------------------------------------------------------
    /**
     * @brief サイドエフェクトが有効か？
     * @retval true  有効
     * @retval false 有効でない
     */
    //-------------------------------------------------------------------------
    bool IsEffective( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief 重ねがけ数を取得する
     */
    //-------------------------------------------------------------------------
    u32 GetAddCount( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief サイドエフェクトの効果ターン数を取得する
     */
    //-------------------------------------------------------------------------
    u32 GetMaxTurnCount( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief ターン経過数を取得する
     */
    //-------------------------------------------------------------------------
    u32 GetCurrentTurnCount( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief 残りターン数を取得する
     */
    //-------------------------------------------------------------------------
    u32 GetRemainingTurn( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief 継続ターン数の増加分を取得する
     */
    //-------------------------------------------------------------------------
    u32 GetTurnUpCount( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief 効果を引き起こしたポケモンのIDを取得する
     */
    //-------------------------------------------------------------------------
    u8 GetCausePokeID( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief ターン経過数をインクリメントする
     */
    //-------------------------------------------------------------------------
    void IncTurnCount( void );

    //-------------------------------------------------------------------------
    /**
     * @brief 効果ターン数を経過したか？
     * @retval true   効果ターン数を経過した
     * @retval false  効果ターン数を経過していない
     */
    //-------------------------------------------------------------------------
    bool IsTurnPassed( void ) const;

    //-------------------------------------------------------------------------
    /**
     * @brief サイドエフェクトの継続パラメータを取得する
     */
    //-------------------------------------------------------------------------
    const BTL_SICKCONT& GetContParam( void ) const;
       




  private:

    BtlSideEffect m_sideEffect;    // 管理対象のサイドエフェクト
    BTL_SICKCONT  m_contParam;     // 継続パラメータ
    u32           m_turn_counter;  // 経過ターン数カウンタ
    u32           m_add_counter;   // 重ねがけカウンタ

  };


} // namespace btl

#endif // BTL_SIDEEFFECTSTATUS_H_INCLUDED