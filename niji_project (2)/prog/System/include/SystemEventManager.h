//=========================================================================
/**
 * @file  SystemEventManager.h
 * @brief 本体システムイベント通知リスナを管理するマネージャ
 */
//=========================================================================
#ifndef __NIJI_SYSTEM_EVENT_MANAGER_H__
#define __NIJI_SYSTEM_EVENT_MANAGER_H__
#pragma once

#include <System/include/SystemEventListener.h>
#include <macro/include/gfl2_Macros.h>
#include <heap/include/gfl2_Heap.h>
#include <thread/include/gfl2_ScopedLock.h>
#include "base/include/gfl2_Singleton.h"

namespace System{
  
/**
 * @brief システムに起因するサスペンド＆レジュームイベントを通知するための管理マネージャ
 */
class SystemEventManager  : public gfl2::base::Singleton<SystemEventManager>
{
public:

  enum
  {
    EVENT_COUNT_MAX = 32,
  };

public:
  //----------------------------------------------------------------------------
  /**
   *  @brief  コンストラクタ
   */
  //-----------------------------------------------------------------------------
  SystemEventManager( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~SystemEventManager( void );

public:
  //-----------------------------------------------------------------------------
  /**
   * @brief システムイベントリスナを登録
   *
   * @param event 登録するイベントリスナ
   */
  //-----------------------------------------------------------------------------
  void RegistSystemEventListener( SystemEventListener* event );

  //-----------------------------------------------------------------------------
  /**
   * @brief システムイベントリスナを解除
   *
   * @param event 解除するイベントリスナ
   */
  //-----------------------------------------------------------------------------
  void RemoveSystemEventListener( SystemEventListener* event );

public:
  //-----------------------------------------------------------------------------
  /**
   * @brief アプレット起動を予約する
   *
   * @note 実行可能なタイミングでSystemEventListener::OnCallApplet()がコールされる
   *
   * @param applet 予約したいアプレット
   */
  //-----------------------------------------------------------------------------
  void ReserveAppletCalling( RESERVE_APPLET applet );

public:
  //----------------------------------------------------------------------------
  /**
   *  @brief  スリープ遷移時イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallSuspendWithSleep( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  スリープからの復帰時イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallResumeWithSleep( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  ホームメニュー遷移時イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallSuspendWithHomeMenu( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  ホームメニューからの復帰時イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallResumeWithHomeMenu( void );


  //----------------------------------------------------------------------------
  /**
   *  @brief  電源ボタンメニューからの復帰時イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallResumeWithPowerButton( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  システムアプレット起動許可通知イベントをコール
   *
   *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
   */
  //-----------------------------------------------------------------------------
  void CallSystemApplet( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief  システムアプレット予約があるかどうか
   *  @return ある場合TRUE
   */
  //-----------------------------------------------------------------------------
  bool IsReservedApplet(void);

  //-----------------------------------------------------------------------------
  /**
   *  @brief    終了発生時のイベントをコール
   *  @retval   true  全処理終了
   *  @retval   false 終了処理継続中
   *
   *  @attention  Call～という名前なのに他のメンバとふるまいが違うので注意
   *  @attention  Observerパターンとして名前が適切なのかは疑問の余地あり
   */
  //-----------------------------------------------------------------------------
  bool CallCloseApplication( void );

  //-----------------------------------------------------------------------------
  /**
  *  @brief    ホーム、スリープ、電源OFFのイベントをコール
  *  @retval   true  全処理終了
  *  @retval   false 終了処理継続中
  */
  //-----------------------------------------------------------------------------
  bool CallSuspendWithHomeSleepAndPower( void );

  //-----------------------------------------------------------------------------
  /**
  *  @brief    蓋とじイベントをコール（スリープ許可禁止にかかわらず呼ばれる）
  *  @note   本関数はシステム用関数であり、ユーザーコール禁止！
  */
  //-----------------------------------------------------------------------------
  void CallCloseCover( void );

private:

  bool m_reservedApplet[E_RESERVE_APPLET_MAX];   //!< システムアプレット起動予約
  //
  SystemEventListener*      m_event[EVENT_COUNT_MAX];  //!< イベントリスナ
  gfl2::thread::CriticalSection m_criticalSection;

};


}


/** ---------------------------------------------------------------------
//! @brief  SINGLETONの前方参照宣言
// ---------------------------------------------------------------------*/
SINGLETON_INSTANCE_DECLARATION( System::SystemEventManager );



#endif // 




