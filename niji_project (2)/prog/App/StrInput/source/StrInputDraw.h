#ifndef NIJI_PROJECT_APP_STRINPUT_DRAW_H_INCLUDED
#define NIJI_PROJECT_APP_STRINPUT_DRAW_H_INCLUDED
#pragma once
//==============================================================================
/**
 * @file    StrInputDraw.h
 * @brief   Frame関連
 * @author  fukushima_yuya
 * @date    2015.04.30
 * @note    sango_project app strinput_main.hから移植
 */
//==============================================================================

// niji
#include "App/StrInput/include/StrInputFrame.h"
#include "App/StrInput/source/StrInputData.h"
#include "App/StrInput/source/StrInputDef.h"
#include "App/StrInput/source/StrInputGraphic.h"
#include "App/StrInput/source/StrInputUi.h"

#include <AppLib/include/Util/app_util_heap.h>
#include <Print/include/hangul_composer.h>

// gflib2
#include <Fade/include/gfl2_FadeManager.h>
#include <ngc/include/gfl2_NGWordCheckListener.h>


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/**
 * @namespace  App::StrInput
 * @brief      文字入力画面
 */
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
GFL_NAMESPACE_BEGIN( App )
GFL_NAMESPACE_BEGIN( StrInput )

static const u32 INPUT_CODE_MAX = INPUT_MAX+1;  //!< 入力コード数 ( EOM込み )

//------------------------------------------------------------------------------
/**
 * @brief  サブワーク（他画面遷移時に解放される）
 */
//------------------------------------------------------------------------------
typedef struct SubWork {
  GraphicWork * pGraWork;   //!< グラフィックワーク
  UI * ui;                  //!< UI

  KeyMap * keyMap;  //!< キーマップデータ

  gfl2::str::STRCODE tmp[KeyMap::CHANGE_CODE_LEN];          //!< テンポラリ文字列バッファ
  gfl2::str::STRCODE romaji_str[KeyMap::CHANGE_CODE_LEN];   //!< ローマ字入力用文字列バッファ

  u32 startAnm;    //!< 画面開始時のアニメ

  u32  ngWordResult;      //!< NGワードチェックの結果
  u32  ngWordLangCount;   //!< NGワードチェックの言語カウンタ
  bool errPutFlag;        //!< エラー表示フラグ

  print::HangulComposer * pHangulComposer;    //!< ハングル入力クラス

}SUB_WORK;

//------------------------------------------------------------------------------
/**
 * @brief  メインワーク
 */
//------------------------------------------------------------------------------
typedef struct MainWork {
  APP_PARAM * prm;  //!< 外部設定パラメータ

  // GameManager関連
  GameSys::GameManager * gameManager;             //!< ゲームマネージャ
  gfl2::fs::AsyncFileManager * pFileReadManager;  //!< ファイルリードマネージャ
  gfl2::ui::DeviceManager * pUiDevManager;        //!< 入力デバイス管理オブジェクト
  gfl2::Fade::FadeManager * pFadeManager;         //!< フェードマネージャ
  gfl2::ngc::NGWordChecker * pNGWordChecker;      //!< NGワードチェッカー
  Savedata::MyStatus * pMyStatus;                 //!< プレイヤーデータ

  int  mainSeq;       //!< メインシーケンス
  int  nextSeq;       //!< メインシーケンス遷移用シーケンス
  int  subSeq;        //!< サブシーケンス
  int  fadeNextSeq;   //!< フェード後に遷移するシーケンス

  gfl2::str::STRCODE  str[INPUT_CODE_MAX];  //!< 入力文字列
  gfl2::str::STRCODE codeSpace;             //!< スペースの文字コード
  u32  inputMode;     //!< 入力モード
  u32  inputType;     //!< 入力タイプ
  u32  shift;         //!< SHIFTキー
  u16  inputPos;      //!< 入力位置
  u16  inputSiz;      //!< 入力サイズ

  u32  inputSizeMax;  //!< 入力最大数

  u32  keybordMode;   //!< キーボード時のモード（韓国語専用）
}MAIN_WORK;


//------------------------------------------------------------------------------
/**
 * @brief  メインシステム
 */
//------------------------------------------------------------------------------
class MainSystem : public gfl2::ngc::NGWordCheckListener
{
private:
  //!< 入力文字列チェック定義
  enum {
    WORD_CHECK_TRUE = 0,              //!< 正常
    WORD_CHECK_POKENAME,              //!< ポケモン名
    WORD_CHECK_NG,                    //!< NGワード
    WORD_CHECK_NUMBER_OVER,           //!< 数字入力数オーバー
    WORD_CHECK_FAST,                  //!< 連打入力
    WORD_CHECK_CHARNAME_NULL,         //!< 空欄（名前入力時）
    WORD_CHECK_NICKNAME_NULL,         //!< 空欄（ニックネーム入力時）
    WORD_CHECK_INTERVIEW_NULL,        //!< 空欄（インタビュー入力時）
    WORD_CHECK_DO_NOT_NGC,            //!< NGワードチェックを行わない

    WORD_CHECK_THREAD_RESULT_NULL     //!< NGワードチェック前定義
  };

public:
  //------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   *
   * @param   prm    外部設定パラメータ
   */
  //------------------------------------------------------------------------------
  MainSystem( APP_PARAM * prm );

  //------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------------------
  virtual ~MainSystem() { ; }

  //------------------------------------------------------------------------------
  /**
   * @brief   ゲームマネージャ関連取得
   *
   * @param   man    GameProcManager
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetGameManager( GameSys::GameProcManager * man );

  //------------------------------------------------------------------------------
  /**
   * @brief   アップデート処理
   *
   * @param   none
   *
   * @retval  "true = 処理中"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool Update( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   描画処理
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void Draw( gfl2::gfx::CtrDisplayNo no );


private:
  //------------------------------------------------------------------------------
  /**
   * @brief   ヒープの作成
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void CreateHeap( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   サブワーク作成
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void CreateSubWork( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   サブワーク削除
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void DeleteSubWork( void );


  //------------------------------------------------------------------------------
  /**
   * @brief   フェードインセット
   *
   * @param   next    フェード後のシーケンス
   *
   * @return  MAINSEQ_FADE
   */
  //------------------------------------------------------------------------------
  int SetFadeIn( int next );

  //------------------------------------------------------------------------------
  /**
   * @brief   フェードアウトセット
   *
   * @param   next    フェード後のシーケンス
   *
   * @return  MAINSEQ_FADE
   */
  //------------------------------------------------------------------------------
  int SetFadeOut( int next );

  //------------------------------------------------------------------------------
  /**
   * @brief   終了処理設定
   *
   * @param   none
   *
   * @return  MAINSEQ_FADE
   */
  //------------------------------------------------------------------------------
  int SetEnd( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   NGワード検査の完了通知イベント
   * @param   result 検査結果
   */
  //------------------------------------------------------------------------------
  virtual void OnNGWordCheckFinish( gfl2::ngc::Result result );

  //------------------------------------------------------------------------------
  /**
   * @brief   キーコード取得
   *
   * @param   mode  入力モード
   * @param   id    取得位置
   *
   * @return  キーコード
   */
  //------------------------------------------------------------------------------
  gfl2::str::STRCODE & GetKeyCode( u32 mode, u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   キーマップ配置
   *
   * @param   mode  入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutKeyMap( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   キーマップ配置
   *
   * @param   lytid   レイアウトID
   * @param   mode    入力モード
   * @param   max     キーの数
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutKeyMapCore( u32 lytid, u32 mode, int max );

  //------------------------------------------------------------------------------
  /**
   * @brief   日本語のキーマップ配置
   *
   * @param   mode    入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutKeyMapJPN( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   EFIGSのキーマップ配置
   *
   * @param   mode    入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutKeyMapUSA( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   韓国語のキーマップ配置
   *
   * @param   mode    入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutKeyMapKOR( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力タイプ切り替え
   *
   * @param   none
   *
   * @retval  "true = 変換した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool IncInputType( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   日本語の入力タイプ切り替え
   *
   * @param   none
   *
   * @retval  "true = 変換した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool IncInputTypeJPN( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   EFIGSの入力タイプ切り替え
   *
   * @param   none
   *
   * @retval  "true = 変換した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool IncInputTypeUSA( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   韓国語の入力タイプ切り替え
   *
   * @param   none
   *
   * @retval  "true = 変換した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool IncInputTypeKOR( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力タイプマーク表示
   *
   * @param   mode  入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutTypeMark( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   終了パラメータ設定
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetEndParam( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コードが濁点・半濁点か
   *
   * @param   id  入力位置
   *
   * @retval  "KeyMap::CHG_DATA_DAKUTEN = 濁点"
   * @retval  "KeyMap::CHG_DATA_HANDAKUTEN = 半濁点"
   * @retval  "KeyMap::CHG_DATA_MAX = それ以外"
   */
  //------------------------------------------------------------------------------
  u32 CheckChangeCode( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   変換文字コードバッファを初期化
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void InitChangeCodeBuff( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力文字の終端を取得
   *
   * @param   none
   *
   * @return  終端位置
   */
  //------------------------------------------------------------------------------
  u32 GetEndInputPos( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード設定
   *
   * @param   code  入力文字コード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetInputCode( gfl2::str::STRCODE code );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード設定
   *
   * @param   code  入力文字コード
   * @param   max    入力文字コード数
   *
   * @return  入力文字コード数
   */
  //------------------------------------------------------------------------------
  u32 SetInputCode( gfl2::str::STRCODE * code, u32 max );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード範囲設定（１文字入力版）
   *
   * @param   code  入力文字コード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetInputAreaCode( gfl2::str::STRCODE code );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード範囲設定
   *
   * @param   code  入力文字コード
   * @param   max    入力文字コード数
   *
   * @return  入力文字コード数
   */
  //------------------------------------------------------------------------------
  u32 SetInputAreaCode( gfl2::str::STRCODE * code, u32 max );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード設定
   *
   * @param   id  入力位置
   *
   * @retval  "true = 入力可"
   * @retval  "false = 入力不可"
   */
  //------------------------------------------------------------------------------
  bool SetInputCode( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   スペース入力
   *
   * @param   none
   *
   * @retval  "true = 入力可"
   * @retval  "false = 入力不可"
   */
  //------------------------------------------------------------------------------
  bool SetInputSpace( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード表示
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutInputCode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コードループ変換
   *
   * @param   none
   *
   * @retval  "true = 変換した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool SetLoopCode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力モード切り替え
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeKeyBoardMode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   日本語の入力モード切り替え
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeKeyBoardModeJPN( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   EFIGSの入力モード切り替え
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeKeyBoardModeUSA( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   韓国語の入力モード切り替え
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeKeyBoardModeKOR( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   簡体字・繁体字の入力モード切り替え
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeKeyBoardModeCHN( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   UI設定
   *
   * @param   mode  入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetUiData( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   UI変更
   *
   * @param   mode  入力モード
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void ChangeUiData( u32 mode );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力カーソル移動
   *
   * @param   mode  入力モード
   * @param   pos    移動位置
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void MoveCursor( u32 mode, u32 pos );

  //------------------------------------------------------------------------------
  /**
   * @brief   終了位置に入力カーソルを移動
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void MoveCursorEndPos( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力のバッファを初期化
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void InitRomajiBuff( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力：１文字消去
   *
   * @param   none
   *
   * @retval  "true = 消去した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool ClearRomajiOne( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力：１文字入力
   *
   * @param   id  入力位置
   *
   * @retval  "true = 入力した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool SetRomajiOne( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力
   *
   * @param   id  入力位置
   *
   * @retval  "true = 入力した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool SetRomaji( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力確定
   *
   * @param   none
   *
   * @retval  "true = 成功"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool FixInputRomaji( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ローマ時入力を確定できるか
   *
   * @param   none
   *
   * @retval  "true = 可"
   * @retval  "false = 不可"
   */
  //------------------------------------------------------------------------------
  bool CheckFixRomaji( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   言語ごとの初期設定
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void InitLang( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   シフトモード終了
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void EndShiftMode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力処理
   *
   * @param   id  入力結果
   *
   * @return  次のシーケンス
   */
  //------------------------------------------------------------------------------
  int UpdateDecide( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力データ初期化
   *
   * @param   comp  初期文字列を設定するか
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void InitInputCode( bool comp = false );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力データに初期文字列を設定
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetDefaultInput( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力文字列をチェック
   *
   * @param   none
   *
   * @retval  "WORD_CHECK_TRUE = 正常"
   * @retval  "WORD_CHECK_TRUE != 入力エラーコード"
   */
  //------------------------------------------------------------------------------
  u32 CheckInputWord( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   連打入力チェック
   *
   * @param   none
   *
   * @retval  "true = 正常"
   * @retval  "false = 不正"
   */
  //------------------------------------------------------------------------------
  bool CheckInputWordFast( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力バッファが空の場合を許可するか
   *
   * @param   none
   *
   * @retval  "WORD_CHECK_TRUE = 正常"
   * @retval  "WORD_CHECK_CHARNAME_NULL = エラー：プレイヤー名入力"
   * @retval  "WORD_CHECK_NICKNAME_NULL = エラー：プレイヤーニックネーム入力"
   */
  //------------------------------------------------------------------------------
  u32 CheckBufferNull( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   NGワードチェック初期化
   *
   * @param   none
   *
   * @retval  "true = 成功"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool InitNgWordCheck( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   NGワードチェック終了
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void EndNgWordCheck( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力文字列をポケモン名と比較
   *
   * @param   none
   *
   * @retval  "true = 同じポケモン名あり"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool CheckPokemonName( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力文字列が全てスペースかをチェック
   *
   * @param   none
   *
   * @retval  "true = 全てスペース"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool CheckInputAllSpace( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ポケモン生成用の乱数調整
   *
   * @param   val    乱数発生回数
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void SetRand( u32 val );

  //------------------------------------------------------------------------------
  /**
   * @brief   初期設定文字列をチェック
   *
   * @param   none
   *
   * @return  none
   *
   * @li  不正な文字コードがある場合は入力バッファを初期化
   */
  //------------------------------------------------------------------------------
  void CheckInitStrCode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   文字列の不正チェック
   *
   * @param   type_tbl    入力タイプテーブル
   * @param   type_max    入力タイプテーブルデータ数
   * @param   str          文字列
   * @param   str_max      文字数
   * @param   flg          チェックする文字ビット
   *
   * @return  none
   *
   * @li  不正な文字がない場合は"*flg = 0"になる
   */
  //------------------------------------------------------------------------------
  void CheckErrorStrCode( const u32 * type_tbl, u32 type_max, const gfl2::str::STRCODE * str, u32 str_max, u32 * flg );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力確定
   *
   * @param   none
   *
   * @retval  "true = 確定した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool FixInput( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力コード削除
   *
   * @param   none
   *
   * @retval  "true = 削除した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool DeleteCode( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力エリアの文字色を初期化
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void InitInputColor( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ハングル入力
   *
   * @param   id  入力位置
   *
   * @retval  "true = 入力した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool SetHangleInput( u32 id );

  //------------------------------------------------------------------------------
  /**
   * @brief   ハングル削除
   *
   * @param   none
   *
   * @retval  "true = 削除した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool DeleteCodeHangul( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   入力したハングルを表示
   *
   * @param   none
   *
   * @return  none
   */
  //------------------------------------------------------------------------------
  void PutHangul( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   結合中ハングル（未確定文字）があるか
   *
   * @param   none
   *
   * @retval  "true = ある"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool HasCompositionHangulChar( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   ハングル入力確定
   *
   * @param   none
   *
   * @retval  "true = 確定した"
   * @retval  "false = それ以外"
   */
  //------------------------------------------------------------------------------
  bool FixInputHangul( void );


public:
  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：初期化
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_INIT
   */
  //------------------------------------------------------------------------------
  int MainSeq_Init( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：解放
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_RELEASE
   */
  //------------------------------------------------------------------------------
  int MainSeq_Release( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：フェード待ち
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_FADE
   */
  //------------------------------------------------------------------------------
  int MainSeq_Fade( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：開始待ち処理
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_START
   */
  //------------------------------------------------------------------------------
  int MainSeq_Start( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：メイン処理
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_MAIN
   */
  //------------------------------------------------------------------------------
  int MainSeq_Main( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：プレイヤーアイコン読み込み待ち
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_WAIT_LOAD_PLAYERICON
   */
  //------------------------------------------------------------------------------
  int MainSeq_WaitLoadPlayerIcon( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：NGワードチェック
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_NG_WORD_CHECK
   */
  //------------------------------------------------------------------------------
  int MainSeq_NgWordCheck( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：レイアウトの読み込み待ち
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_TEXTURE_LOAD
   */
  //------------------------------------------------------------------------------
  int MainSeq_LayoutLoad( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：テクスチャの読み込み待ち
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_LAYOUT_LOAD
   */
  //------------------------------------------------------------------------------
  int MainSeq_TextureLoad( void );

  //------------------------------------------------------------------------------
  /**
   * @brief   メインシーケンス：ファイルの読み込み待ち
   *
   * @param   none
   *
   * @return  次のシーケンス
   *
   *  定義：MAINSEQ_FILE_LOAD
   */
  //------------------------------------------------------------------------------
  int MainSeq_FileLoad( void );

private:
  MAIN_WORK  m_MainWork;      //!< メインワーク

  SUB_WORK * m_SubWork;       //!< サブワーク

  app::util::Heap  m_Heap;    //!< ワークヒープエリア

  gfl2::heap::HeapBase * m_pNgcWorkHeap;  //!< NGワードチェック用ヒープエリア（デバイスヒープ指定不可）

  u32   m_DataIndex;

  u32   m_FileIndex;

  void * m_pArcReadBuff;

  void * m_pTexReadBuff;
};


GFL_NAMESPACE_END( StrInput )
GFL_NAMESPACE_END( App )

#endif // #ifndef NIJI_PROJECT_APP_STRINPUT_DRAW_H_INCLUDED
