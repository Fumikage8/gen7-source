#ifndef NIJI_PROJECT_APP_POKELIST_STATICWORK_H_INCLUDED
#define NIJI_PROJECT_APP_POKELIST_STATICWORK_H_INCLUDED
//==============================================================================
/**
 * @file    PokeListStaticWork.h
 * @author  fukushima_yuya
 * @date    2015.03.05
 * @brief   リスト画面データ
 *          sango_project app_pokelist_StaticWork
 */
//==============================================================================

// niji
#include "App/PokeList/include/PokeListSetupParam.h"
#include "App/PokeList/source/work/PokeListModeContextDefine.h"
#include "App/PokeList/source/PokeListConst.h"


//------------------------------------------------------------------------------
// @brief   前方宣言
//------------------------------------------------------------------------------
GFL_NAMESPACE_BEGIN( App )
GFL_NAMESPACE_BEGIN( Tool )
class TimeLimit;
GFL_NAMESPACE_END( Tool )
GFL_NAMESPACE_END( App )

class PokeRegulation;


GFL_NAMESPACE_BEGIN( App )
GFL_NAMESPACE_BEGIN( PokeList )

//------------------------------------------------------------------------------
// @brief   スタティックワーク
// @note    ポケモンのリストデータなどを管理
//------------------------------------------------------------------------------
class StaticWork
{
  GFL_FORBID_COPY_AND_ASSIGN( StaticWork );

public: //!< コンストラクタ・デストラクタ

  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   * @param   pGameMan      ゲームマネージャ
   * @param   pHeap         ヒープ
   * @param   procContext   プロセスのコンテキスト
   * @param   pTimeLimit    制限時間
   * @param   pCmnIcon      状態異常アイコン
   */
  //------------------------------------------------------------------
  StaticWork( GameSys::GameManager* pGameMan, gfl2::heap::HeapBase* pHeap,
    CONTEXT_PARAM* procContext, App::Tool::TimeLimit* pTimeLimit = NULL, app::tool::AppCommonGrpIconData* pCmnIcon = NULL );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  virtual ~StaticWork();


public: //!< コンテキスト

  //------------------------------------------------------------------
  /**
   * @brief   動作モードの取得
   * @return  動作モード
   */
  //------------------------------------------------------------------
  Mode GetProcMode( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   モードコンテキスト共用体の取得
   * @return  モードコンテキスト共用体
   */
  //------------------------------------------------------------------
  const ModeContext& GetModeContext( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   モードコンテキスト共用体のポインタの取得
   * @return  モードコンテキスト共用体ポインタ
   */
  //------------------------------------------------------------------
  ModeContext* GetModeContextPointer( void );


public: //!< ポケモン
  //------------------------------------------------------------------
  /**
   * @brief   パーティを取得
   * @param   party_id   パーティID
   * @return  IntermediateDataクラスポインタ
   */
  //------------------------------------------------------------------
  IntermediateData* GetPokeParty( PartyID party_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   メンバー数を取得
   *
   * @param   partyID   パーティID
   *
   * @return  メンバー数
   */
  //------------------------------------------------------------------
  u32 GetMemberCount( PartyID partyID ) const;

  //------------------------------------------------------------------
  /**
   * @brief   メンバー数を取得
   *
   * @return  メンバー数
   */
  //------------------------------------------------------------------
  u32 GetMemberCount( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したカーソル位置にいるポケモンのインデックスを取得する
   * @param   cpos    カーソル位置
   * @param   ポケモンのインデックス
   */
  //------------------------------------------------------------------
  u8 GetPokeIndex( CursorPos cpos ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したプレートにいるポケモンのインデックスを取得する
   * @param   plate_id   プレートID
   * @return  ポケモンのインデックス
   */
  //------------------------------------------------------------------
  u8 GetPokeIndex( PlateID plate_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   現在のカーソル位置にいるポケモンのインデックスを取得する
   * @param   cid   カーソルID
   * @return  ポケモンのインデックス
   */
  //------------------------------------------------------------------
  u8 GetPokeIndexOnCursor( CursorID cid ) const;

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンを取得する
   * @param   party_id     パーティID
   * @param   poke_index  ポケモンのインデックス
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  pml::pokepara::PokemonParam* GetPoke( PartyID party_id, u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   現在のカーソル位置に対応するポケモンを取得する
   * @param   cid   カーソルID
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  pml::pokepara::PokemonParam* GetPokeOnCursor( CursorID cid ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したのカーソル位置に対応するポケモンを取得する
   * @param   cpos    カーソル位置
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  pml::pokepara::PokemonParam* GetPoke( CursorPos cpos ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したのプレートに対応するポケモンを取得する
   * @param   plate_id   プレートID
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  pml::pokepara::PokemonParam* GetPoke( PlateID plate_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンの取得：マルチバトル用
   *
   * @param   cpos    カーソル位置
   *
   * @return  ポケモンパラメータ
   */
  //------------------------------------------------------------------
  pml::pokepara::PokemonParam* GetPokeMulti( CursorPos cpos ) const;


  //------------------------------------------------------------------
  /**
   * @brief   ポケモンを取得する
   * @param   party_id     パーティID
   * @param   poke_index  ポケモンのインデックス
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetPokeConst( PartyID party_id, u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   現在のカーソル位置に対応するポケモンを取得する
   * @param   cid   カーソルID
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetPokeConstOnCursor( CursorID cid ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したのカーソル位置に対応するポケモンを取得する
   * @param   cpos    カーソル位置
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetPokeConst( CursorPos cpos ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したのプレートに対応するポケモンを取得する
   * @param   plate_id   プレートID
   * @return  ポケモンのパラメータ
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetPokeConst( PlateID plate_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンの取得：マルチバトル用
   *
   * @param   cpos    カーソル位置
   *
   * @return  ポケモンパラメータ：const
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetPokeConstMulti( CursorPos cpos ) const;


  //------------------------------------------------------------------
  /**
   * @brief   指定したプレートのポケモンがタマゴかどうかを調べる
   * @param   plate_id   プレートID
   * @return  trueならタマゴ
   */
  //------------------------------------------------------------------
  bool IsEggOnPlate( PlateID plate_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   現在のカーソル位置にいるポケモンがタマゴかどうかを調べる
   * @param   cid   カーソルID
   * @return  trueならタマゴ
   */
  //------------------------------------------------------------------
  bool IsEggOnCursor( CursorID cid ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したカーソル位置にいるポケモンがタマゴかどうかを調べる
   * @param   cpos    カーソル位置
   * @return  trueならタマゴ
   */
  //------------------------------------------------------------------
  bool IsEgg( CursorPos cpos ) const;

  //------------------------------------------------------------------
  /**
   * @brief   猛毒かどうか
   *
   * @param   cpos    カーソル位置
   *
   * @return  "true  == 猛毒"
   * @return  "false == それ以外"
   */
  //------------------------------------------------------------------
  bool IsMoudoku( CursorPos cpos );


public: //!< カーソル
  //------------------------------------------------------------------
  /**
   * @brief   カーソル位置を変更する
   * @param   cid   カーソルID
   * @param   cpos  カーソル位置
   */
  //------------------------------------------------------------------
  void SetCursorPos( CursorID cid, CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   カーソル位置を変更する
   * @param   cid   カーソルID
   * @param   waza_button_id    技ボタンID
   */
  //------------------------------------------------------------------
  void SetCursorPos( CursorID cid, WazaButtonID waza_button_id );

  //------------------------------------------------------------------
  /**
   * @brief   カーソル位置を変更する
   * @param   cid       カーソルID
   * @param   plate_id  プレートID
   */
  //------------------------------------------------------------------
  void SetCursorPos( CursorID cid, PlateID plate_id );

  //------------------------------------------------------------------
  /**
   * @brief   現在のカーソル位置を取得する
   * @param   cid   カーソルID
   */
  //------------------------------------------------------------------
  CursorPos GetCursorPos( CursorID cid ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定したプレートが属するカーソル位置を取得する
   * @param   plate_id  プレートID
   */
  //------------------------------------------------------------------
  CursorPos GetCursorPos( PlateID plate_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   指定した技ボタンが属するカーソル位置を取得する
   * @param   waza_button_id    技ボタンID
   */
  //------------------------------------------------------------------
  CursorPos GetCursorPos( WazaButtonID waza_button_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   カーソルの初期位置の取得
   * return   初期位置
   */
  //------------------------------------------------------------------
  CursorPos GetInitCursorPos( void );

  //------------------------------------------------------------------
  /**
   * @brief   現在動かしているカーソルIDの設定
   */
  //------------------------------------------------------------------
  void SetCursorID( CursorID cid );

  //------------------------------------------------------------------
  /**
   * @brief   現在動かしているカーソルIDの取得
   */
  //------------------------------------------------------------------
  CursorID GetCursorID( void );


  //------------------------------------------------------------------
  /**
   * @brief   カーソル位置判定に必要なポケモンパラメータのアドレスを取得
   *
   * @param   index   カーソル位置
   *
   * @return  ポケモンパラメータのアドレス
   */
  //------------------------------------------------------------------
  const pml::pokepara::PokemonParam* GetSelectCursorPos( u8 index );


public: //!< ポケモン
  //------------------------------------------------------------------
  /**
   * @brief   指定したカーソル位置にあるプレートのIDを取得する
   * @param   cpos    カーソル位置
   */
  //------------------------------------------------------------------
  PlateID GetPlateID( CursorPos cpos ) const;

  //------------------------------------------------------------------
  /**
   * @brief   プレートの並び順を入れ替える
   * @param   cpos0   カーソル位置(移動元)
   * @param   cpos1   カーソル位置(移動先)
   */
  //------------------------------------------------------------------
  void ExchangePlateOrder( CursorPos cpos0, CursorPos cpos1 );
  
  //------------------------------------------------------------------
  /**
   * @brief   プレートの並び順を入れ替える
   * @param   plate0   プレート位置(移動元)
   * @param   plate1   プレート位置(移動先)
   */
  //------------------------------------------------------------------
  void ExchangePlateOrder( PlateID plate0, PlateID plate1 );


public: //!< 技
  //------------------------------------------------------------------
  /**
   * @brief   忘れさせる技の番号をセットする
   * @param   wazano    技番号
   */
  //------------------------------------------------------------------
  void SetRemovedWazaNo( WazaNo wazano );

  //------------------------------------------------------------------
  /**
   * @brief   忘れさせる技を取得
   * @return  忘れさせる技の番号
   */
  //------------------------------------------------------------------
  WazaNo GetRemovedWazaNo( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   使用するフィールド技の技番号をセットする
   * @param   wazano    技番号
   */
  //------------------------------------------------------------------
  void SetFieldWazaNo( WazaNo wazano );

  //------------------------------------------------------------------
  /**
   * @brief   使用するフィールド技の技番号を取得する
   * @return  フィールド技の技番号
   */
  //------------------------------------------------------------------
  WazaNo GetFieldWazaNo( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   先頭からのフィールド技の取得
   * @param   cpos    プレート位置
   * @param   index   先頭からのインデックス
   * @return  フィールド技の技番号
   */
  //------------------------------------------------------------------
  WazaNo GetFieldWazaNo( CursorPos cpos, u8 index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   フィールド技かどうか
   * @param   wazaNo    技番号
   * @return  true = フィールド技、false = 通常技
   */
  //------------------------------------------------------------------
  bool IsFieldWaza( WazaNo wazaNo ) const;

  //------------------------------------------------------------------
  /**
   * @brief   技を使用するポケモンのセット
   * @param   cpos    プレート位置
   */
  //------------------------------------------------------------------
  void SetFieldWazaUsePoke( CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   技を使用するポケモンの取得
   * @return  プレート位置
   */
  //------------------------------------------------------------------
  CursorPos GetFieldWazaUsePoke( void );


public: //!< 道具
  //------------------------------------------------------------------
  /**
   * @brief   所持道具データを取得する
   * @return  所持道具データ
   */
  //------------------------------------------------------------------
  Savedata::MyItem* GetMyItem( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンの所持している道具Noの取得
   * @param   cpos    カーソル位置
   * @return  道具No
   */
  //------------------------------------------------------------------
  u16 GetPokeItem( CursorPos cpos );
  

public: //!< 参加ポケモン
  //------------------------------------------------------------------
  /**
   * @brief   参加ポケモンを追加する
   * @param   poke_index    ポケモンのインデックス
   */
  //------------------------------------------------------------------
  void AddJoinPoke( u8 poke_index );

  //------------------------------------------------------------------
  /**
   * @brief   参加ポケモンを除外する
   * @param   poke_index    ポケモンのインデックス
   */
  //------------------------------------------------------------------
  void RemoveJoinPoke( u8 poke_index );

  //------------------------------------------------------------------
  /**
   * @brief   追加済みの参加ポケモンの数を取得する
   * @return  参加済みのポケモンの数
   */
  //------------------------------------------------------------------
  u8 GetJoinPokeCount( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   参加ポケのインデックスを取得する
   * @brief   order   参加番号
   * @return  参加済みのポケモンのインデックス
   */
  //------------------------------------------------------------------
  s8 GetJoinPokeIndex( u8 order ) const;

  //------------------------------------------------------------------
  /**
   * @brief   参加ポケモンに含まれているか？
   * @param   poke_index    ポケモンのインデックス
   * @return  trueなら参加
   */
  //------------------------------------------------------------------
  bool IsJoinPoke( u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   参加できるか？
   * @param   poke_index    ポケモンのインデックス
   * @return  trueなら参加可能
   */
  //------------------------------------------------------------------
  bool IsJoinEnable( u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   何番目の参加ポケか？
   * @param   poke_index    ポケモンのインデックス
   * @return  参加番号
   */
  //------------------------------------------------------------------
  s8 GetJoinOrder( u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   参加選択用：
   * @param   isDecidePokemon    ポケモン選択完了しているかどうか（ステータス画面に行くときはfalse）
   *          選択したポケモンをResultにセット
   *          ※終了時に再セットしてるけど、まぁ、いいか。
   */
  //------------------------------------------------------------------
  void SetResultJoinPokeIndex( bool isDecidePokemon );

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンの習得状況を取得
   */
  //------------------------------------------------------------------
  u8 GetWazaSetParam( u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   対象選択２の選択可否状況を取得
   */
  //------------------------------------------------------------------
  u8 GetSimple2SelectEnable( u8 poke_index ) const;

  //------------------------------------------------------------------
  /**
   * @brief   制限時間ありかどうか
   */
  //------------------------------------------------------------------
  bool IsTimeLimitMode( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   制限時間超過かどうか
   * @return  true    超過
   * @return  false   それ以外
   */
  //------------------------------------------------------------------
  bool IsTimeLimit( void );

  //------------------------------------------------------------------
  /**
   * @brief   制限時間(秒)の取得
   */
  //------------------------------------------------------------------
  u32 GetTimeLimit( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   制限時間チェッククラスのポインタの取得
   */
  //------------------------------------------------------------------
  App::Tool::TimeLimit* GetTimeLimitClass( void );

  //------------------------------------------------------------------
  /**
   * @brief MYSTATUSを取得する
   * @param partyID     取得対象が所属するパーティ
   */
  //------------------------------------------------------------------
  Savedata::MyStatus* GetMyStatus( PartyID party_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   図鑑データの取得
   * @return  図鑑データ
   */
  //------------------------------------------------------------------
  Savedata::ZukanData* GetZukanData( void );

  //------------------------------------------------------------------
  /**
   * @brief   レギュレーションチェック
   * @return  REGULATION_OKなら正常終了
   * @return  それ以外ならエラー
   */
  //------------------------------------------------------------------
  int CheckRegulation( gfl2::heap::HeapBase* heap );

  //------------------------------------------------------------------
  /**
   * @brief   レギュレーションで設定された伝説ポケモンの数を取得
   *
   * @return  ポケモンの数
   */
  //------------------------------------------------------------------
  u32 GetRegulationLegendNum( void );

  //------------------------------------------------------------------
  /**
   * @brief   レギュレーションで設定された見せ合いフラグを取得
   *
   * @return  見せ合いフラグ(trueで見せる falseで見せない）
   */
  //------------------------------------------------------------------
  bool GetRegulationShowPoke( void );

  //------------------------------------------------------------------
  /**
   * @brief   参加選択ポケモンの自動セット
   */
  //------------------------------------------------------------------
  void SetJoinOrderTimeOut( void );

  //------------------------------------------------------------------
  /**
   * @brief   外部からのポケモンリスト画面終了要求チェック
   * @return  true = 終了要求あり、false = 終了要求なし
   */
  //------------------------------------------------------------------
  bool IsListBreak( void );

  //------------------------------------------------------------------
  /**
   * @brief   終了モードのセット
   * @param   endMode   終了モード
   */
  //------------------------------------------------------------------
  void SetEndMode( EndMode endMode );

  //------------------------------------------------------------------
  /**
   * @brief   ゲームマネージャの取得
   * @return  ゲームマネージャ
   */
  //------------------------------------------------------------------
  GameSys::GameManager* GetGameManager( void ) const;

  //------------------------------------------------------------------
  /**
   * @brief   状態異常アイコンの取得
   * @return  app::tool::AppCommonGrpIconDataポインタ
   */
  //------------------------------------------------------------------
  app::tool::AppCommonGrpIconData* GetCommonIcon( void ) const;

  // @fix GFNMCat[1366]
  //------------------------------------------------------------------
  /**
   * @brief   マルチバトルかどうか
   *
   * @return  "true  == マルチバトル"
   * @return  "false == それ以外"
   */
  //------------------------------------------------------------------
  bool IsMultiBattle( void ) const;

  // @fix GFNMCat[1363]
  //------------------------------------------------------------------
  /**
   * @brief   サウンドを鳴らすかどうか
   *
   * @return  "true  == 鳴らす"
   * @return  "false == 鳴らさない"
   */
  //------------------------------------------------------------------
  bool IsPlaySound( void ) const;


private:
  //------------------------------------------------------------------
  /**
   * @brief   コンテキストのセットアップ
   */
  //------------------------------------------------------------------
  void SetupModeContext( CONTEXT_PARAM* );
  void SetupModeContext_FIELD( CONTEXT_PARAM* );        //!< フィールド
  void SetupModeContext_JOIN( CONTEXT_PARAM* );         //!< 参加選択
  void SetupModeContext_SIMPLE( CONTEXT_PARAM* );       //!< 対象選択
  void SetupModeContext_SODATEYA( CONTEXT_PARAM* );     //!< 育て屋
  void SetupModeContext_WAZA( CONTEXT_PARAM* );         //!< 技教え
  void SetupModeContext_BATTLE( CONTEXT_PARAM* );       //!< 戦闘
  void SetupModeContext_PROMOTION( CONTEXT_PARAM* );    //!< プロモーション

  //------------------------------------------------------------------
  /**
   * @brief   カーソル位置の初期化
   */
  //------------------------------------------------------------------
  void InitCposDesc( void );

  //------------------------------------------------------------------
  /**
   * @brief   プレートIDの取得
   * @param   waza_button_id  技ボタンID
   */
  //------------------------------------------------------------------
  PlateID GetPlateID( WazaButtonID waza_button_id ) const;

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンが参加できるかどうかを調べる
   * @param   poke   チェック対象のポケモン
   * @retval  true   参加できる
   * @retval  false  参加できない
   */
  //------------------------------------------------------------------
  bool IsPokemonJoinEnable( const pml::pokepara::PokemonParam* pPokeParam );


  //------------------------------------------------------------------
  /**
   * @brief   レギュレーション生成・破棄・リセット・チェック
   */
  //------------------------------------------------------------------
  void CreateRegulation( CONTEXT_PARAM* proc_context, gfl2::heap::HeapBase* pHeap );
  void DeleteRegulation(void);


public:
  //------------------------------------------------------------------
  /**
   * @brief   パーティ内の並びをプレートの並びに一致させる
   */
  //------------------------------------------------------------------
  void SyncPokeOrder( void );

public:
  //! @brief  レギュレーションチェックの結果
  enum {
    REGULATION_OK,            //!< 正常
    REGULATION_BOTH_POKE,     //!< エラー：同じポケモンがいる
    REGULATION_BOTH_ITEM,     //!< エラー：同じ道具を持っている
    REGULATION_MASTPOKE,      //!< 必要なポケモンがいない
    REGULATION_ILLEGAL_POKE,  //!< 条件に合わないポケモンがいる

    REGULATION_NUM
  };


private:
  //! @brief  カーソル位置ごとの設定
  struct CursorPosDesc
  {
    PlateID plateID;    //!< 配置するプレート
  };

  //! @brief  プレートごとの設定
  struct PlateDesc
  {
    WazaButtonID wazaButtonID;  //!< 対応する技ボタン
    u8 poke_index;              //!< 対応するポケモンのインデックス
  };


private:
  //static const CursorPosDesc DEFAULT_CPOS_DESC[CPOS_NUM];
  static const CursorPosDesc INIT_CPOS_DESC[CPOS_NUM];
  static const PlateDesc PLATE_DESC[PLATE_NUM];


private:
  GameSys::GameManager* m_game_man;
  IntermediateData* m_poke_party[PARTY_NUM];
  //pml::PokeParty* m_poke_party[PARTY_NUM];
  Savedata::MyStatus* m_my_status[PARTY_NUM];
  Mode m_proc_mode;
  ModeContext m_mode_context;
  CursorPos m_cursor_pos[CID_NUM];
  CursorPosDesc m_cpos_desc[CPOS_NUM];
  WazaNo m_removed_wazano;    //!< 忘れさせた技
  WazaNo m_field_wazano;      //!< フィールドで使用する技
  s8 m_joinPokeIndex[pml::PokeParty::MAX_MEMBERS];    //!< 参加ポケのインデックス

  u8 m_wazaSetParam[pml::PokeParty::MAX_MEMBERS];     //!< 技習得状況
  u8 m_simple2SetParam[pml::PokeParty::MAX_MEMBERS];  //!< 選択可否状況

  App::Tool::TimeLimit* m_time_limit;

  Savedata::ZukanData* m_saveZukanData;

  CONTEXT_PARAM*    m_pContext;

  app::tool::AppCommonGrpIconData* m_pCommonIcon;

  PokeRegulation* m_pokeRegulation;
  pml::PokeParty* m_regulationParty;

private:
  CursorID    m_NowCursorID;
  CursorPos   m_UseWazaPoke;
};


GFL_NAMESPACE_END( PokeList )
GFL_NAMESPACE_END( App )

#endif  // #ifndef NIJI_PROJECT_APP_POKELIST_STATICWORK_H_INCLUDED
