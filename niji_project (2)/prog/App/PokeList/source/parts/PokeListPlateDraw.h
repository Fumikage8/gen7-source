#ifndef NIJI_PROJECT_APP_POKELIST_PLATE_DRAW_H_INCLUDED
#define NIJI_PROJECT_APP_POKELIST_PLATE_DRAW_H_INCLUDED
//==============================================================================
/**
 * @file    PokeListPlateDraw.h
 * @author  fukushima_yuya
 * @date    2015.03.06
 * @brief   ポケモンリスト画面プレート描画クラス
 */
//==============================================================================


// niji
#include <AppLib/include/Util/app_util_Controller.h>

// gflib2
#include <macro/include/gfl2_Macros.h>


//------------------------------------------------------------------------------
// @brief   前方宣言
//------------------------------------------------------------------------------
GFL_NAMESPACE_BEGIN( App )
GFL_NAMESPACE_BEGIN( PokeList )
class DrawerBase;   //!< 共通描画クラス
class PokeInfoDraw;   //!< ポケモン情報描画クラス
GFL_NAMESPACE_END( PokeList )
GFL_NAMESPACE_END( App )


GFL_NAMESPACE_BEGIN( App )
GFL_NAMESPACE_BEGIN( PokeList )

//------------------------------------------------------------------------------
// @brief   プレートの位置管理クラス
//------------------------------------------------------------------------------
class PlatePosition
{
  GFL_FORBID_COPY_AND_ASSIGN( PlatePosition );

public:
  enum UpdateResult
  {
    UPDATE_RESULT_CONTINUE,   //!< 更新の継続
    UPDATE_RESULT_FINISH,     //!< 更新の終了
    UPDATE_RESULT_NUM
  };

public:
  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //------------------------------------------------------------------
  PlatePosition( DrawerBase* pBase, const CursorPos cpos, gfl2::lyt::LytParts* pParts );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  ~PlatePosition( void ) { ; }

public:
  //------------------------------------------------------------------
  /**
   * @brief   デフォルト位置へのバインド
   */
  //------------------------------------------------------------------
  UpdateResult UpdatePlateBind( void );

  //------------------------------------------------------------------
  /**
   * @brief   プレートのドラッグ処理
   */
  //------------------------------------------------------------------
  void UpdatePlateDrag( gfl2::math::Vector3 pos );

  //------------------------------------------------------------------
  /**
   * @brief   初期座標の取得
   */
  //------------------------------------------------------------------
  gfl2::math::Vector3 GetInitPos( void );

  //------------------------------------------------------------------
  /**
   * @brief   現在座標の設定
   */
  //------------------------------------------------------------------
  void SetNowPos( gfl2::math::Vector3 pos );

  //------------------------------------------------------------------
  /**
   * @brief   現在座標の取得
   */
  //------------------------------------------------------------------
  gfl2::math::Vector3 GetNowPos( void );

  //------------------------------------------------------------------
  /**
   * @brief   タッチ点とプレートの中心点との差分の設定
   * @param   vec   タッチ点
   */
  //------------------------------------------------------------------
  void SetPlateSubVec( gfl2::math::Vector3 vec );


private:
  DrawerBase*     m_pBase;

  const CursorPos   m_cCursorPos;

  gfl2::math::Vector3   m_InitPos;

  gfl2::math::Vector3   m_PlateSubVec;

  gfl2::lyt::LytParts*  m_pPlateParts;
};



//------------------------------------------------------------------------------
// @brief   プレート専用メッセージウィンドウクラス
//------------------------------------------------------------------------------
class PlateMessageWindow
{
  GFL_FORBID_COPY_AND_ASSIGN( PlateMessageWindow );

public:
  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //------------------------------------------------------------------
  PlateMessageWindow( DrawerBase* pBase, const CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  ~PlateMessageWindow( void );

public:
  //------------------------------------------------------------------
  /**
   * @brief   更新
   */
  //------------------------------------------------------------------
  void Update( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void SetupMessageWindow( PlateMode plate_mode );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void OpenWindow( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  bool IsEndOpened( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  bool IsOpened( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void CloseWindow( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  bool IsEndClosed( void );

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  u32 GetState( void );

private:
  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void SetupItem();

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void SetupJoin();

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void SetupSimple2();

  //------------------------------------------------------------------
  /**
   * @brief   
   */
  //------------------------------------------------------------------
  void SetupWazaOshie();

public:
  //! @brief    メッセージウィンドウタイプ
  enum {
    PLATE_MSG_WND_TYPE_ITEM,    //!< アイテム等
    PLATE_MSG_WND_TYPE_SANKA,   //!< 参加選択専用
    PLATE_MSG_WND_TYPE_NUM
  };
  enum {
    STATE_NULL,
    STATE_OPEN,
    STATE_MAIN,
    STATE_CLOSE,
    STATE_END,
    STATE_NUM
  };

private:
  static const u32 m_scCharMax = 64;

private:
  DrawerBase*     m_pBase;
  const CursorPos   m_cCursorPos;

  PlateMode   m_PlateMode;

  u32   m_State;
  bool  m_isOpen;

private:
  gfl2::lyt::LytTextBox*    m_pItemTextBox;

  gfl2::lyt::LytTextBox*    m_pSankaTextBox;

  gfl2::lyt::LytPane*       m_pHPGauge;
};



//------------------------------------------------------------------------------
// @breif   ポケモンアイコンアニメ
//------------------------------------------------------------------------------
class PokeIconAnim
{
  GFL_FORBID_COPY_AND_ASSIGN( PokeIconAnim );

public:
  enum IconAnim
  {
    ICON_ANIM_JUMP_HIGH,
    ICON_ANIM_JUMP_MIDDLE,
    ICON_ANIM_JUMP_LOW,
    ICON_ANIM_DIE,
    ICON_ANIM_SICK,
    ICON_ANIM_JUMP_SELECT,
    ICON_ANIM_STOP,
    ICON_ANIM_NUM,
    ICON_ANIM_NULL
  };

public:
  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //------------------------------------------------------------------
  PokeIconAnim( DrawerBase* pBase, const CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  virtual ~PokeIconAnim( void ) { ; }


public:
  //------------------------------------------------------------------
  /**
   * @brief   ループアニメーションの開始
   */
  //------------------------------------------------------------------
  void StartLoopAnim( const pml::pokepara::PokemonParam* pPoke );

  //------------------------------------------------------------------
  /**
   * @brief   プレート選択時のアニメーションの変更
   *
   * @param   cpos    カーソル位置
   */
  //------------------------------------------------------------------
  void StartSelectAnim( CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   ポケアイコン選択アニメの再生・停止
   * @param   play    再生フラグ(true = 再生、false = 停止)
   */
  //------------------------------------------------------------------
  void StartSelectAnim( bool play );


private:
  //------------------------------------------------------------------
  /**
   * @brief   アニメーションの再生
   */
  //------------------------------------------------------------------
  void StartAnim( IconAnim icon_anim_id );


private:
  DrawerBase*   m_pBase;

  const CursorPos   m_cCursorPos;

  IconAnim    m_PrevAnimID;

  bool    m_isSelected;
};



//------------------------------------------------------------------------------
// @brief   ポケモンリストのプレートの描画
// @note    リストのプレート
//          InfoDrawを管理
//------------------------------------------------------------------------------
class PlateDraw
{
  GFL_FORBID_COPY_AND_ASSIGN( PlateDraw );

public:
  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //------------------------------------------------------------------
  PlateDraw( DrawerBase* pBase, const CursorPos cpos );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  virtual ~PlateDraw( void );


public:
  //------------------------------------------------------------------
  /**
   * @brief   初期化
   */
  //------------------------------------------------------------------
  void Init( void );

  //------------------------------------------------------------------
  /**
   * @brief   更新
   */
  //------------------------------------------------------------------
  void Update( void );

  //------------------------------------------------------------------
  /**
   * @brief   セットアップ
   * @param   plate_mode    プレート表示モード
   */
  //------------------------------------------------------------------
  void Setup( PlateMode plate_mode );


public:
  enum PlateState
  {
    PLATE_STATE_DEFAULT,  //!< デフォルト状態
    PLATE_STATE_PARTNER,  //!< 仲間
    PLATE_STATE_DIE,      //!< 瀕死時
    PLATE_STATE_DISABLE,  //!< 選択不可

    PLATE_STATE_SELECTED,         //!< 自分のポケモン選択時
    PLATE_STATE_PARTNER_SELECTED, //!< 仲間のポケモン選択時
    PLATE_STATE_DIE_SELECTED,     //!< 瀕死ポケモン選択時

    PLATE_STATE_NUM
  };
  //------------------------------------------------------------------
  /**
   * @brief   プレートの状態を変更する
   * @param   state       セットする状態
   * @param   plate_mode  プレートの表示モード
   */
  //------------------------------------------------------------------
  void SetPlateState( PlateState state, PlateMode plate_mode = PLATE_MODE_PARAM );

  //------------------------------------------------------------------
  /**
   * @brief   プレートの状態を取得する
   * @return  PlateMode
   */
  //------------------------------------------------------------------
  PlateState GetPlateState( void );

  //------------------------------------------------------------------
  /**
   * @brief   表示を更新
   * @param   pPokeParam    プレートに表示するポケモン
   */
  //------------------------------------------------------------------
  void SetupPlatePokeDisplay( const pml::pokepara::PokemonParam* pPokeParam );

  //------------------------------------------------------------------
  /**
   * @brief   モードごとの表示を設定
   * @param   plate_mode    プレートの表示タイプ
   */
  //------------------------------------------------------------------
  void SetModePlate( PlateMode plate_mode );

  //------------------------------------------------------------------
  /**
   * @brief   ポケアイコンアニメの再生
   */
  //------------------------------------------------------------------
  void StartPokeIconAnim( void );

  //------------------------------------------------------------------
  /**
   * @brief   ポケアイコン選択アニメの再生・停止
   * @param   play    再生フラグ(true = 再生、false = 停止)
   */
  //------------------------------------------------------------------
  void StartPokeIconSelectAnim( bool play );

  //------------------------------------------------------------------
  /**
   * @brief   プレートをキャッチ状態にする
   */
  //------------------------------------------------------------------
  void SetPlateCatch( void );

  //------------------------------------------------------------------
  /**
   * @brief   プレートをキャッチ状態かどうか
   * @return  true = キャッチ中
   */
  //------------------------------------------------------------------
  bool IsPlateCatch( void );

  //------------------------------------------------------------------
  /**
   * @brief   プレートをドラッグ状態を設定する
   * @param   flag    ドラッグフラグ
   */
  //------------------------------------------------------------------
  void SetPlateDrag( bool flag );

  //------------------------------------------------------------------
  /**
   * @brief   プレートをドラッグ状態かどうか
   * @return  true = ドラッグ中
   */
  //------------------------------------------------------------------
  bool IsPlateDrag( void );

  //------------------------------------------------------------------
  /**
   * @brief   表示切替
   * @param   visible   表示フラグ
   */
  //------------------------------------------------------------------
  void SetVisible( bool visible );

  //------------------------------------------------------------------
  /**
   * @brief   プレートのタッチ判定
   * @param   pTouchPanel   gfl2::ui::TouchPanelクラスポインタ
   * @return  true = タッチ中、false = タッチされていない
   */
  //------------------------------------------------------------------
  bool IsTouchPlate( gfl2::ui::TouchPanel* pTouchPanel );

  //------------------------------------------------------------------
  /**
   * @brief   HPの更新
   * @param   pp    ポケモンパラメータ
   */
  //------------------------------------------------------------------
  void UpdateHP( pml::pokepara::PokemonParam* pp );

private:
  //------------------------------------------------------------------
  /**
   * @brief   ポケモンアイコンアニメの更新
   */
  //------------------------------------------------------------------
  void UpdatePokeIconAnim( void );

public:
  //------------------------------------------------------------------
  /**
   * @brief   プレートの座標管理クラスの取得
   * @param   PlatePositionクラスのポインタ
   */
  //------------------------------------------------------------------
  PlatePosition* GetPlatePosition( void );

  //------------------------------------------------------------------
  /**
   * @brief   プレートのメッセージウィンドウクラスの取得
   * @param   PlateMessageWindowクラスのポインタ
   */
  //------------------------------------------------------------------
  PlateMessageWindow* GetPlateMessageWindow( void );

private:
  DrawerBase*     m_pBase;

  const CursorPos   m_cCursorPos;

  PokeInfoDraw*     m_pPokeInfoDraw;

  PokeIconAnim*     m_pPokeIconAnim;

  PlatePosition*    m_pPlatePosition;

  PlateMessageWindow*   m_pPlateMsgWindow;

private:
  PlateState  m_PlateState;   //!< プレートの状態

  CursorPos   m_PrevPos;      //!< カーソル位置

  gfl2::lyt::LytParts*    m_pPlateParts;
  gfl2::lyt::LytPane*     m_pPlateBound;

  //gfl2::math::Vector3   m_TouchPos;   //!< タッチされた座標値

  bool    m_isCatch;   //!< プレートのキャッチ状態フラグ
  bool    m_isDrag;    //!< プレートのドラッグ状態フラグ
};


GFL_NAMESPACE_END( PokeList )
GFL_NAMESPACE_END( App )

#endif // #ifndef NIJI_PROJECT_APP_POKELIST_PLATE_DRAW_H_INCLUDED
