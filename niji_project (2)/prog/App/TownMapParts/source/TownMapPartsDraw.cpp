//=============================================================================
/**
 * @file    TownMapPartsDraw.cpp
 * @brief   タウンマップ下画面マップ描画処理
 * @author  Hiroyuki Nakamura
 * @date    2015.10.13
 */
//=============================================================================

#if PM_DEBUG
#include <Debug/include/gfl2_DebugWinSystem.h>
#include <Debug/include/gfl2_DebugWinItemTypes.h>
#include <Debug/DebugWin/include/DebugWinSystem.h>
#endif

// module
#include "App/TownMapParts/include/TownMapPartsDraw.h"
// niji
#include "GameSys/include/GameData.h"
#include "AppLib/include/Util/app_util_FileAccessor.h"
#include "AppLib/include/Tool/AppToolMapManager.h"
#include "Field/FieldStatic/include/FieldWorld.h" 
#include "Field/FieldStatic/include/Zone/ZoneDataAccessor.h"
#include "Field/FieldStatic/include/Zone/ZoneDataLoader.h" 
#include "Field/FieldStatic/include/EventList/EventListDataManager.h"
#include "Sound/include/Sound.h"
// resource
#include "arc_def_index/arc_def.h"
#include "arc_index/TownMapData.gaix"
#include "arc_index/TownMapGraphic.gaix"
#include "niji_conv_header/app/town_map/TownMapLow.h"
#include "niji_conv_header/app/town_map/TownMapLow_pane.h"
#include "niji_conv_header/app/town_map/TownMapLow_anim_list.h"
#include "niji_conv_header/field/flagwork/FlagDefine.h"
#include "niji_conv_header/field/world/world_id.h"
#include "niji_conv_header/message/msg_townmap.h"


GFL_NAMESPACE_BEGIN(App)
GFL_NAMESPACE_BEGIN(TownMap)

//! ドット単位の移動値を拡大マップの移動値に変換
#define TOWNMAP_DOT_CALC_X(a) ( a * static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_X_SIZE) / static_cast<f32>(App::Tool::MapManager::MAP_2D_DEFAULT_X_SIZE*2) )
#define TOWNMAP_DOT_CALC_Y(a) ( a * static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_Y_SIZE) / static_cast<f32>(App::Tool::MapManager::MAP_2D_DEFAULT_Y_SIZE*2) )

const f32 TownMapPartsDraw::MAP_SCALE = 0.25f;  //!< マップスケール値

const f32 TownMapPartsDraw::DEFAULT_X_SIZE = static_cast<f32>(App::Tool::MapManager::MAP_2D_DEFAULT_X_SIZE) * TownMapPartsDraw::MAP_SCALE;  //! 全体マップの基準Xサイズ
const f32 TownMapPartsDraw::DEFAULT_Y_SIZE = static_cast<f32>(App::Tool::MapManager::MAP_2D_DEFAULT_Y_SIZE) * TownMapPartsDraw::MAP_SCALE;  //! 全体マップの基準Yサイズ

const f32 TownMapPartsDraw::DISP_WIDTH_HALF = static_cast<f32>( DISPLAY_LOWER_WIDTH / 2 );    //!< 画面幅 / 2
const f32 TownMapPartsDraw::DISP_HEIGHT_HALF = static_cast<f32>( DISPLAY_LOWER_HEIGHT / 2 );  //!< 画面高さ / 2

const f32 TownMapPartsDraw::MAP_ZOOM_SCALE_MIN = 1.0f;    //!< 全体マップスケール最小値
const f32 TownMapPartsDraw::MAP_ZOOM_SCALE_MAX = 4.0f;    //!< 全体マップスケール最大値
const f32 TownMapPartsDraw::MAP_ZOOM_SCALE_VAL = 0.75f;   //!< 全体マップ拡縮増減値

//! 島ごとのデータ
const TownMapPartsDraw::LAND_DATA TownMapPartsDraw::LandData[LAND_DATA_MAX] =
{
  {
    {
      { Z_F0102_S0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_01, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_01 },
      { Z_F0102_S0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_02, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_02 },
      { Z_F0102_S0301, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_03, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_03 },
      { Z_F0102_S0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_04, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_04 },
      { Z_F0102_S0501, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_05, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_05 },
      { Z_F0102_S0601, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_06, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_06 },
      { Z_F0102_S0701, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_07, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_07 },
      { Z_F0102_T0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_08, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_08 },
      { Z_F0102_C0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_09, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_09 },
      { Z_F0102_C0102, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_10, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_10 },
      { Z_F0102_C0103, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_11, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_11 },
      { Z_F0102_S0801, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_12, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_12 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_13, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_13 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_14, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_14 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_15, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_15 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_01_16, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_01_16 },
    },
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_LAND_01,
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_MAP_RANGE_01,
  },
  {
    {
      { Z_F0201_S0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_01, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_01 },
      { Z_F0201_S0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_02, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_02 },
      { Z_F0201_S0301, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_03, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_03 },
      { Z_F0201_S0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_04, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_04 },
      { Z_F0201_S0701, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_05, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_05 },
      { Z_F0201_S0801, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_06, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_06 },
      { Z_F0201_S0901, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_07, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_07 },
      { Z_F0201_S1001, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_08, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_08 },
      { Z_F0201_T0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_09, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_09 },
      { Z_F0201_C0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_10, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_10 },
      { Z_F0201_C0301, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_11, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_11 },
      { Z_F0201_C0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_12, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_12 },
      { Z_F0201_S1101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_13, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_13 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_14, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_14 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_15, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_15 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_02_16, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_02_16 },
    },
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_LAND_02,
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_MAP_RANGE_02,
  },
  {
    {
      { Z_F0301_S0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_01, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_01 },
      { Z_F0301_S0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_02, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_02 },
      { Z_F0301_S0301, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_03, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_03 },
      { Z_F0301_S0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_04, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_04 },
      { Z_F0301_S0501, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_05, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_05 },
      { Z_F0301_S0601, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_06, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_06 },
      { Z_F0301_S0701, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_07, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_07 },
      { Z_F0301_S0801, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_08, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_08 },
      { Z_F0301_S0901, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_09, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_09 },
      { Z_F0301_S1001, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_10, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_10 },
      { Z_F0301_C0501, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_11, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_11 },
      { Z_F0301_C0502, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_12, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_12 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_13, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_13 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_14, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_14 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_15, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_15 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_03_16, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_03_16 },
    },
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_LAND_03,
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_MAP_RANGE_03,
  },
  {
    {
      { Z_F0401_S0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_01, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_01 },
      { Z_F0401_S0201, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_02, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_02 },
      { Z_F0401_S0301, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_03, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_03 },
      { Z_F0401_S0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_04, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_04 },
      { Z_F0401_S0501, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_05, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_05 },
      { Z_F0401_S0601, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_06, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_06 },
      { Z_F0401_S0701, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_07, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_07 },
      { Z_F0401_T0401, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_08, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_08 },
      { Z_F0401_S0801, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_09, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_09 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_10, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_10 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_11, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_11 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_12, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_12 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_13, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_13 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_14, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_14 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_15, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_15 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_04_16, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_04_16 },
    },
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_LAND_04,
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_MAP_RANGE_04,
  },
  {
    {
      { Z_F0501I0101, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_01, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_01 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_02, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_02 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_03, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_03 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_04, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_04 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_05, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_05 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_06, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_06 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_07, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_07 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_08, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_08 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_09, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_09 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_10, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_10 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_11, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_11 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_12, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_12 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_13, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_13 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_14, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_14 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_15, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_15 },
      { ZONE_ID_MAX, PANENAME_TOWNMAP_MAP_LOW_000_PANE_AREA_05_16, PANENAME_TOWNMAP_MAP_LOW_000_PANE_MASK_05_16 },
    },
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_LAND_05,
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_MAP_RANGE_05,
  },
};

//! 島の並び順テーブル
const u32 TownMapPartsDraw::LandLowTable[LAND_DATA_MAX] = { 3, 4, 0, 1, 2 };

//! 場所アイコンデータ
const TownMapPartsDraw::PLACE_ICON_DATA TownMapPartsDraw::PlaceIconTable[TownMapPartsDraw::PLACE_ICON_MAX] =
{
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_00,          // ペイン
    { // タイプ変更アニメ
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_03,  // ポケモンセンター
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_01,  // ダンジョン
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_02,  // 施設（汎用）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_00,  // ワープポイント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_05,  // イベント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_04,  // 分布用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_07,  // 分布用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_08,  // 分布用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_09,  // 分布・釣り用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_10,  // 分布・釣り用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_11,  // 分布・釣り用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_12,  // 分布・乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_13,  // 分布・乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_14,  // 分布・乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_15,  // 分布・釣り乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_16,  // 分布・釣り乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_17,  // 分布・釣り乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ICON_06,  // ワープポイント（選択中）
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_TOUCH,          // ボタンアニメ：タッチ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_RELEASE,        // ボタンアニメ：リリース
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_CANSEL,         // ボタンアニメ：キャンセル
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_TOUCH_RELEASE,  // ボタンアニメ：キーセレクト
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_ACTIVE,         // ボタンアニメ：アクティブ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_00_PASSIVE,        // ボタンアニメ：パッシブ
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_01,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_01_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_02,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_02_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_03,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_03_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_04,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_04_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_05,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_05_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_06,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_06_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_07,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_07_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_08,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_08_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_09,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_09_PASSIVE,
  },

  // -------- 10 --------
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_10,          // ペイン
    { // タイプ変更アニメ
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_03,  // ポケモンセンター
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_01,  // ダンジョン
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_02,  // 施設（汎用）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_00,  // ワープポイント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_05,  // イベント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_04,  // 分布用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_07,  // 分布用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_08,  // 分布用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_09,  // 分布・釣り用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_10,  // 分布・釣り用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_11,  // 分布・釣り用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_12,  // 分布・乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_13,  // 分布・乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_14,  // 分布・乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_15,  // 分布・釣り乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_16,  // 分布・釣り乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_17,  // 分布・釣り乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ICON_06,  // ワープポイント（選択中）
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_TOUCH,          // ボタンアニメ：タッチ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_RELEASE,        // ボタンアニメ：リリース
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_CANSEL,         // ボタンアニメ：キャンセル
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_TOUCH_RELEASE,  // ボタンアニメ：キーセレクト
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_ACTIVE,         // ボタンアニメ：アクティブ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_10_PASSIVE,        // ボタンアニメ：パッシブ
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_11,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_11_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_12,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_12_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_13,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_13_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_14,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_14_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_15,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_15_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_16,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_16_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_17,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_17_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_18,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_18_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_19,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_19_PASSIVE,
  },

  // -------- 20 --------
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_20,          // ペイン
    { // タイプ変更アニメ
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_03,  // ポケモンセンター
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_01,  // ダンジョン
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_02,  // 施設（汎用）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_00,  // ワープポイント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_05,  // イベント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_04,  // 分布用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_07,  // 分布用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_08,  // 分布用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_09,  // 分布・釣り用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_10,  // 分布・釣り用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_11,  // 分布・釣り用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_12,  // 分布・乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_13,  // 分布・乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_14,  // 分布・乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_15,  // 分布・釣り乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_16,  // 分布・釣り乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_17,  // 分布・釣り乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ICON_06,  // ワープポイント（選択中）
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_TOUCH,          // ボタンアニメ：タッチ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_RELEASE,        // ボタンアニメ：リリース
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_CANSEL,         // ボタンアニメ：キャンセル
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_TOUCH_RELEASE,  // ボタンアニメ：キーセレクト
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_ACTIVE,         // ボタンアニメ：アクティブ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_20_PASSIVE,        // ボタンアニメ：パッシブ
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_21,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_21_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_22,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_22_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_23,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_23_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_24,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_24_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_25,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_25_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_26,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_26_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_27,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_27_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_28,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_28_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_29,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_29_PASSIVE,
  },

  // -------- 30 --------
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_30,          // ペイン
    { // タイプ変更アニメ
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_03,  // ポケモンセンター
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_01,  // ダンジョン
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_02,  // 施設（汎用）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_00,  // ワープポイント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_05,  // イベント
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_04,  // 分布用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_07,  // 分布用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_08,  // 分布用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_09,  // 分布・釣り用
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_10,  // 分布・釣り用（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_11,  // 分布・釣り用（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_12,  // 分布・乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_13,  // 分布・乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_14,  // 分布・乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_15,  // 分布・釣り乱入
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_16,  // 分布・釣り乱入（昼）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_17,  // 分布・釣り乱入（夜）
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ICON_06,  // ワープポイント（選択中）
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_TOUCH,          // ボタンアニメ：タッチ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_RELEASE,        // ボタンアニメ：リリース
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_CANSEL,         // ボタンアニメ：キャンセル
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_TOUCH_RELEASE,  // ボタンアニメ：キーセレクト
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_ACTIVE,         // ボタンアニメ：アクティブ
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_30_PASSIVE,        // ボタンアニメ：パッシブ
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_31,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_31_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_32,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_32_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_33,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_33_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_34,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_34_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_35,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_35_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_36,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_36_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_37,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_37_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_38,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_38_PASSIVE,
  },
  {
    PANENAME_TOWNMAP_MAP_LOW_000_PANE_ICON_39,
    {
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_03,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_01,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_02,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_00,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_05,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_04,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_07,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_08,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_09,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_10,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_11,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_12,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_13,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_14,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_15,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_16,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_17,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ICON_06,
    },
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_TOUCH,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_CANSEL,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_TOUCH_RELEASE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_ACTIVE,
    LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__ICON_39_PASSIVE,
  },

  // -------- 40 --------
};

//! 更新処理のシーケンス
enum
{
  UPDATE_SEQ_WAIT = 0,      //!< 待機
  UPDATE_SEQ_ZOOM,          //!< 拡縮
  UPDATE_SEQ_LAND_CHANGE,   //!< 島切り替え
};


//-----------------------------------------------------------------------------
/**
 * @brief   コンストラクタ
 *
 * @param   mode        呼び出しモード
 * @param   heap        ヒープ
 * @param   render_man  描画マネージャ
 * @param   land_no     島番号 ( 0オリジン )
 */
//-----------------------------------------------------------------------------
TownMapPartsDraw::TownMapPartsDraw( TownMapPartsDraw::CallMode mode, app::util::Heap * heap, app::util::AppRenderingManager * render_man, u32 land_no )
  : app::ui::UIView( heap, heap->GetDeviceAllocator(), heap->GetDeviceAllocator() )
  , m_callMode( mode )
  , m_heap( heap )
  , m_renderingManager( render_man )
  , m_landNo( land_no )
  , m_saveFieldMenu( NULL )
  , m_myStatus( NULL )
  , m_fieldLocation( NULL )
  , m_zoneDataLoader( NULL )
  , m_eventWork( NULL )
  , m_devKey( NULL )
  , m_devButton( NULL )
  , m_devTouchPanel( NULL )
  , m_listener( NULL )
  , m_pLytResBuffer( NULL )
  , m_pMsgData( NULL )
  , m_pWordSet( NULL )
  , m_pResZoneData( NULL )
  , m_resZoneData( NULL )
  , m_resZoneDataLen( 0 )
  , m_resIconData( NULL )
  , m_resIconDataLen( 0 )
  , m_pMapManager( NULL )
  , m_pEventListDataManager( NULL )
  , m_mainEventID( 0 )
  , m_mainEventIndex( 0 )
  , m_pWorld( NULL )
  , m_isWorldCreate( false )
  , m_chgWorldLandNo( LAND_DATA_MAX )
  , m_isZoom( false )
  , m_modeChangeCount( 0 )
  , m_cursorZoneID( ZONE_ID_MAX )
  , m_isZoneGetLock( false )
  , m_isTouch( false )
  , m_touchX( 0 )
  , m_touchY( 0 )
  , m_endCursorX( 0.0f )
  , m_endCursorY( 0.0f )
  , m_moveCursorX( 0.0f )
  , m_moveCursorY( 0.0f )
  , m_initLandMapPX( 0.0f )
  , m_initLandMapPY( 0.0f )
  , m_landChangeMove( 0 )
  , m_landMoveCount( 0 )
  , m_landMoveX( 0.0f )
  , m_selectButtonID( 0 )
  , m_heroLandNo( 0 )
  , m_heroPX( 0.0f )
  , m_heroPY( 0.0f )
  , m_isHeroRotate( false )
  , m_updateMain( 0 )
  , m_updateSub( 0 )
  , m_mainSeq( 0 )
  , m_subSeq( 0 )
  , m_isDrawEnable( true )
  , m_isCursorAutoMoveEnable( false )
#if PM_DEBUG
  , m_Debug()
#endif
{
  if( m_landNo >= LAND_DATA_MAX )
  {
    m_landNo = 0;
  }
  SetInputEnabled( false );
  GetGameData();
  InitPlaceIcon();

#if PM_DEBUG
  m_Debug.SetOwner(this);
#endif
}

//-----------------------------------------------------------------------------
/**
 * @brief   デストラクタ
 */
//-----------------------------------------------------------------------------
TownMapPartsDraw::~TownMapPartsDraw()
{
}

//-----------------------------------------------------------------------------
/**
 * @func    GetGameData
 * @brief   GameData関連取得
 * @date    2015.10.23
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetGameData(void)
{
  GameSys::GameData * gd = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetGameData();

  m_saveFieldMenu  = gd->GetFieldMenu();
  m_myStatus       = gd->GetPlayerStatus();
  m_fieldLocation  = gd->GetStartLocation();
  m_zoneDataLoader = gd->GetFieldZoneDataLoader();
  m_eventWork      = gd->GetEventWork();

  gfl2::ui::DeviceManager * dev_man = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetUiDeviceManager();
  m_devKey        = dev_man->GetCrossKey( gfl2::ui::DeviceManager::CROSSKEY_STICK_EMU );
  m_devButton     = dev_man->GetButton( gfl2::ui::DeviceManager::BUTTON_STANDARD );
  m_devTouchPanel = dev_man->GetTouchPanel( gfl2::ui::DeviceManager::TOUCHPANEL_STANDARD );
}

//-----------------------------------------------------------------------------
/**
 * @func    Update
 * @brief   更新
 * @date    2015.10.13
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::Update(void)
{
  app::ui::UIView::Update();
  m_pMapManager->Update();
  PutCursorPosArea();
  UpdateAutoMoveCursor();
  UpdateWorld();

  switch( m_updateMain )
  {
  case UPDATE_SEQ_WAIT:
    break;
  case UPDATE_SEQ_ZOOM:
    ChangeMapMode();
    break;
  case UPDATE_SEQ_LAND_CHANGE:
    ChangeLand();
    break;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    Draw
 * @brief   描画
 * @date    2015.10.13
 *
 * @param   displayNo   描画面
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::Draw( gfl2::gfx::CtrDisplayNo displayNo )
{
  if( m_isDrawEnable != false )
  {
    m_pMapManager->Draw( m_renderingManager, displayNo );
    GetG2DUtil()->AddDrawableLytWkForOneFrame( m_renderingManager, displayNo, LYTID_ISLAND_MAP );
    GetG2DUtil()->AddDrawableLytWkForOneFrame( m_renderingManager, displayNo, LYTID_BUTTON );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    SetTownmapData
 * @brief   タウンマップデータセット
 * @date    2015.10.26
 *
 * @param   zone      ゾーンデータリソース
 * @param   zone_len  ゾーンデータリソース長
 * @param   icon      アイコンデータリソース
 * @param   iconlen   アイコンデータリソース長
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetTownmapData( ZONE_RESOURCE * zone, u32 zone_len, ICON_RESOURCE * icon, u32 icon_len )
{
  m_resZoneData    = zone;
  m_resZoneDataLen = zone_len;
  m_resIconData    = icon;
  m_resIconDataLen = icon_len;
}

//-----------------------------------------------------------------------------
/**
 * @func    SetMapListener
 * @brief   リスナーをセット
 * @date    2015.10.13
 *
 * @param   listener リスナー
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetMapListener( SubScreenMapListener * listener )
{
  m_listener = listener;
}

//-----------------------------------------------------------------------------
/**
 * @func    Init
 * @brief   初期化処理
 * @date    2015.10.13
 *
 * @param   res_buf   レイアウトリソースバッファ
 * @param   msg_buf   メッセージリソースバッファ
 *
 * @retval  true  = 処理完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::Init( void * res_buf, void * msg_buf )
{
  switch( m_mainSeq )
  {
  case 0:
    CreateWorld();
    Initialize2D( res_buf, msg_buf );
    CreateButton();
    InitZoneMask();
    m_mainSeq++;
    /* FALL THROUGH */
  case 1:
    if( CreateEventListDataManager() == false )
    {
      break;
    }
    m_mainSeq++;
    /* FALL THROUGH */
  case 2:
    if( CreateMapManager() == false )
    {
      break;
    }
    InitIcon();
    InitCursorPos();
    PutLandName();
    PutLandPane();
    ChangeWorld( m_landNo );
    SetInputListener( this );
    m_mainSeq = 0;
    return true;
  }
  return false;
}

//-----------------------------------------------------------------------------
/**
 * @func    End
 * @brief   終了処理
 * @date    2015.10.13
 *
 * @retval  true  = 処理完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::End(void)
{
  m_isDrawEnable = false;
  if( IsDrawing() != false )
  {
    return false;
  }
  if( DeleteMapManager() == false )
  {
    return false;
  }
  if( DeleteWorld() ==false )
  {
    return false;
  }
  DeleteEventListDataManager();
  Terminate2D();
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    Initialize2D
 * @brief   2D関連初期化
 * @date    2015.10.13
 *
 * @param   res_buf   レイアウトリソースバッファ
 * @param   msg_buf   メッセージリソースバッファ
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::Initialize2D( void * res_buf, void * msg_buf )
{
  // リソースデータ
  const app::util::G2DUtil::LytResData res_tbl[] =
  {
    { res_buf, 0, app::util::G2DUtil::ATTACH_ROOT },
  };
  // レイアウトデータ
	const app::util::G2DUtil::LytwkData data_tbl[] =
  {
    {
      0,
      LYTRES_TOWNMAPLOW_TOWNMAP_MIN_LOW_000_BFLYT,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000___NUM,
      res_buf,
      false,
      app::util::G2DUtil::SETUP_LOWER,
      true
    },
    {
      0,
      LYTRES_TOWNMAPLOW_TOWNMAP_MAP_LOW_000_BFLYT,
      LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000___NUM,
      res_buf,
      false,
      app::util::G2DUtil::SETUP_LOWER,
      true
    },
  };

  if( msg_buf != NULL )
  {
    m_pMsgData = GFL_NEW(m_heap->GetSystemHeap()) gfl2::str::MsgData( msg_buf, m_heap->GetDeviceHeap() );
    m_pWordSet = GFL_NEW(m_heap->GetSystemHeap()) print::WordSet( m_heap->GetDeviceHeap() );

    Create2D(
      m_heap,
      NULL,
      LYTID_MAX,
      res_tbl,
      GFL_NELEMS(res_tbl),
      data_tbl,
      GFL_NELEMS(data_tbl),
      m_pMsgData,
      m_pWordSet );
  }
  else
  {
    Create2D(
      m_heap,
      NULL,
      LYTID_MAX,
      res_tbl,
      GFL_NELEMS(res_tbl),
      data_tbl,
      GFL_NELEMS(data_tbl),
      UIView::UNUSE_MESSAGE_DATA );
  }

  VanishLandNameWindow();

  GetG2DUtil()->StartAnime( LYTID_ISLAND_MAP, LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000_AREA_ANIME );
}

//-----------------------------------------------------------------------------
/**
 * @func    Terminate2D
 * @brief   2D関連削除
 * @date    2015.10.13
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::Terminate2D(void)
{
  Delete2D();
  GFL_SAFE_DELETE( m_pWordSet );
  GFL_SAFE_DELETE( m_pMsgData );
}

//-----------------------------------------------------------------------------
/**
 * @func    Start
 * @brief   開始処理
 * @date    2015.10.13
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::Start(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  g2d->StartAnime( LYTID_ISLAND_MAP, LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__CURSOR_00_CURSOR_LOOP );
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    IsStart
 * @brief   開始処理が終了したかをチェック
 * @date    2015.10.14
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::IsStart(void)
{
  SetInputEnabled( true );
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    LoadResource
 * @brief   リソース読み込み
 * @date    2015.10.13
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::LoadResource(void)
{
  switch( m_subSeq )
  {
  case 0:   // レイアウトファイルオープン
    app::util::FileAccessor::FileOpen( ARCID_TOWNMAP_GRA, m_heap->GetSystemHeap() );
    m_subSeq++;
    /* FALL THROUGH */
  case 1:   // レイアウトファイルロード
    if( app::util::FileAccessor::IsFileOpen( ARCID_TOWNMAP_GRA ) == false )
    {
      break;
    }
    app::util::FileAccessor::FileLoad(
      ARCID_TOWNMAP_GRA,
      GARC_TownMapGraphic_TownMapLow_applyt_COMP,
      &m_pLytResBuffer,
      m_heap->GetDeviceHeap(),
      true,
      nw::lyt::ARCHIVE_RESOURCE_ALIGNMENT );
    m_subSeq++;
    /* FALL THROUGH */
  case 2:   // レイアウトファイルクローズ
    if( app::util::FileAccessor::IsFileLoad( &m_pLytResBuffer ) == false )
    {
      break;
    }
    app::util::FileAccessor::FileClose( ARCID_TOWNMAP_GRA, m_heap->GetSystemHeap() );
    m_subSeq++;
    /* FALL THROUGH */
  case 3:   // タウンマップデータファイルオープン
    if( app::util::FileAccessor::IsFileClose( ARCID_TOWNMAP_GRA ) == false )
    {
      break;
    }
    app::util::FileAccessor::FileOpen( ARCID_TOWNMAP_DATA, m_heap->GetSystemHeap() );
    m_subSeq++;
    /* FALL THROUGH */
  case 4:   // タウンマップデータロード
    if( app::util::FileAccessor::IsFileOpen( ARCID_TOWNMAP_DATA ) == false )
    {
      break;
    }
    app::util::FileAccessor::FileLoad(
      ARCID_TOWNMAP_DATA,
      GARC_TownMapData_niji_townmap_zonedata_BIN,
      &m_pResZoneData,
      m_heap->GetDeviceHeap(),
      false,
      4,
      gfl2::fs::ToolDefine::ArcLangType::DEFAULT_LANG,
      NULL,
      &m_resZoneDataLen );
    m_subSeq++;
    /* FALL THROUGH */
  case 5:   // タウンマップデータクローズ
    if( app::util::FileAccessor::IsFileLoad( &m_pResZoneData ) == false )
    {
      break;
    }
    app::util::FileAccessor::FileClose( ARCID_TOWNMAP_DATA, m_heap->GetSystemHeap() );
    m_subSeq++;
    /* FALL THROUGH */
  case 6:   // ファイル操作終了
    if( app::util::FileAccessor::IsFileClose( ARCID_TOWNMAP_DATA ) == false )
    {
      break;
    }
    m_resZoneData = static_cast<ZONE_RESOURCE*>(m_pResZoneData);
    m_resZoneDataLen = m_resZoneDataLen / sizeof(ZONE_RESOURCE);
    m_subSeq = 0;
    return true;
  };

  return false;
}

//-----------------------------------------------------------------------------
/**
 * @func    UnloadResource
 * @brief   リソース削除
 * @date    2015.10.13
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::UnloadResource(void)
{
  GflHeapSafeFreeMemory( m_resZoneData );
  GflHeapSafeFreeMemory( m_pLytResBuffer );
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetLayoutResource
 * @brief   レイアウトリソース取得
 * @date    2015.10.13
 *
 * @return  レイアウトリソース
 */
//-----------------------------------------------------------------------------
void * TownMapPartsDraw::GetLayoutResource(void)
{
  return m_pLytResBuffer;
}


//-----------------------------------------------------------------------------
/**
 * @func    CreateMapManager
 * @brief   マップマネージャ生成
 * @date    2015.10.14
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::CreateMapManager(void)
{
  switch( m_subSeq )
  {
  case 0:
    m_pMapManager = GFL_NEW(m_heap->GetSystemHeap()) App::Tool::MapManager( m_heap, GetG2DUtil(), false );
    m_subSeq++;
    /* FALL THROUGH */
  case 1:
    if( m_pMapManager->Initialize() == false )
    {
      break;
    }
    m_subSeq = 0;
    return true;
  }

  return false;
}

//-----------------------------------------------------------------------------
/**
 * @func    DeleteMapManager
 * @brief   マップマネージャ削除
 * @date    2015.10.14
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::DeleteMapManager(void)
{
  if( m_pMapManager != NULL )
  {
    if( m_pMapManager->Terminate() == false )
    {
      return false;
    }
    GFL_SAFE_DELETE( m_pMapManager );
  }
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    CreateEventListDataManager
 * @brief   イベントリストデータマネージャ削除
 * @date    2015.11.03
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::CreateEventListDataManager(void)
{
  switch( m_subSeq )
  {
  case 0:
    if( m_callMode == CALL_ZUKAN )
    {
      return true;
    }
    m_pEventListDataManager = GFL_NEW(m_heap->GetSystemHeap()) Field::EventList::EventListDataManager(
                                                                GFL_SINGLETON_INSTANCE(GameSys::GameManager),
                                                                m_heap->GetDeviceHeap(),
                                                                GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetAsyncFileManager() );
    m_pEventListDataManager->Initialize( Field::EventList::EventListDataManager::EVENT_LIST_DATA_TYPE_APP );
    m_subSeq++;
    /* FALL THROUGH */
  case 1:
    if( m_pEventListDataManager->InitializeWait() == false )
    {
      break;
    }
    m_subSeq = 0;
    return true;
  }

  return false;
}

//-----------------------------------------------------------------------------
/**
 * @func    DeleteEventListDataManager
 * @brief   イベントリストデータマネージャ削除
 * @date    2015.11.03
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::DeleteEventListDataManager(void)
{
  if( m_pEventListDataManager != NULL )
  {
    m_pEventListDataManager->Terminate();
    GFL_SAFE_DELETE( m_pEventListDataManager );
  }
}


//-----------------------------------------------------------------------------
/**
 * @func    CreateButton
 * @brief   ボタン生成
 * @date    2015.10.14
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::CreateButton(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );

  app::ui::ButtonInfoLytWk * info = GFL_NEW_LOW_ARRAY(m_heap->GetSystemHeap()) app::ui::ButtonInfoLytWk[BTNID_MAX];
  CreateNormalButton( &info[BTNID_RETURN] );
  CreatePlaceIconButton( &info[BTNID_PLACE_ICON] );
  app::ui::UIResponder::CreateButtonManager( m_heap, info, BTNID_MAX );
  GFL_DELETE_ARRAY info;

  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();
  // キーバインド
  man->SetButtonBindKey( BTNID_RETURN, gfl2::ui::BUTTON_B, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
  if( m_callMode == CALL_ZUKAN )
  {
    man->SetButtonBindKey( BTNID_ZOOM, gfl2::ui::BUTTON_A|gfl2::ui::BUTTON_Y, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
  }
  else
  {
    man->SetButtonBindKey( BTNID_ZOOM, gfl2::ui::BUTTON_Y, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
  }

  { // SE
    static const u32 tbl[] =
    {
      SEQ_SE_CANCEL1,
      SEQ_SE_SYS_001,
      SEQ_SE_PAGE3,
      SEQ_SE_PAGE3,
    };
    for( u32 i=0; i<BTNID_MAX; i++ )
    {
      if( i < BTNID_PLACE_ICON )
      {
        man->SetButtonSelectSE( i, tbl[i] );
      }
      else
      {
        man->SetButtonSelectSE( i, SEQ_SE_DECIDE1 );
      }
    }
  }

  PutLandChangeButton( !m_isZoom );
}

//-----------------------------------------------------------------------------
/**
 * @func    SetButtonInfoEx
 * @brief   ボタン情報生成
 * @date    2015.10.14
 *
 * @param   info        生成場所
 * @param   info_tbl    デフォルト情報テーブル
 * @param   parts_tbl   部品ペインテーブル
 * @param   bound_tbl   境界ペインテーブル
 * @param   max         生成数
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetButtonInfoEx(
      app::ui::ButtonInfoLytWk * info,
      const app::ui::ButtonInfoLytWk * info_tbl, 
      const gfl2::lyt::LytPaneIndex * parts_tbl,
      const gfl2::lyt::LytPaneIndex * bound_tbl,
      u32 max )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_BUTTON );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );

  for( u32 i=0; i<max; i++ )
  {
    gfl2::lyt::LytParts * parts = lytwk->GetPartsPane( parts_tbl[i] );
    info[i] = info_tbl[i];
    info[i].picture_pane = parts;
    info[i].bound_pane   = lytwk->GetBoundingPane( parts, bound_tbl[i], &res_id );
    info[i].lyt_wk       = lytwk;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    CreateNormalButton
 * @brief   基本のボタン生成
 * @date    2015.10.14
 *
 * @param   info  生成場所
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::CreateNormalButton( app::ui::ButtonInfoLytWk * info )
{
  static const gfl2::lyt::LytPaneIndex parts_tbl[] =
  {
    PANENAME_TOWNMAP_MIN_LOW_000_PANE_BTN_BACK,
    PANENAME_TOWNMAP_MIN_LOW_000_PANE_BTN_ZOOM,
    PANENAME_TOWNMAP_MIN_LOW_000_PANE_CURSOR_L,
    PANENAME_TOWNMAP_MIN_LOW_000_PANE_CURSOR_R,
  };
  static const gfl2::lyt::LytPaneIndex bound_tbl[] =
  {
    PANENAME_COMMON_BTN_LOW_000_PANE_BOUND_00,
    PANENAME_EVENTLIST_BTN_LOW_003_PANE_BOUND_00,
    PANENAME_COMMON_CUR_LOW_004_PANE_BOUND_00,
    PANENAME_COMMON_CUR_LOW_004_PANE_BOUND_00,
  };

  static const app::ui::ButtonInfoLytWk info_tbl[] =
  {
    {
      BTNID_RETURN, NULL, NULL, NULL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_TOUCH,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_CANSEL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_TOUCH_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_ACTIVE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_BACK_PASSIVE,
    },
    {
      BTNID_ZOOM, NULL, NULL, NULL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_TOUCH,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_CANSEL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_TOUCH_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_ACTIVE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_PASSIVE,
    },
    {
      BTNID_ARROW_L, NULL, NULL, NULL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_TOUCH,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_CANSEL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_TOUCH_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_ACTIVE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_L_PASSIVE,
    },
    {
      BTNID_ARROW_R, NULL, NULL, NULL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_TOUCH,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_CANSEL,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_TOUCH_RELEASE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_ACTIVE,
      LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__CURSOR_R_PASSIVE,
    },
  };

  SetButtonInfoEx( info, info_tbl, parts_tbl, bound_tbl, GFL_NELEMS(parts_tbl) );
}

//-----------------------------------------------------------------------------
/**
 * @func    CreatePlaceIconButton
 * @brief   場所アイコンのボタン生成
 * @date    2015.10.23
 *
 * @param   info  生成場所
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::CreatePlaceIconButton( app::ui::ButtonInfoLytWk * info )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_ISLAND_MAP );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );

  for( u32 i=0; i<PLACE_ICON_MAX; i++ )
  {
    gfl2::lyt::LytParts * parts = lytwk->GetPartsPane( PlaceIconTable[i].pane );

    info[i].button_id = BTNID_PLACE_ICON + i;

    info[i].picture_pane = parts;
    info[i].bound_pane   = lytwk->GetBoundingPane( parts, PANENAME_TOWNMAP_ICN_LOW_001_PANE_BOUND_00, &res_id );
    info[i].lyt_wk       = lytwk;
    info[i].touch_anime_index      = PlaceIconTable[i].anm_touch;
    info[i].release_anime_index    = PlaceIconTable[i].anm_release;
    info[i].cancel_anime_index     = PlaceIconTable[i].anm_cancel;
    info[i].key_select_anime_index = PlaceIconTable[i].anm_select;
    info[i].active_anime_index     = PlaceIconTable[i].anm_active;
    info[i].passive_anime_index    = PlaceIconTable[i].anm_passive;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    ChangeZoomButton
 * @brief   拡縮ボタンの切り替え
 * @date    2015.10.14
 *
 * @param   is_zoom   true = 拡大ボタン, false = 縮小ボタン
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ChangeZoomButton( bool is_zoom )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  u32 zoom_button = gfl2::ui::BUTTON_Y;
  if( m_callMode == CALL_ZUKAN )
  {
    zoom_button |= gfl2::ui::BUTTON_A;
  }

  if( is_zoom != false )
  {
    // 戻るボタン
    man->SetButtonBindKey( BTNID_RETURN, gfl2::ui::BUTTON_B, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
    man->SetButtonVisible( BTNID_RETURN, true );
    // 拡大ボタン
    g2d->StartAnime( LYTID_BUTTON, LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_ZOOM_00 );
    man->SetButtonBindKey( BTNID_ZOOM, zoom_button, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
    man->SetButtonSelectSE( BTNID_ZOOM, SEQ_SE_SYS_001 );
  }
  else
  {
    // 縮小ボタン
    g2d->StartAnime( LYTID_BUTTON, LA_TOWNMAPLOW_TOWNMAP_MIN_LOW_000__BTN_ZOOM_ZOOM_01 );
    man->SetButtonBindKey( BTNID_ZOOM, zoom_button|gfl2::ui::BUTTON_B, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
    man->SetButtonSelectSE( BTNID_ZOOM, SEQ_SE_SYS_002 );
    // 戻るボタン
    man->SetButtonBindKey( BTNID_RETURN, gfl2::ui::BUTTON_INVALID, app::tool::ButtonManager::BIND_KEY_MODE_TRIGGER );
    man->SetButtonInvisible( BTNID_RETURN );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    PutLandChangeButton
 * @brief   島切り替えボタンの表示切り替え
 * @date    2015.10.23
 *
 * @param   flg   true = 表示
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutLandChangeButton( bool flg )
{
  if( m_callMode == CALL_ZUKAN )
  {
    flg = false;
  }

  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  if( flg == false )
  {
    man->SetButtonInvisible( BTNID_ARROW_L );
    man->SetButtonInvisible( BTNID_ARROW_R );
  }
  else
  {
    man->SetButtonVisible( BTNID_ARROW_L, true );
    man->SetButtonVisible( BTNID_ARROW_R, true );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    InitChangeMapMode
 * @brief   マップ表示モード切り替え初期設定
 * @date    2015.10.14
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitChangeMapMode(void)
{
  GetInitLandMapPos();

  // カーソル位置を取得
  f32 x, y;
  GetCursorPos( &x, &y );

  // 縮小マップの範囲を取得
  f32 au, ad, al, ar;
  GetSmallMapArea( &au, &ad, &al, &ar );

  // 縮小 => 拡大
  if( m_isZoom == false )
  {
    { // マップの自動移動パラメータ設定
      f32 move_frame_x = ( -x ) / static_cast<f32>(MAP_ZOOM_COUNT);
      f32 move_frame_y = ( -y ) / static_cast<f32>(MAP_ZOOM_COUNT);
      for( u32 i=0; i<MAP_ZOOM_COUNT; i++ )
      {
        m_moveLandMapX[i] = m_initLandMapPX + move_frame_x * (i+1);
        m_moveLandMapY[i] = m_initLandMapPY + move_frame_y * (i+1);
      }
    }
    {
      // カーソル位置からフィールド座標を取得
      f32 field_x = x;
      f32 field_y = y;
      { // カーソル位置を縮小マップの範囲内に設定
        if( field_x < al )
        {
          field_x = al;
        }
        else if( field_x > ar )
        {
          field_x = ar;
        }
        if( field_y < ad )
        {
          field_y = ad;
        }
        else if( field_y > au )
        {
          field_y = au;
        }
      }
      GetFieldPos( &field_x, &field_y );

      { // 拡大マップを設定
        static const SubScreenMapType tbl[] =
        {
          SUBSCREEN_MAP_TYPE_W_F0102,
          SUBSCREEN_MAP_TYPE_W_F0201,
          SUBSCREEN_MAP_TYPE_W_F0301,
          SUBSCREEN_MAP_TYPE_W_F0401,
          SUBSCREEN_MAP_TYPE_W_F0501I0101,
        };
        if( m_landNo >= LAND_DATA_MAX )
        {
          GFL_ASSERT( 0 );
          m_pMapManager->ResetMapData( m_pMapManager->GetMapDataIndex(tbl[0]), field_x, field_y );
        }
        else
        {
          m_pMapManager->ResetMapData( m_pMapManager->GetMapDataIndex(tbl[m_landNo]), field_x, field_y );
        }
        m_pMapManager->SetVisible( true );
      }

      // カーソルの自動移動パラメータ設定
      m_endCursorX = field_x;
      m_endCursorY = field_y;
      { // 拡大マップでのカーソル座標を取得
        f32 cx, cy;
        m_pMapManager->GetCenterPos( &cx, &cy );
        m_pMapManager->CalcIconPosition( &m_endCursorX, &m_endCursorY, cx, cy );
      }
      m_moveCursorX = ( m_endCursorX - x ) / static_cast<f32>(MAP_ZOOM_COUNT);
      m_moveCursorY = ( m_endCursorY - y ) / static_cast<f32>(MAP_ZOOM_COUNT);
    }
  }
  // 拡大 => 縮小
  else
  {
    f32 map_x, map_y;
    m_pMapManager->GetCenterPos( &map_x, &map_y );

    map_x += TOWNMAP_DOT_CALC_X(x);
    map_y -= TOWNMAP_DOT_CALC_Y(y);

    GetMapPos( &map_x, &map_y );

    { // マップの自動移動パラメータ設定
      f32 move_frame_x = ( map_x - x ) / static_cast<f32>(MAP_ZOOM_COUNT);
      f32 move_frame_y = ( map_y - y ) / static_cast<f32>(MAP_ZOOM_COUNT);
      for( u32 i=0; i<MAP_ZOOM_COUNT; i++ )
      {
        m_moveLandMapX[i] = m_initLandMapPX - move_frame_x * (MAP_ZOOM_COUNT-i);
        m_moveLandMapY[i] = m_initLandMapPY - move_frame_y * (MAP_ZOOM_COUNT-i);
      }
    }
    SetLandMapPos( m_moveLandMapX[0], m_moveLandMapY[0] );

    // カーソルの自動移動パラメータ設定
    m_endCursorX = map_x;
    m_endCursorY = map_y;
    { // カーソル位置を縮小マップの範囲内に設定
      if( m_endCursorX < al )
      {
        m_endCursorX = al;
      }
      else if( m_endCursorX > ar )
      {
        m_endCursorX = ar;
      }
      if( m_endCursorY < ad )
      {
        m_endCursorY = ad;
      }
      else if( m_endCursorY > au )
      {
        m_endCursorY = au;
      }
    }
    m_moveCursorX = ( m_endCursorX - x ) / static_cast<f32>(MAP_ZOOM_COUNT);
    m_moveCursorY = ( m_endCursorY - y ) / static_cast<f32>(MAP_ZOOM_COUNT);
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    StartChangeMapMode
 * @brief   マップ表示モード切り替え開始
 * @date    2015.10.14
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::StartChangeMapMode(void)
{
  // アイコン非表示
  PutIcon( false );

  // アイコン変更
  m_listener->OnAction( SubScreenMapListener::ACTION_ID_SET_ICONDATA );
  SetPlaceIconData( !m_isZoom );
  SetPlaceIconType();

  // ボタン無効
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();
  man->SetButtonPassive( BTNID_RETURN, false );
  man->SetButtonPassive( BTNID_ZOOM, false );
  PutLandChangeButton( false );

  m_modeChangeCount = 0;

  m_updateMain = UPDATE_SEQ_ZOOM;
  m_updateSub  = 0;

  m_isZoneGetLock = true;   //!< ゾーン取得禁止
}

//-----------------------------------------------------------------------------
/**
 * @func    EndChangeMapMode
 * @brief   マップ表示モード切り替え終了
 * @date    2015.10.14
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::EndChangeMapMode(void)
{
  m_isZoneGetLock = false;   //!< ゾーン取得許可

  // ボタン有効
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();
  man->SetButtonActive( BTNID_RETURN, false );
  man->SetButtonActive( BTNID_ZOOM, false );

  PutCursor( m_endCursorX, m_endCursorY );

  // 個別処理
  if( m_isZoom == false )
  {
    m_isZoom = true;
    ChangeZoomButton( false );
  }
  else
  {
    m_isZoom = false;
    ChangeZoomButton( true );
    PutLandChangeButton( true );
  }

  SetLandMapPos( m_initLandMapPX, m_initLandMapPY );

  GetG2DUtil()->SetPaneVisible( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, true );

  PutIcon( true );
  MoveIcon();

  m_listener->OnAction( SubScreenMapListener::ACTION_ID_ZOOM_END );

  m_updateMain = UPDATE_SEQ_WAIT;
  m_updateSub  = 0;
}

//-----------------------------------------------------------------------------
/**
 * @func    ChangeMapMode
 * @brief   マップ表示モード切り替え
 * @date    2015.10.14
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ChangeMapMode(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();

  s32 alpha = g2d->GetPaneAlpha( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_ALL );

  gfl2::math::VEC2 scale;
  g2d->GetScale( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_ALL, &scale );


  if( m_isZoom == false )
  {
    if( m_pMapManager->IsMapTextureReplace() == false )
    {
      return;
    }

    m_modeChangeCount++;

    if( m_modeChangeCount == MAP_ZOOM_COUNT )
    {
      scale.x = MAP_ZOOM_SCALE_MAX;
      scale.y = scale.x;

      alpha = 0;
      EndChangeMapMode();
    }
    else
    {
      scale.x += MAP_ZOOM_SCALE_VAL;
      if( scale.x > MAP_ZOOM_SCALE_MAX )
      {
        scale.x = MAP_ZOOM_SCALE_MAX;
      }
      scale.y = scale.x;

      if( alpha >= MAP_ZOOM_ALPHA_VAL )
      {
        alpha -= MAP_ZOOM_ALPHA_VAL;
      }
      else
      {
        alpha = 0;
      }

      AutoMoveCursor();
      SetLandMapPos( m_moveLandMapX[m_modeChangeCount], m_moveLandMapY[m_modeChangeCount] );
    }
  }
  else
  {
    m_modeChangeCount++;

    if( m_modeChangeCount == MAP_ZOOM_COUNT )
    {
      scale.x = MAP_ZOOM_SCALE_MIN;
      scale.y = scale.x;

      alpha = 255;
      m_pMapManager->SetVisible( false );
      EndChangeMapMode();
    }
    else
    {
      scale.x -= MAP_ZOOM_SCALE_VAL;
      if( scale.x < MAP_ZOOM_SCALE_MIN )
      {
        scale.x = MAP_ZOOM_SCALE_MIN;
      }
      scale.y = scale.x;

      alpha += MAP_ZOOM_ALPHA_VAL;
      if( alpha > 255 )
      {
        alpha = 255;
      }

      AutoMoveCursor();
      SetLandMapPos( m_moveLandMapX[m_modeChangeCount-1], m_moveLandMapY[m_modeChangeCount-1] );
    }
  }

  g2d->SetPaneAlpha( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_ALL, alpha );
  g2d->SetScale( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_ALL, scale );
}

//-----------------------------------------------------------------------------
/**
 * @func    InitCursorPos
 * @brief   カーソル初期配置
 * @date    2015.12.16
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitCursorPos(void)
{
  if( m_heroLandNo == m_landNo )
  {
    app::util::G2DUtil * g2d = GetG2DUtil();
    gfl2::math::VEC3 pos = g2d->GetPaneLocalPos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00 );
    g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, &pos );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    PutCursor
 * @brief   カーソル配置
 * @date    2015.10.19
 *
 * @param   x   X座標
 * @param   y   Y座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutCursor( f32 x, f32 y )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::math::VEC3 pos = g2d->GetPaneLocalPos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00 );

  // 移動座標の最大値を取得（カーソルを画面外に移動させないため）
  f32 mv_up_max, mv_down_max, mv_left_max, mv_right_max;
  GetCursorMoveMax( &mv_up_max, &mv_down_max, &mv_left_max, &mv_right_max );

  if( x > mv_right_max )
  {
    pos.x = mv_right_max;
  }
  else if( x < mv_left_max )
  {
    pos.x = mv_left_max;
  }
  else
  {
    pos.x = x;
  }

  if( y > mv_up_max )
  {
    pos.y = mv_up_max;
  }
  else if( y < mv_down_max )
  {
    pos.y = mv_down_max;
  }
  else
  {
    pos.y = y;
  }

  g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, &pos );
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorMoveMax
 * @brief   カーソル移動座標の最大値を取得
 * @date    2016.05.05
 *
 * @param   u   上
 * @param   d   下
 * @param   l   左
 * @param   r   右
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetCursorMoveMax( f32 * u, f32 * d, f32 * l, f32 * r )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_ISLAND_MAP );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );
  gfl2::lyt::LytPane * pane = lytwk->GetPane(
                                lytwk->GetPartsPane(PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00),
                                PANENAME_TOWNMAP_CUR_LOW_000_PANE_BOUND_00,
                                &res_id );

  nw::lyt::Size size = pane->GetSize();

  *u = DISP_HEIGHT_HALF - size.height / 2.0f;
  *d = -DISP_HEIGHT_HALF;
  *l = -DISP_WIDTH_HALF;
  *r = DISP_WIDTH_HALF - size.width / 2.0f;
}

//-----------------------------------------------------------------------------
/**
 * @func    MoveCursor
 * @brief   カーソル移動
 * @date    2015.10.16
 *
 * @param   mx        X方向移動方向
 * @param   my        Y方向移動方向
 * @param   is_boost  true = 速度アップ
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::MoveCursor( s32 mx, s32 my, bool is_boost )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::math::VEC3 pos = g2d->GetPaneLocalPos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00 );

  f32 map_mx = 0.0f;
  f32 map_my = 0.0f;

  f32 speed = GetCursorSpeed();
  if( is_boost != false )
  {
    speed *= 2.0f;
  }

  pos.x += ( static_cast<f32>( mx ) * speed );
  pos.y += ( static_cast<f32>( my ) * speed );

  // 移動座標の最大値を取得（カーソルを画面外に移動させないため）
  f32 mv_up_max, mv_down_max, mv_left_max, mv_right_max;
  GetCursorMoveMax( &mv_up_max, &mv_down_max, &mv_left_max, &mv_right_max );

  // 左
  if( pos.x < mv_left_max )
  {
    map_mx = pos.x - mv_left_max;
    pos.x = mv_left_max;
  }
  // 右
  else if( pos.x > mv_right_max )
  {
    map_mx = pos.x - mv_right_max;
    pos.x = mv_right_max;
  }

  // 下
  if( pos.y < mv_down_max )
  {
    map_my = -( pos.y - mv_down_max );
    pos.y = -DISP_HEIGHT_HALF;
  }
  // 上
  else if( pos.y > mv_up_max )
  {
    map_my = -( pos.y - mv_up_max );
    pos.y = mv_up_max;
  }

  g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, &pos );

  if( map_mx != 0.0f || map_my != 0.0f )
  {
    m_pMapManager->MovePosition( TOWNMAP_DOT_CALC_X(map_mx), TOWNMAP_DOT_CALC_Y(map_my) );
    MoveIcon();
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    AutoMoveCursor
 * @brief   カーソル自動移動
 * @date    2015.10.16
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::AutoMoveCursor(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::math::VEC3 pos = g2d->GetPaneLocalPos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00 );

  pos.x += m_moveCursorX;
  pos.y += m_moveCursorY;

  // 移動座標の最大値を取得（カーソルを画面外に移動させないため）
  f32 mv_up_max, mv_down_max, mv_left_max, mv_right_max;
  GetCursorMoveMax( &mv_up_max, &mv_down_max, &mv_left_max, &mv_right_max );

  if( pos.x > mv_right_max )
  {
    pos.x = mv_right_max;
  }
  else if( pos.x < mv_left_max )
  {
    pos.x = mv_left_max;
  }

  if( pos.y > mv_up_max )
  {
    pos.y = mv_up_max;
  }
  else if( pos.y < mv_down_max )
  {
    pos.y = mv_down_max;
  }

  g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, &pos );
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorPos
 * @brief   カーソル座標を取得
 * @date    2015.10.16
 *
 * @param   x   X座標
 * @param   y   Y座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetCursorPos( f32 * x, f32 * y )
{
  gfl2::math::VEC3 pos = GetG2DUtil()->GetPaneLocalPos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00 );
  *x = pos.x;
  *y = pos.y;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetSmallMapArea
 * @brief   縮小マップのフィールド範囲取得
 * @date    2016.04.26
 *
 * @param   au  上Y座標格納場所
 * @param   ad  下Y座標格納場所
 * @param   al  左X座標格納場所
 * @param   ar  右X座標格納場所
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetSmallMapArea( f32 * au, f32 * ad, f32 * al, f32 * ar )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::math::VEC3 pos = g2d->GetPanePos( LYTID_ISLAND_MAP, LandData[m_landNo].range_pane );
  nw::lyt::Size size = g2d->GetSize( LYTID_ISLAND_MAP, LandData[m_landNo].range_pane );

  // 上
  *au = pos.y;
  if( *au > DISP_HEIGHT_HALF )
  {
    *au = DISP_HEIGHT_HALF;
  }
  // 下
  *ad = pos.y - size.height;
  if( *ad < -DISP_HEIGHT_HALF )
  {
    *ad = -DISP_HEIGHT_HALF;
  }
  // 左
  *al = pos.x;
  if( *al < -DISP_WIDTH_HALF )
  {
    *al = -DISP_WIDTH_HALF;
  }
  // 右
  *ar = pos.x + size.width;
  if( *ar > DISP_WIDTH_HALF )
  {
    *ar = DISP_WIDTH_HALF;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    GetMapPos
 * @brief   マップ上の座標を取得
 * @date    2015.10.16
 *
 * @param   x   X座標
 * @param   y   Y座標
 *
 * @note    [in]: フィールドの座標
 * @note   [out]: マップの座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetMapPos( f32 * x, f32 * y )
{
  gfl2::math::VEC3 pos = GetG2DUtil()->GetPaneLocalPos( LYTID_ISLAND_MAP, LandData[m_landNo].range_pane );
  GetMapPos( &pos, x, y );
}

//-----------------------------------------------------------------------------
/**
 * @func    GetMapPos
 * @brief   マップ上の座標を取得
 * @date    2015.11.02
 *
 * @param   pane  基準ペイン
 * @param   x     X座標
 * @param   y     Y座標
 *
 * @note    [in]: フィールドの座標
 * @note   [out]: マップの座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetMapPos( gfl2::lyt::LytPane * pane, f32 * x, f32 * y )
{
  gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );
  if( pane != NULL )
  {
    pos = pane->GetTranslate();
  }
  GetMapPos( &pos, x, y );
}

//-----------------------------------------------------------------------------
/**
 * @func    GetMapPos
 * @brief   マップ上の座標を取得
 * @date    2015.11.02
 *
 * @param   pos   基準座標
 * @param   x     X座標
 * @param   y     Y座標
 *
 * @note    [in]: フィールドの座標
 * @note   [out]: マップの座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetMapPos( gfl2::math::VEC3 * pos, f32 * x, f32 * y )
{
  *x = ( *x * DEFAULT_X_SIZE ) / static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_X_SIZE) + pos->x;
  *y = pos->y - ( *y * DEFAULT_Y_SIZE ) / static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_Y_SIZE);
}

//-----------------------------------------------------------------------------
/**
 * @func    GetFieldPos
 * @brief   フィールドの座標を取得
 * @date    2015.10.16
 *
 * @param   x   X座標
 * @param   y   Y座標
 *
 * @note    [in]: マップの座標
 * @note   [out]: フィールドの座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetFieldPos( f32 * x, f32 * y )
{
  gfl2::math::VEC3 pos = GetG2DUtil()->GetPaneLocalPos( LYTID_ISLAND_MAP, LandData[m_landNo].range_pane );

  // 左上(0,0)の座標に変換し、範囲ペインの座標を原点にした座標に変換
  f32 tx = (*x+DISP_WIDTH_HALF) - (pos.x+DISP_WIDTH_HALF);
  f32 ty = (DISP_HEIGHT_HALF-*y) - (DISP_HEIGHT_HALF-pos.y);

  *x = ( tx / DEFAULT_X_SIZE ) * static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_X_SIZE) + (static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_X_SIZE)/DEFAULT_X_SIZE/2.0f);
  *y = ( ty / DEFAULT_Y_SIZE ) * static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_Y_SIZE) + (static_cast<f32>(App::Tool::MapManager::MAP_3D_DEFAULT_Y_SIZE)/DEFAULT_Y_SIZE/2.0f);
}


//-----------------------------------------------------------------------------
/**
 * @func    GetInitLandMapPos
 * @brief   島ペインのデフォルト座標を記憶
 * @date    2015.10.19
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetInitLandMapPos(void)
{
  gfl2::math::VEC3 pos = GetG2DUtil()->GetPaneLocalPos( LYTID_ISLAND_MAP, LandData[m_landNo].parent_pane );
  m_initLandMapPX = pos.x;
  m_initLandMapPY = pos.y;
}

//-----------------------------------------------------------------------------
/**
 * @func    SetLandMapPos
 * @brief   島ペインを指定座標に移動
 * @date    2015.10.19
 *
 * @param   x   X座標
 * @param   y   Y座標
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetLandMapPos( f32 x, f32 y )
{
  gfl2::math::VEC3 pos( x, y, 0.0f );
  GetG2DUtil()->SetPanePos( LYTID_ISLAND_MAP, LandData[m_landNo].parent_pane, &pos );
}

//-----------------------------------------------------------------------------
/**
 * @func    ChangeLandNo
 * @brief   島番号を変更
 * @date    2015.10.21
 *
 * @param   land_no   島番号 ( 0オリジン )
 * @param   mode      切り替えモード
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ChangeLandNo( u32 land_no, LandChangeMode mode )
{
  if( m_landNo == land_no )
  {
    return;
  }

  { // 現在地との差を求める
    s32 new_index = GetLandIndex( land_no );
    s32 l = GetLandIndex( m_landNo );
    s32 r = l;
    s32 lp = LAND_DATA_MAX;
    s32 rp = LAND_DATA_MAX;

    if( mode != LAND_CHANGE_RIGHT )
    {
      for( s32 i=0; i<LAND_DATA_MAX; i++ )
      {
        if( l == new_index )
        {
          lp = i;
          break;
        }
        l--;
        if( l < 0 )
        {
          l = LAND_DATA_MAX-1;
        }
      }
    }
    if( mode != LAND_CHANGE_LEFT )
    {
      for( s32 i=0; i<LAND_DATA_MAX; i++ )
      {
        if( r == new_index )
        {
          rp = i;
          break;
        }
        r++;
        if( r >= LAND_DATA_MAX )
        {
          r = 0;
        }
      }
    }
    else
    {
      r = LAND_DATA_MAX;
    }

    if( lp < rp )
    {
      m_landChangeMove = -lp;
    }
    else
    {
      m_landChangeMove = rp;
    }
  }

  ChangeWorld( land_no );

  SetInputEnabled( false );

  PutIcon( false );

  m_listener->OnAction( SubScreenMapListener::ACTION_ID_LAND_CHANGE );

  m_updateMain = UPDATE_SEQ_LAND_CHANGE;
  m_updateSub  = 0;
}

//-----------------------------------------------------------------------------
/**
 * @func    ChangeLand
 * @brief   島変更処理
 * @date    2015.10.21
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ChangeLand(void)
{
  switch( m_updateSub )
  {
  case 0:
    InitChangeLand();
    m_updateSub++;
    break;

  case 1:
    if( MainChangeLand() == false )
    {
      break;
    }
    m_landNo = GetNextLand( m_landChangeMove );
    m_listener->OnAction( SubScreenMapListener::ACTION_ID_SET_ICONDATA );
    SetPlaceIconData( m_isZoom );
    SetPlaceIconType();
    PutLandName();
    m_updateSub++;
    break;

  case 2:
    EndChangeLand();
    m_updateMain = UPDATE_SEQ_WAIT;
    m_updateSub = 0;
    break;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    InitChangeLand
 * @brief   島変更処理：初期化
 * @date    2015.10.21
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitChangeLand(void)
{
  { // 移動座標
    s32 cnt = 0;
    for( s32 i=0; i<LAND_MOVE_COUNT; i++ )
    {
      cnt += (i+1);
    }
    m_landMoveX = static_cast<f32>(DISPLAY_LOWER_WIDTH*m_landChangeMove) / static_cast<f32>( cnt * -1 );
  }

  { // ペイン配置
    app::util::G2DUtil * g2d = GetG2DUtil();
    gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );
    if( m_landChangeMove > 0 )
    {
      for( s32 i=0; i<=m_landChangeMove; i++ )
      {
        s32 land = GetNextLand( i );
        g2d->SetPanePos( LYTID_ISLAND_MAP, LandData[land].parent_pane, &pos );
        g2d->SetPaneVisible( LYTID_ISLAND_MAP, LandData[land].parent_pane, true );
        pos.x += static_cast<f32>(DISPLAY_LOWER_WIDTH);
      }
    }
    else
    {
      for( s32 i=0; i>=m_landChangeMove; i-- )
      {
        s32 land = GetNextLand( i );
        g2d->SetPanePos( LYTID_ISLAND_MAP, LandData[land].parent_pane, &pos );
        g2d->SetPaneVisible( LYTID_ISLAND_MAP, LandData[land].parent_pane, true );
        pos.x -= static_cast<f32>(DISPLAY_LOWER_WIDTH);
      }
    }
  }

  m_landMoveCount = 0;

  m_isZoneGetLock = true;   //!< ゾーン取得禁止
}

//-----------------------------------------------------------------------------
/**
 * @func    MainChangeLand
 * @brief   島変更処理：メイン
 * @date    2015.10.21
 *
 * @retval  true  = 終了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::MainChangeLand(void)
{
  if( m_landMoveCount >= LAND_MOVE_COUNT )
  {
    return true;
  }

  app::util::G2DUtil * g2d = GetG2DUtil();
  for( s32 i=0; i<LAND_DATA_MAX; i++ )
  {
    gfl2::math::VEC3 pos = g2d->GetPaneLocalPos( LYTID_ISLAND_MAP, LandData[i].parent_pane );
    pos.x += ( m_landMoveX * static_cast<f32>(LAND_MOVE_COUNT-m_landMoveCount) );
    g2d->SetPanePos( LYTID_ISLAND_MAP, LandData[i].parent_pane, &pos );
  }

  m_landMoveCount++;

  return false;
}

//-----------------------------------------------------------------------------
/**
 * @func    EndChangeLand
 * @brief   島変更処理：終了
 * @date    2015.10.21
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::EndChangeLand(void)
{
  m_isZoneGetLock = false;   //!< ゾーン取得許可

  PutLandPane();

  PutIcon( true );
  MoveIcon();

  m_listener->OnAction( SubScreenMapListener::ACTION_ID_LAND_CHANGE_END );

  SetInputEnabled( true );
}

//-----------------------------------------------------------------------------
/**
 * @func    PutLandPane
 * @brief   島ペイン配置
 * @date    2015.12.08
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutLandPane(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  for( s32 i=0; i<LAND_DATA_MAX; i++ )
  {
    u32 land = LandLowTable[i];
    if( land != m_landNo )
    {
      g2d->SetPaneVisible( LYTID_ISLAND_MAP, LandData[land].parent_pane, false );
    }
    else
    {
      gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );
      g2d->SetPanePos( LYTID_ISLAND_MAP, LandData[land].parent_pane, &pos );
      g2d->SetPaneVisible( LYTID_ISLAND_MAP, LandData[land].parent_pane, true );
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    GetNextLand
 * @brief   次の島番号を取得
 * @date    2015.10.21
 *
 * @param   mv  切り替え方向
 *
 * @return  島番号
 */
//-----------------------------------------------------------------------------
s32 TownMapPartsDraw::GetNextLand( s32 mv )
{
  s32 index = GetLandIndex(m_landNo) + mv;

  if( index < 0 )
  {
    index += LAND_DATA_MAX;
  }
  else if( index >= LAND_DATA_MAX )
  {
    index -= LAND_DATA_MAX;
  }

  return LandLowTable[index];
}

//-----------------------------------------------------------------------------
/**
 * @func    GetLandIndex
 * @brief   島番号のテーブルインデックスを取得
 * @date    2015.10.22
 *
 * @param   land_no   島番号
 *
 * @return  インデックス
 */
//-----------------------------------------------------------------------------
s32 TownMapPartsDraw::GetLandIndex( u32 land_no )
{
  for( s32 i=0; i<LAND_DATA_MAX; i++ )
  {
    if( LandLowTable[i] == land_no )
    {
      return i;
    }
  }
  GFL_ASSERT( 0 );
  return 0;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetLandNo
 * @brief   島番号を取得
 * @date    2015.10.22
 *
 * @return  島番号
 */
//-----------------------------------------------------------------------------
u32 TownMapPartsDraw::GetLandNo(void)
{
  return m_landNo;
}

//-----------------------------------------------------------------------------
/**
 * @func    InitIcon
 * @brief   アイコン初期化
 * @date    2015.10.23
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitIcon(void)
{
  // 主人公初期化
  InitHeroIcon();
  PutHeroIcon( true );
  MoveHeroIcon();

  // アイコン表示
  m_listener->OnAction( SubScreenMapListener::ACTION_ID_SET_ICONDATA );
  SetPlaceIconData( m_isZoom );
  SetPlaceIconType();
  PutPlaceIcon( true );
  MovePlaceIcon();
}

//-----------------------------------------------------------------------------
/**
 * @func    PutIcon
 * @brief   アイコン表示切り替え
 * @date    2015.10.23
 *
 * @param   flg   true = 表示
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutIcon( bool flg )
{
  // 主人公
  PutHeroIcon( flg );
  // その他
  PutPlaceIcon( flg );
}

//-----------------------------------------------------------------------------
/**
 * @func    MoveIcon
 * @brief   アイコン移動
 * @date    2015.10.26
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::MoveIcon(void)
{
  // 主人公
  MoveHeroIcon();
  // その他
  MovePlaceIcon();
}

//-----------------------------------------------------------------------------
/**
 * @func    PutHeroIcon
 * @brief   主人公アイコン表示切り替え
 * @date    2015.10.23
 *
 * @param   flg   true = 表示
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutHeroIcon( bool flg )
{
  if( m_heroLandNo != m_landNo || m_isZoom != false )
  {
    flg = false;
  }

  app::util::G2DUtil * g2d = GetG2DUtil();

  g2d->SetPaneVisible( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00, flg );

  if( flg == false )
  {
    return;
  }

  gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );

  if( m_isZoom == false )
  {
    f32 x = m_heroPX;
    f32 y = m_heroPY;
    GetMapPos( &x, &y );
    pos.x = x;
    pos.y = y;
  }
  else
  {
    f32 cx, cy;
    m_pMapManager->GetCenterPos( &cx, &cy );
    f32 x = m_heroPX;
    f32 y = m_heroPY;
    m_pMapManager->CalcIconPosition( &x, &y, cx, cy );

    pos.x = x;
    pos.y = y;
  }

  g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00, &pos );
}

//-----------------------------------------------------------------------------
/**
 * @func    MoveHeroIcon
 * @brief   主人公アイコン移動
 * @date    2015.10.26
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::MoveHeroIcon(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();

  if( g2d->GetPaneVisible( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00 ) == false )
  {
    return;
  }

  gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );

  if( m_isZoom == false )
  {
    f32 x = m_heroPX;
    f32 y = m_heroPY;
    GetMapPos( &x, &y );
    pos.x = x;
    pos.y = y;
  }
  else
  {
    f32 cx, cy;
    m_pMapManager->GetCenterPos( &cx, &cy );
    f32 x = m_heroPX;
    f32 y = m_heroPY;
    m_pMapManager->CalcIconPosition( &x, &y, cx, cy );

    pos.x = x;
    pos.y = y;
  }

  g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00, &pos );
}

//-----------------------------------------------------------------------------
/**
 * @func    InitHeroIcon
 * @brief   主人公の位置を取得
 * @date    2015.10.23
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitHeroIcon(void)
{
  Field::ZoneID zone_id = m_fieldLocation->GetZoneID();
  Field::ZoneDataAccessor accessor( m_zoneDataLoader->GetZoneData(zone_id) );

  m_heroLandNo = accessor.GetIslandIndex() - 1;   // 0オリジンに変更
  m_heroPX = 0.0f;
  m_heroPY = 0.0f;
  m_isHeroRotate = false;

  if( m_heroLandNo >= LAND_DATA_MAX )
  {
    return;
  }

  f32 rz = 0.0f;
  GetHeroPosition( &accessor, &m_heroPX, &m_heroPY, &rz, &m_isHeroRotate );

  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_ISLAND_MAP );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );
  gfl2::lyt::LytParts * parts = lytwk->GetPartsPane( PANENAME_TOWNMAP_MAP_LOW_000_PANE_PLAYERICON_00 );
  gfl2::lyt::LytPane * base = lytwk->GetPane( parts, PANENAME_FIELDMENU_BTN_LOW_013_PANE_PLAYERBASE_00, &res_id );
  gfl2::lyt::LytPane * arrow = lytwk->GetPane( parts, PANENAME_FIELDMENU_BTN_LOW_013_PANE_PLAYER_ARR, &res_id );

  // 回転
  if( m_isHeroRotate != false )
  {
    gfl2::math::VEC3 rotate = base->GetRotate();
    rotate.z = rz;
    base->SetRotate( rotate );
  }
  arrow->SetVisible( m_isHeroRotate );

  // 性別ごとの表示変更
  if( m_myStatus->GetSex() == PM_MALE )
  {
    g2d->StartAnime( LYTID_ISLAND_MAP, LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__PLAYERICON_00_PLAYER_00 );
  }
  else
  {
    g2d->StartAnime( LYTID_ISLAND_MAP, LA_TOWNMAPLOW_TOWNMAP_MAP_LOW_000__PLAYERICON_00_PLAYER_01 );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    GetHeroPosition
 * @brief   主人公の位置データを取得
 * @date    2016.03.03
 *
 * @param   accessor  ゾーンデータアクセサー
 * @param   x         X座標格納場所（フィールドのＸ座標）
 * @param   y         Y座標格納場所（フィールドのＺ座標）
 * @param   r         回転格納場所
 * @param   is_arrow  true = 矢印表示 ( true = 表示 )
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::GetHeroPosition( Field::ZoneDataAccessor * accessor, f32 * x, f32 * y, f32 * r, bool * is_arrow )
{
  GameSys::GameData * gd = GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetGameData();

  const Field::Location * location  = gd->GetStartLocation();
  const Field::ZoneDataLoader * loader = gd->GetFieldZoneDataLoader();

  if( accessor->IsTownmapMode() != false )
  {
    gfl2::math::Vector3 vec = location->GetPosition();
    *x = vec.GetX();
    *y = vec.GetZ();
    *is_arrow = true;

    f32 rx, ry, rz;
    location->GetQuaternion().QuaternionToRadianYXZ( &rx, &ry, &rz );
    *r = gfl2::math::ConvRadToDeg( rz );
    if( ry == 0.0f )
    {
      *r += 180.0f;
    }
    else
    {
      *r = 360.0f - *r;
      if( *r >= 360.0f )
      {
        *r -= 360.0f;
      }
    }
  }
  else
  {
    if( accessor->IsSubscreenOutsideMapMode() != false )
    {
      *x = accessor->GetSubscreenBasisPositionX();
      *y = accessor->GetSubscreenBasisPositionZ();
    }
    else
    {
      ZoneID basis_zone = static_cast<ZoneID>( accessor->GetTownmapBasisPosZone() );
      if( basis_zone == ZONE_ID_INVALID )
      {
//        GFL_ASSERT( 0 );
        basis_zone = static_cast<ZoneID>( 0 );
      }
      Field::ZoneDataAccessor accessor2( loader->GetZoneData(basis_zone) );
      *x = accessor2.GetSubscreenBasisPositionX();
      *y = accessor2.GetSubscreenBasisPositionZ();
    }
    *r = 0.0f;
    *is_arrow = false;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    PutPlaceIcon
 * @brief   場所アイコン表示切り替え
 * @date    2015.10.23
 *
 * @param   flg   true = 表示
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutPlaceIcon( bool flg )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  for( u32 i=0; i<PLACE_ICON_MAX; i++ )
  {
    // タイプなし
    if( m_placeButton[i].type >= PLACE_TYPE_NONE || flg == false )
    {
      man->SetButtonInvisible( BTNID_PLACE_ICON+i );
    }
    else
    {
      // ワープポイント
      if( m_placeButton[i].type == PLACE_TYPE_WARP )
      {
        if( m_callMode == CALL_RIDE_FLY )
        {
//          man->SetButtonActive( BTNID_PLACE_ICON+i, false );
          man->SetButtonPassive( BTNID_PLACE_ICON+i, false );
        }
        else
        {
          man->SetButtonInvisible( BTNID_PLACE_ICON+i );
          continue;
        }
      }
      // それ以外
      else
      {
        man->SetButtonPassive( BTNID_PLACE_ICON+i, false );
      }
      man->SetButtonVisible( BTNID_PLACE_ICON+i, true );
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    SetPlaceIconType
 * @brief   場所アイコン表示タイプ切り替え
 * @date    2015.11.04
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetPlaceIconType(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  for( u32 i=0; i<PLACE_ICON_MAX; i++ )
  {
    for( u32 j=0; j<PLACE_ICON_ANIME_MAX; j++ )
    {
      if( j == m_placeButton[i].type )
      {
        g2d->StartAnime( LYTID_ISLAND_MAP, PlaceIconTable[i].anm_type[j] );
      }
      else
      {
        g2d->StopAnime( LYTID_ISLAND_MAP, PlaceIconTable[i].anm_type[j] );
      }
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    MovePlaceIcon
 * @brief   場所アイコン移動
 * @date    2015.10.26
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::MovePlaceIcon(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::math::VEC3 pos( 0.0f, 0.0f, 0.0f );

  for( u32 i=0; i<PLACE_ICON_MAX; i++ )
  {
    if( m_placeButton[i].type < PLACE_TYPE_NONE )
    {
      f32 x = m_placeButton[i].x;
      f32 y = m_placeButton[i].y;
      if( m_isZoom == false )
      {
        GetMapPos( &x, &y );
      }
      else
      {
        f32 cx, cy;
        m_pMapManager->GetCenterPos( &cx, &cy );
        m_pMapManager->CalcIconPosition( &x, &y, cx, cy );
      }
      pos.x = x;
      pos.y = y;
      g2d->SetPanePos( LYTID_ISLAND_MAP, PlaceIconTable[i].pane, &pos );
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    SetPlaceIconData
 * @brief   場所アイコンのデータを設定
 * @date    2015.10.26
 *
 * @param   is_zoom   true = 拡大
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetPlaceIconData( bool is_zoom )
{
  if( m_resIconData == NULL || m_resIconDataLen == 0 )
  {
    return;
  }

  // 場所アイコンのボタンデータを初期化
  InitPlaceIcon();

  u32 cnt = 0;

  // ワープ以外
  for( u32 i=0; i<m_resIconDataLen; i++ )
  {
    if( m_resIconData[i].land_no != m_landNo )
    {
      continue;
    }

    // ワープはイベントのあとで入れる
    if( m_resIconData[i].icon_type == PLACE_TYPE_WARP )
    {
      continue;
    }

    // イベントフラグをチェック
    if( ( m_resIconData[i].arrival_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].arrival_flag) == false ) ||     // 到着フラグ
        ( m_resIconData[i].warp_use_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].warp_use_flag) == false ) ||   // ワープ使用フラグ
        ( m_resIconData[i].icon_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].icon_flag) != false ) )            // アイコン表示制御フラグ
    {
      continue;
    }

    // 縮小時はポケセンのみ、拡大時はイベント以外全部
    if( ( is_zoom == false && m_resIconData[i].icon_type == PLACE_TYPE_PC ) ||
        ( is_zoom != false && m_resIconData[i].icon_type >= PLACE_TYPE_PC && m_resIconData[i].icon_type < PLACE_TYPE_EVENT ) )
    {
      if( cnt >= PLACE_ICON_MAX )
      {
        GFL_ASSERT( 0 );
        return;
      }
      m_placeButton[cnt].type = static_cast<PlaceType>(m_resIconData[i].icon_type);
      m_placeButton[cnt].param = i;
      m_placeButton[cnt].x = static_cast<f32>( m_resIconData[i].x );
      m_placeButton[cnt].y = static_cast<f32>( m_resIconData[i].y );
      cnt++;
    }
  }

  { // イベントアイコン
    s32 id = m_pEventListDataManager->GetTargetIndexForMain();
    if( id != -1 )
    {
      const Field::EventList::EventListData * list = m_pEventListDataManager->GetMainList( id );
      const Field::EventList::EventListData::DetailField * data = list->GetDetailFieldCurrent();
      if( (data->iland_id-1) == m_landNo )
      {
        m_mainEventID    = id;
        m_mainEventIndex = list->GetCurrentIndex();

        if( cnt >= PLACE_ICON_MAX )
        {
          GFL_ASSERT( 0 );
          return;
        }
        m_placeButton[cnt].type  = PLACE_TYPE_EVENT;
        m_placeButton[cnt].param = 0;
        m_placeButton[cnt].x = data->pos_x;
        m_placeButton[cnt].y = data->pos_z;
        cnt++;
      }
    }
  }

  // ワープ
  for( u32 i=0; i<m_resIconDataLen; i++ )
  {
    if( m_resIconData[i].land_no != m_landNo )
    {
      continue;
    }

    // ワープのみ
    if( m_resIconData[i].icon_type != PLACE_TYPE_WARP )
    {
      continue;
    }

    // イベントフラグをチェック
    if( ( m_resIconData[i].arrival_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].arrival_flag) == false ) ||     // 到着フラグ
        ( m_resIconData[i].warp_use_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].warp_use_flag) == false ) ||   // ワープ使用フラグ
        ( m_resIconData[i].icon_flag != -1 && m_eventWork->CheckEventFlag(m_resIconData[i].icon_flag) != false ) )            // アイコン表示制御フラグ
    {
      continue;
    }

    if( cnt >= PLACE_ICON_MAX )
    {
      GFL_ASSERT( 0 );
      return;
    }
    m_placeButton[cnt].type = static_cast<PlaceType>(m_resIconData[i].icon_type);
    m_placeButton[cnt].param = i;
    m_placeButton[cnt].x = static_cast<f32>( m_resIconData[i].x );
    m_placeButton[cnt].y = static_cast<f32>( m_resIconData[i].y );
    cnt++;
  }

  m_isCursorAutoMoveEnable = false;   // @fix NMCat[2845]: アイコンアニメ反映のため、変更直後はカーソル吸着をさせないようにする
}

//-----------------------------------------------------------------------------
/**
 * @func    SetExIconData
 * @brief   アイコンデータを設定
 * @date    2015.10.29
 *
 * @param   data      アイコンデータ
 * @param   data_max  データ数
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetExIconData( const EX_ICON_DATA * data, u32 data_max )
{
  if( data_max > PLACE_ICON_MAX )
  {
    GFL_ASSERT( 0 );
    return;
  }

  // 場所アイコンのボタンデータを初期化
  InitPlaceIcon();

  for( u32 i=0; i<data_max; i++ )
  {
    m_placeButton[i].type  = data[i].type;
    m_placeButton[i].param = data[i].param;
    m_placeButton[i].x     = data[i].x;
    m_placeButton[i].y     = data[i].y;
  }
//  PutPlaceIcon( true );
//  MovePlaceIcon();
}

//-----------------------------------------------------------------------------
/**
 * @func    InitPlaceIcon
 * @brief   場所アイコン初期化
 * @date    2015.10.29
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitPlaceIcon(void)
{
  for( u32 i=0; i<PLACE_ICON_MAX; i++ )
  {
    m_placeButton[i].type = PLACE_TYPE_MAX;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    GetSelectWarpID
 * @brief   選択したアイコンのワープIDを取得
 * @date    2015.10.26
 *
 * @return  ワープID
 */
//-----------------------------------------------------------------------------
s32 TownMapPartsDraw::GetSelectWarpID(void)
{
  return m_resIconData[ m_placeButton[m_selectButtonID-BTNID_PLACE_ICON].param ].warp_id;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorPosIconButtonID
 * @brief   カーソル位置のボタンIDを取得
 * @date    2015.10.26
 *
 * @param   is_active   ture = アクティブなボタンのみ取得
 *
 * @return  ボタンID
 */
//-----------------------------------------------------------------------------
u32 TownMapPartsDraw::GetCursorPosIconButtonID( bool is_active )
{
  f32 x, y;
  GetCursorPos( &x, &y );

  u16 px = static_cast<u16>( x + DISP_WIDTH_HALF );
  u16 py = static_cast<u16>( DISP_HEIGHT_HALF - y );

  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  for( u32 i=BTNID_PLACE_ICON; i<(BTNID_PLACE_ICON+PLACE_ICON_MAX); i++ )
  {
    if( ( is_active != false && man->IsButtonActive(i) == false ) || man->IsButtonVisible(i) == false )
    {
      continue;
    }
    if( man->IsButtonHit(i,px,py) != false )
    {
      return i;
    }
  }

  return BTNID_MAX;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorPosIconParam
 * @brief   カーソル位置のアイコンのパラメータを取得
 * @date    2015.10.30
 *
 * @param   type        アイコンタイプ
 * @param   is_active   ture = アクティブなボタンのみ取得
 *
 * @retval  アイコンあり = アイコンに設定したパラメータ
 * @retval  アイコンなし = TM_DUMMY_DATA
 *
 * @note:
 *    ・type = PLACE_TYPE_MAX : 全アイコンタイプを参照する
 *    ・PLACE_TYPE_NONEのアイコンは取得されない
 *    ・ボタンとして機能しない場合、is_activeはfalseを指定すること！
 */
//-----------------------------------------------------------------------------
s32 TownMapPartsDraw::GetCursorPosIconParam( PlaceType type, bool is_active )
{
  f32 x, y;
  GetCursorPos( &x, &y );

  u16 px = static_cast<u16>( x + DISP_WIDTH_HALF );
  u16 py = static_cast<u16>( DISP_HEIGHT_HALF - y );

  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();

  for( u32 i=BTNID_PLACE_ICON; i<(BTNID_PLACE_ICON+PLACE_ICON_MAX); i++ )
  {
    if( ( is_active != false && man->IsButtonActive(i) == false ) || man->IsButtonVisible(i) == false )
    {
      continue;
    }
    if( man->IsButtonHit(i,px,py) != false )
    {
      u32 icon_idx = i - BTNID_PLACE_ICON;
      if( type == PLACE_TYPE_MAX || type == m_placeButton[icon_idx].type )
      {
        return m_placeButton[icon_idx].param;
      }
    }
  }

  return TM_DUMMY_DATA;
}

//-----------------------------------------------------------------------------
/**
 * @func    PutWarpPointWindow
 * @brief   "どこにとびますか？"のウィンドウ表示
 * @date    2015.10.29
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutWarpPointWindow(void)
{
  GetG2DUtil()->SetPaneVisible( LYTID_BUTTON, PANENAME_TOWNMAP_MIN_LOW_000_PANE_MESSAGE_00, true );
}

//-----------------------------------------------------------------------------
/**
 * @func    SetWarpPointMessage
 * @brief   "○○にとびますか？"のメッセージ表示
 * @date    2015.10.29
 *
 * @param   str   表示する文字
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::SetWarpPointMessage( gfl2::str::StrBuf * str )
{
  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_BUTTON );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );

  gfl2::lyt::LytTextBox * pane = lytwk->GetTextBoxPane(
                                  lytwk->GetPartsPane(PANENAME_TOWNMAP_MIN_LOW_000_PANE_MESSAGE_00),
                                  PANENAME_TOWNMAP_MSG_LOW_000_PANE_TEXTBOX_00,
                                  &res_id );

  g2d->SetTextBoxPaneString( pane, str );
  pane->SetVisible( true );
}

//-----------------------------------------------------------------------------
/**
 * @func    GetWarpPointPlaceNameID
 * @brief   カーソル位置のワープIDの施設名を取得
 * @date    2015.10.29
 *
 * @param   id              文字列ID取得場所
 * @param   is_place_name   場所名かどうかを取得する場所
 *
 * @retval  true  = 成功
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::GetWarpPointPlaceNameID( s32 * id, u32 * is_place_name )
{
  u32 button = GetCursorPosIconButtonID( true );
  if( button == BTNID_MAX )
  {
    return false;
  }

  s32 prm_id = m_placeButton[button-BTNID_PLACE_ICON].param;
  if( m_resIconData[prm_id].icon_type != PLACE_TYPE_WARP )
  {
    return false;
  }

  *id = static_cast<s32>(m_resIconData[prm_id].facility_name);
  *is_place_name = m_resIconData[prm_id].is_place_name;
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorPosZoneID
 * @brief   カーソル位置のゾーンIDを取得
 * @date    2015.10.29
 *
 * @return  ゾーンID
 *
 * @note    場所不明の場合はZONE_ID_MAXを返す
 */
//-----------------------------------------------------------------------------
ZoneID TownMapPartsDraw::GetCursorPosZoneID(void)
{
  if( m_isZoneGetLock != false )
  {
    return m_cursorZoneID;
  }

  ZoneID result = ZONE_ID_MAX;

#if 0
  const ZONE_DATA * data = LandData[m_landNo].zone_data;

  f32 x, y;
  GetCursorPos( &x, &y );

  u16 px = static_cast<u16>( x + DISP_WIDTH_HALF );
  u16 py = static_cast<u16>( DISP_HEIGHT_HALF - y );

  app::util::G2DUtil * g2d = GetG2DUtil();

  for( u32 i=0; i<LAND_ZONE_DATA_MAX; i ++ )
  {
    if( g2d->GetHitPane( LYTID_ISLAND_MAP, data[i].area_pane, px, py ) != false )
    {
      result = data[i].zone_id;
      break;
    }
  }
#else

  if( IsInitializeWorld() != false )
  {
    f32 x, y;
    GetCursorPos( &x, &y );

    if( m_isZoom == false )
    {
      GetFieldPos( &x, &y );
    }
    else
    {
      f32 map_x, map_y;
      m_pMapManager->GetCenterPos( &map_x, &map_y );

      x = map_x + TOWNMAP_DOT_CALC_X(x);
      y = map_y - TOWNMAP_DOT_CALC_Y(y);
    }

    gfl2::math::Vector3 pos( x, 0.0f, y );
    const Field::World::ZoneInfo * info = m_pWorld->IsHitZoneInfo( pos, false );
    if( info != NULL )
    {
      result = static_cast<ZoneID>( info->m_ZoneID );
    }

#if PM_DEBUG
    {
      m_Debug.SetWorldPos(static_cast<s32>(x), static_cast<s32>(y));
    }
#endif
  }

#endif

  m_cursorZoneID = result;


  return result;
}

//-----------------------------------------------------------------------------
/**
 * @func    CreateWorld
 * @brief   ワールドデータ生成
 * @date    2015.10.30
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::CreateWorld(void)
{
  m_pWorld = GFL_NEW(m_heap->GetDeviceHeap()) Field::World( m_heap->GetDeviceHeap() );
}

//-----------------------------------------------------------------------------
/**
 * @func    DeleteWorld
 * @brief   ワールドデータ削除
 * @date    2015.10.30
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::DeleteWorld(void)
{
  if( m_pWorld != NULL )
  {
    if( m_isWorldCreate != false )
    {
      if( IsInitializeWorld() == false )
      {
        return false;
      }
    }
    GFL_SAFE_DELETE( m_pWorld );
  }
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    InitializeWorld
 * @brief   ワールドデータ設定
 * @date    2015.10.30
 *
 * @param   land  島番号
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitializeWorld( u32 land )
{
  static const Field::WorldID tbl[] =
  {
    W_F0102,      // メレメレランド
    W_F0201,      // アーカラアイランド
    W_F0301,      // ウラウラアイランド
    W_F0401,      // ポニアイランド
    W_F0501I0101, // エーテルパラダイス 1F：外観
  };
  m_pWorld->Initialize( tbl[land], GFL_SINGLETON_INSTANCE(GameSys::GameManager)->GetAsyncFileManager() );
  m_isWorldCreate = true;
}

//-----------------------------------------------------------------------------
/**
 * @func    IsInitializeWorld
 * @brief   ワールドデータの設定が完了したか
 * @date    2015.10.30
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::IsInitializeWorld(void)
{
  if( m_isWorldCreate != false )
  {
    if( m_pWorld->InitializeWait() == false )
    {
      return false;
    }
    m_isWorldCreate = false;
  }
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    ResetWorld
 * @brief   ワールドデータ再設定
 * @date    2015.10.30
 *
 * @param   land  島番号
 *
 * @retval  true  = 完了
 * @retval  false = それ以外
 */
//-----------------------------------------------------------------------------
bool TownMapPartsDraw::ResetWorld( u32 land )
{
  if( IsInitializeWorld() == false )
  {
    return false;
  }
  m_pWorld->Terminate();
  InitializeWorld( land );
  return true;
}

//-----------------------------------------------------------------------------
/**
 * @func    UpdateWorld
 * @brief   ワールドデータ自動更新
 * @date    2015.10.30
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::UpdateWorld(void)
{
  if( m_chgWorldLandNo == LAND_DATA_MAX )
  {
    return;
  }
  if( ResetWorld( m_chgWorldLandNo ) != false )
  {
    m_chgWorldLandNo = LAND_DATA_MAX;
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    UpdateWorld
 * @brief   ワールドデータ切り替え
 * @date    2015.10.30
 *
 * @param   land  島番号
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ChangeWorld( u32 land )
{
  m_chgWorldLandNo = land;
}

//-----------------------------------------------------------------------------
/**
 * @func    InitZoneMask
 * @brief   到着フラグをチェックしてマスク表示
 * @date    2015.11.02
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::InitZoneMask(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();

  for( u32 i=0; i<LAND_DATA_MAX; i++ )
  {
    for( u32 j=0; j<LAND_ZONE_DATA_MAX; j++ )
    {
      if( LandData[i].zone_data[j].zone_id == ZONE_ID_MAX )
      {
        continue;
      }
      for( u32 k=0; k<m_resZoneDataLen; k++ )
      {
        if( m_resZoneData[k].zone_id == LandData[i].zone_data[j].zone_id )
        {
          if( m_resZoneData[k].arrival_flag != -1 && m_eventWork->CheckEventFlag(m_resZoneData[k].arrival_flag) == false )
          {
            g2d->SetPaneVisible( LYTID_ISLAND_MAP, LandData[i].zone_data[j].mask_pane, true );
          }
          break;
        }
      }
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    PutCursorPosArea
 * @brief   カーソル位置のエリア枠表示
 * @date    2015.11.02
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutCursorPosArea(void)
{
  app::util::G2DUtil * g2d = GetG2DUtil();

  const ZONE_DATA * data = LandData[m_landNo].zone_data;

  for( u32 i=0; i<LAND_ZONE_DATA_MAX; i++ )
  {
    g2d->SetPaneVisible( LYTID_ISLAND_MAP, data[i].area_pane, false );
  }
    
  if( m_isZoneGetLock != false )
  {
    return;
  }
  if( m_isZoom != false )
  {
    return;
  }

  ZoneID zone_id = GetCursorPosZoneID();

  if( zone_id != ZONE_ID_MAX )
  {
    for( u32 i=0; i<LAND_ZONE_DATA_MAX; i++ )
    {
      if( data[i].zone_id == zone_id )
      {
        g2d->SetPaneVisible( LYTID_ISLAND_MAP, data[i].area_pane, true );
        break;
      }
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    ResetIcon
 * @brief   アイコンを再設定
 * @date    2015.11.16
 *
 * @note  図鑑分布用に追加
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ResetIcon(void)
{
  PutPlaceIcon( false );
  SetPlaceIconType();
//  PutIcon( true );
//  MoveIcon();
}

// @fix NMCat[2109] 島を切り替えた直後、エンカウントマークが一瞬異なる位置に表示される  →一瞬違うアイコンが表示されるので、ResetIconをResetIcon(アニメを1フレーム進める)とResetIconPosition(表示する)に分けてもらった。
//-----------------------------------------------------------------------------
/**
 * @func    ResetIconPosition
 * @brief   アイコンを再設定
 * @date    2016.05.17
 *
 * @note  図鑑分布用に追加
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::ResetIconPosition(void)
{
  PutIcon( true );
  MoveIcon();
}

//-----------------------------------------------------------------------------
/**
 * @func    PutLandName
 * @brief   島名表示
 * @date    2015.12.08
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::PutLandName(void)
{
  if( m_pMsgData == NULL )
  {
    return;
  }

  static const u32 tbl[] =
  {
    TOWNMAP_00_01,  // メレメレアイランド
    TOWNMAP_00_02,  // アーカラアイランド
    TOWNMAP_00_03,  // ウラウラアイランド
    TOWNMAP_00_04,  // ポニアイランド
    TOWNMAP_00_05,  // エーテルパラダイス
  };

  app::util::G2DUtil * g2d = GetG2DUtil();
  gfl2::lyt::LytWk * lytwk = g2d->GetLayoutWork( LYTID_BUTTON );
  gfl2::lyt::LytMultiResID res_id = g2d->GetLayoutResourceID( 0 );

  gfl2::lyt::LytTextBox * pane = lytwk->GetTextBoxPane(
                                  lytwk->GetPartsPane(PANENAME_TOWNMAP_MIN_LOW_000_PANE_LAND_NAME),
                                  PANENAME_TOWNMAP_PLT_UPP_004_PANE_TEXTBOX_00,
                                  &res_id );

  g2d->SetTextBoxPaneString( pane, tbl[m_landNo] );
}

//-----------------------------------------------------------------------------
/**
 * @func    VanishLandNameWindow
 * @brief   島名のウィンドウを非表示にする
 * @date    2015.12.08
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::VanishLandNameWindow(void)
{
  if( m_pMsgData == NULL )
  {
    GetG2DUtil()->SetPaneVisible( LYTID_BUTTON, PANENAME_TOWNMAP_MIN_LOW_000_PANE_LAND_NAME, false );
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    UpdateAutoMoveCursor
 * @brief   カーソル吸着
 * @date    2015.12.08
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::UpdateAutoMoveCursor(void)
{
  // そらをとぶモード時のみ
  if( m_callMode != CALL_RIDE_FLY )
  {
    return;
  }

  // @fix NMCat[2845]: アイコンアニメ反映のため、変更直後はカーソル吸着をさせないようにする
  if( m_isCursorAutoMoveEnable == false )
  {
    // @fix NMCat[3169]: 拡縮中はカーソル吸着をさせないようにする
    if( m_updateMain != UPDATE_SEQ_ZOOM )
    {
      m_isCursorAutoMoveEnable = true;
    }
    return;
  }

  app::util::G2DUtil * g2d = GetG2DUtil();
  app::tool::ButtonManager * btn_man = app::ui::UIResponder::GetButtonManager();

  f32 cur_x, cur_y;
  GetCursorPos( &cur_x, &cur_y );

  u16 disp_x = static_cast<u16>( cur_x + DISP_WIDTH_HALF );
  u16 disp_y = static_cast<u16>( DISP_HEIGHT_HALF - cur_y );

  s32 mv_idx = -1;  // 吸着するボタンのインデックス

  // カーソル吸着処理
  if( !m_devKey->IsHold(gfl2::ui::DIR_UP|gfl2::ui::DIR_DOWN|gfl2::ui::DIR_LEFT|gfl2::ui::DIR_RIGHT) &&    // キー入力
//      !m_devButton->IsHold(gfl2::ui::BUTTON_A|gfl2::ui::BUTTON_B|gfl2::ui::BUTTON_X|gfl2::ui::BUTTON_Y|gfl2::ui::BUTTON_L|gfl2::ui::BUTTON_R) &&  // デバイスのボタン入力
      !m_devTouchPanel->IsTouch() &&  // タッチ
      btn_man->GetUpdateState() == app::tool::ButtonManager::UPDATE_STATE_IDLE )  // アプリのボタン
  {
    f32 mx = 0.0f;
    f32 my = 0.0f;

    // 吸着するボタンを検索
    for( u32 i=0; i<PLACE_ICON_MAX; i++ )
    {
      // ワープポイント
      if( m_placeButton[i].type == PLACE_TYPE_WARP )
      {
        if( g2d->GetHitPane( LYTID_ISLAND_MAP, PlaceIconTable[i].pane, disp_x, disp_y ) != false )
        {
          gfl2::math::VEC3 pos = g2d->GetPanePos( LYTID_ISLAND_MAP, PlaceIconTable[i].pane );
          if( mv_idx == -1 )
          {
            mv_idx = i;
            mx = pos.x - cur_x;
            my = pos.y - cur_y;
          }
          else
          {
            f32 tmp_mx = pos.x - cur_x;
            f32 tmp_my = pos.y - cur_y;
            if( (gfl2::math::FAbs(tmp_mx)+gfl2::math::FAbs(tmp_my)) < (gfl2::math::FAbs(mx)+gfl2::math::FAbs(my)) )
            {
              mv_idx = i;
              mx = tmp_mx;
              my = tmp_my;
            }
          }
        }
      }
    }

    if( mv_idx != -1 )
    {
      f32 speed = GetCursorSpeed();
      if( gfl2::math::FAbs(speed) < gfl2::math::FAbs(mx) )
      {
        if( mx < 0 )
        {
          cur_x -= speed;
        }
        else
        {
          cur_x += speed;
        }
      }
      else
      {
        cur_x += mx;
      }
      if( gfl2::math::FAbs(speed) < gfl2::math::FAbs(my) )
      {
        if( my < 0 )
        {
          cur_y -= speed;
        }
        else
        {
          cur_y += speed;
        }
      }
      else
      {
        cur_y += my;
      }
      gfl2::math::VEC3 pos( cur_x, cur_y, 0.0f );
      g2d->SetPanePos( LYTID_ISLAND_MAP, PANENAME_TOWNMAP_MAP_LOW_000_PANE_CURSOR_00, &pos );

      disp_x = static_cast<u16>( cur_x + DISP_WIDTH_HALF );
      disp_y = static_cast<u16>( DISP_HEIGHT_HALF - cur_y );
    }
  }


  // アイコンの状態を変更
  if( btn_man->GetUpdateState() == app::tool::ButtonManager::UPDATE_STATE_IDLE )
  {
    for( s32 i=0; i<PLACE_ICON_MAX; i++ )
    {
      // ワープポイント
      if( m_placeButton[i].type == PLACE_TYPE_WARP )
      {
        // 最も近いポイントがカーソル内なら
        if( btn_man->IsButtonHit(BTNID_PLACE_ICON+i,disp_x,disp_y) != false && i == mv_idx )
        {
          if( btn_man->IsButtonActive(BTNID_PLACE_ICON+i) == false )
          {
            btn_man->SetButtonActive( BTNID_PLACE_ICON+i, false );
            g2d->StartAnime( LYTID_ISLAND_MAP, PlaceIconTable[i].anm_type[PLACE_ICON_ANIME_MAX-1] );
          }
          continue;
        }

        if( btn_man->IsButtonActive(BTNID_PLACE_ICON+i) != false )
        {
          btn_man->SetButtonPassive( BTNID_PLACE_ICON+i, false );
          g2d->StartAnime( LYTID_ISLAND_MAP, PlaceIconTable[i].anm_type[PLACE_TYPE_WARP] );
        }
      }
    }
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    GetCursorSpeed
 * @brief   カーソル速度取得
 * @date    2015.12.09
 *
 * @return  カーソル速度
 */
//-----------------------------------------------------------------------------
f32 TownMapPartsDraw::GetCursorSpeed(void)
{
  if( m_isZoom != false )
  {
    return static_cast<f32>( CURSOR_MOVE_SPEED * 2 );
  }
  return static_cast<f32>( CURSOR_MOVE_SPEED );
}


//-----------------------------------------------------------------------------
/**
 * @func    OnTouchEvent
 * @brief   タッチパネルイベントの検知
 * @date    2015.10.19
 *
 * @param   touch_panel タッチパネル
 * @param   is_touch    true = タッチされている
 *
 * @retval  MYSUBVIEW_ONLY_ACCESS = 他のUIViewの入力を禁止
 * @retval  DISABLE_ACCESS        = 以降の同フレームでの入力イベントを排除
 * @retval  ENABLE_ACCESS         = それ以外
 *
 * @note  override UIInputListener
 */
//-----------------------------------------------------------------------------
app::ui::UIInputListener::ListenerResult TownMapPartsDraw::OnTouchEvent( gfl2::ui::TouchPanel * touch_panel, bool is_touch )
{
  app::tool::ButtonManager * man = app::ui::UIResponder::GetButtonManager();
  if( man->GetUpdateState() != app::tool::ButtonManager::UPDATE_STATE_IDLE )
  {
    return ENABLE_ACCESS;
  }

  if( is_touch != false )
  {
    u16 tpx, tpy;
    touch_panel->GetXY( &tpx, &tpy );

    f32 x = static_cast<f32>(tpx) - static_cast<f32>(DISP_WIDTH_HALF);
    f32 y = static_cast<f32>(DISP_HEIGHT_HALF) - static_cast<f32>(tpy);
    PutCursor( x, y );

    if( m_isZoom != false )
    {
      if( m_isTouch != false )
      {
        x = static_cast<f32>(m_touchX) - static_cast<f32>(tpx);
        y = static_cast<f32>(m_touchY) - static_cast<f32>(tpy);

        m_pMapManager->MovePosition( TOWNMAP_DOT_CALC_X(x), TOWNMAP_DOT_CALC_Y(y) );
        PutIcon( true );
        MoveIcon();
      }
      m_isTouch = true;
      m_touchX = tpx;
      m_touchY = tpy;
    }

    return DISABLE_ACCESS;
  }
  else
  {
    m_isTouch = false;
  }

  return ENABLE_ACCESS;
}

//-----------------------------------------------------------------------------
/**
 * @func    OnLayoutPaneStartingAnimeEvent
 * @brief   ペイン選択アニメーションの開始を検知
 * @date    2015.10.14
 *
 * @param   button_id   通知されたボタンID
 *
 * @note  override UIInputListener
 */
//-----------------------------------------------------------------------------
void TownMapPartsDraw::OnLayoutPaneStartingAnimeEvent( const u32 button_id )
{
  if( button_id == BTNID_ZOOM )
  {
    InitChangeMapMode();
  }
}

//-----------------------------------------------------------------------------
/**
 * @func    OnLayoutPaneEvent
 * @brief   ペインイベントの検知
 * @date    2015.10.14
 *
 * @param   button_id   通知されたボタンID
 *
 * @retval  MYSUBVIEW_ONLY_ACCESS = 他のUIViewの入力を禁止
 * @retval  DISABLE_ACCESS        = 以降の同フレームでの入力イベントを排除
 * @retval  ENABLE_ACCESS         = それ以外
 *
 * @note  override UIInputListener
 */
//-----------------------------------------------------------------------------
app::ui::UIInputListener::ListenerResult TownMapPartsDraw::OnLayoutPaneEvent( const u32 button_id )
{
  if( button_id == BTNID_RETURN )
  {
    m_listener->OnAction( SubScreenMapListener::ACTION_ID_RETURN );
    return DISABLE_ACCESS;
  }

  if( button_id == BTNID_ZOOM )
  {
    m_listener->OnAction( SubScreenMapListener::ACTION_ID_ZOOM );
    StartChangeMapMode();
    return DISABLE_ACCESS;
  }

  if( button_id == BTNID_ARROW_L )
  {
    ChangeLandNo( GetNextLand(-1), LAND_CHANGE_LEFT );
    return DISABLE_ACCESS;
  }

  if( button_id == BTNID_ARROW_R )
  {
    ChangeLandNo( GetNextLand(1), LAND_CHANGE_RIGHT );
    return DISABLE_ACCESS;
  }

  if( button_id >= BTNID_PLACE_ICON )
  {
    m_selectButtonID = button_id;
    m_listener->OnAction( SubScreenMapListener::ACTION_ID_SELECT );
    return DISABLE_ACCESS;
  }

  return DISABLE_ACCESS;
}

//-----------------------------------------------------------------------------
/**
 * @func    OnKeyAction
 * @brief   キー入力の検知
 * @date    2015.10.13
 *
 * @param   button  ボタン
 * @param   key     十字キー
 * @param   stick   アナログスティック
 *
 * @retval  MYSUBVIEW_ONLY_ACCESS = 他のUIViewの入力を禁止
 * @retval  DISABLE_ACCESS        = 以降の同フレームでの入力イベントを排除
 * @retval  ENABLE_ACCESS         = それ以外
 *
 * @note  override UIInputListener
 */
//-----------------------------------------------------------------------------
app::ui::UIInputListener::ListenerResult TownMapPartsDraw::OnKeyAction( gfl2::ui::Button * button, gfl2::ui::VectorDevice * key, gfl2::ui::VectorDevice * stick )
{
  if( m_callMode != CALL_ZUKAN )
  {
    if( button->IsTrigger(gfl2::ui::BUTTON_A) )
    {
      u32 id = GetCursorPosIconButtonID( true );
      if( id == BTNID_MAX )
      {
        return ENABLE_ACCESS;
      }
      app::ui::UIResponder::GetButtonManager()->StartSelectedAct( id );
      return DISABLE_ACCESS;
    }
  }

  if( m_updateMain == UPDATE_SEQ_WAIT )
  {
    if( button->IsHold(gfl2::ui::BUTTON_L) )
    {
      app::ui::UIResponder::GetButtonManager()->StartSelectedAct( BTNID_ARROW_L );
      return DISABLE_ACCESS;
    }
    if( button->IsHold(gfl2::ui::BUTTON_R) )
    {
      app::ui::UIResponder::GetButtonManager()->StartSelectedAct( BTNID_ARROW_R );
      return DISABLE_ACCESS;
    }
  }

  {
    s32 x = 0;
    s32 y = 0;

    if( key->IsHold(gfl2::ui::DIR_UP) )
    {
      y = 1;
    }
    else if( key->IsHold(gfl2::ui::DIR_DOWN) )
    {
      y = -1;
    }

    if( key->IsHold(gfl2::ui::DIR_LEFT) )
    {
      x = -1;
    }
    else if( key->IsHold(gfl2::ui::DIR_RIGHT) )
    {
      x = 1;
    }
    if( x != 0 || y != 0 )
    {
      bool boost = false;
      if( button->IsHold(gfl2::ui::BUTTON_X) )
      {
        // @fix NMCat[2543]: 図鑑の全体マップ時はブースト無効
        if( !( m_callMode == CALL_ZUKAN && m_isZoom == false ) )
        {
          boost = true;
        }
      }
      MoveCursor( x, y, boost );
    }
  }

  return ENABLE_ACCESS;
}


//------------------------------------------------------------------
/**
  *  @brief    
  */
//------------------------------------------------------------------
#if PM_DEBUG
TownMapPartsDraw::Debug::Debug(void)
  : m_pOwner(NULL)
  , m_pGroup(NULL)
  , m_WX(0)
  , m_WY(0)
{
  gfl2::heap::HeapBase* pHeapBase = gfl2::heap::Manager::GetHeapByHeapId( HEAPID_DEBUG );

  m_pGroup = gfl2::debug::DebugWin_AddGroup(pHeapBase, L"TownMapPartsDraw", NULL);

  gfl2::debug::DebugWin_AddItemValueInt(m_pGroup, pHeapBase, L"wx", &m_WX, -65535, 65535); \
  gfl2::debug::DebugWin_AddItemValueInt(m_pGroup, pHeapBase, L"wy", &m_WY, -65535, 65535); \
}
#endif


//------------------------------------------------------------------
/**
  *  @brief    
  */
//------------------------------------------------------------------
#if PM_DEBUG
TownMapPartsDraw::Debug::~Debug()
{
  gfl2::debug::DebugWin_RemoveGroup(m_pGroup);
  m_pGroup = NULL;
}
#endif


GFL_NAMESPACE_END(TownMap)
GFL_NAMESPACE_END(App)
