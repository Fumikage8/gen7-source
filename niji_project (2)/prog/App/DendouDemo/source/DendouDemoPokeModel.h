//============================================================================================
/**
 * @file		dendou_demo_PokeModel.h
 * @brief		殿堂入りデモ ポケモンモデル
 * @author  nagihashi_toru(移植), Hiroyuki Nakamura
 * @date		16.02.29
 */
//============================================================================================
#if !defined( __DEUDOU_DEMO_POKEMODEL_H__ )
#define __DEUDOU_DEMO_POKEMODEL_H__

#include <AppLib/include/Tool/AppToolPokeSimpleModel.h>
#include <model/include/gfl2_BaseCamera.h>

namespace app { namespace util { class Heap; } }

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/**
 * @namespace	app::dendou_demo
 * @brief			殿堂入りデモ
 */
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
namespace app {
namespace dendou_demo {

//--------------------------------------------------------------------------------------------
/**
 * @brief	ポケモンモデル
 */
//--------------------------------------------------------------------------------------------
class PokeModel {
	GFL_FORBID_COPY_AND_ASSIGN( PokeModel );

public:
	static const u32 MODEL_MAX = pml::PokeParty::MAX_MEMBERS;	//!< 登録可能モデル数

  struct Description
  {
    app::util::Heap * heap;
    gfl2::fs::AsyncFileManager * asyncFileManager;
    app::util::AppRenderingManager * renderingManager;
    void * spotModelFileBuffer[MODEL_MAX];
  };

private:
	//! シーケンス
	enum {
		SEQ_WAIT = 0,		//!< 待機
		SEQ_CREATE,			//!< 作成
		SEQ_SETTING,		//!< 設定
		SEQ_DELETE,			//!< 削除
	};

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief	モデルデータ
	 */
	//--------------------------------------------------------------------------------------------
	typedef struct _MODEL_DATA {
    PokeTool::SimpleParam simpleParam; //!<シンプルパラム
    app::tool::PokeSimpleModel * model;   //!< モデル
		bool	visibleFlag;											//!< 表示フラグ
		bool	createFlag;												//!< 生成フラグ
    bool  isWaitB;                          //!< たいきBアニメを再生しているか
		u32	  seq;															//!< シーケンス
		gfl2::math::Vector3 pos;									//!< 表示座標
		gfl2::math::Vector3 rotate;								//!< 回転座標
		f32	posRotate;												//!< 位置ごとの回転角度
		u32	id;																//!< データID ( モデル登録インデックス )
    void * spotModelFileBuffer;           //!<スポットモデルバッファ(参照なので消さないこと）
    poke_3d::model::BaseModel*  spotModel;           //!< BGモデル
    gfl2::renderingengine::scenegraph::resource::ResourceNode *spotMdlNode; //!< ノード
	}MODEL_DATA;


public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 *
	 * @param	  description
	 */
	//------------------------------------------------------------------------------------------
	PokeModel( const Description & description );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//------------------------------------------------------------------------------------------
	virtual ~PokeModel();

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void Update(void);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデルシステムのアップデート
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void UpdateSystem(void);
  
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル作成リクエスト
	 *
	 * @param	  id		データID
	 * @param		sp		ポケモンデータ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
  void Create( u32 id, const PokeTool::SimpleParam & sp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		表示切り替え
	 *
	 * @param		id		データID
	 * @param		flg		true = 表示, false = 非表示
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetVisible( u32 id, bool flg );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		表示取得
	 *
	 * @param		id		データID
	 *
	 * @retval	"true = 表示中"
	 * @retval	"false = それ以外"
	 */
	//------------------------------------------------------------------------------------------
	bool GetVisible( u32 id ) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデルの作成が完了したか
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = それ以外"
	 */
	//------------------------------------------------------------------------------------------
	bool CheckCreate( u32 id ) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル座標初期化
	 *
	 * @param		max		モデル登録数
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void InitPosition( u32 max );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル座標設定
	 *
	 * @param		id		データID
	 * @param		pos		配置位置	
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetPosition( u32 id, u32 pos );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		基準データ作成
	 *
	 * @param		min_index		最小サイズのモデルインデックス
	 * @param		min_index		最大サイズのモデルインデックス
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void InitBaseData( u32 min_index, u32 max_index );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル座標取得
	 *
	 * @param		id	モデルID
	 *
	 * @return	座標
	 */
	//------------------------------------------------------------------------------------------
	gfl2::math::Vector3 GetPosition( u32 id );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		システム初期化待ち
	 */
	//------------------------------------------------------------------------------------------
  bool Initialize();
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		システム破棄待ち
	 */
	//------------------------------------------------------------------------------------------
  bool Finalize();
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		待機モーションBをする
	 */
	//------------------------------------------------------------------------------------------
  void StartMotionB(u32 id);
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルセットアップ
  */
  //--------------------------------------------------------------------------------------------
  void SetupSpot( u32 id, u32 pos );
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルの切り替え
  */
  //--------------------------------------------------------------------------------------------
  void ChangeSpot( void );
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルの切り替え予約
  */
  //--------------------------------------------------------------------------------------------
  void ReserveChangeSpot( u32 pos, u32 previd, u32 nextid );
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		カメラセット
  */
  //--------------------------------------------------------------------------------------------
  void SetCamera( poke_3d::model::BaseCamera* camera );
private:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル別アップデート
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void UpdateCore( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル作成
	 *
	 * @param	  dat		モデルデータ
	 *
	 * @retval	"true = 作成完了"
	 * @retval	"false = それ以外"
	 */
	//------------------------------------------------------------------------------------------
	bool Create( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデルの読み込みを待って各データをセット
	 *
	 * @param		dat		モデルデータ
	 *
	 * @retval	"true = セット完了"
	 * @retval	"false = それ以外"
	 */
	//------------------------------------------------------------------------------------------
	bool Setting( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル座標設定
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetModelPosition( MODEL_DATA * dat );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		スポットライト座標設定
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetSpotPosition( MODEL_DATA * dat, u32 pos );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		モデル座標計算
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	none　計算
	 */
	//------------------------------------------------------------------------------------------
	gfl2::math::Vector3 CalcPosition( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		高さ取得
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	モデルの高さ
	 */
	//------------------------------------------------------------------------------------------
	f32 GetHeight( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		前後の幅取得
	 *
	 * @param		dat		モデルデータ
	 *
	 * @return	モデルの前後の幅
	 */
	//------------------------------------------------------------------------------------------
	f32 GetLength( MODEL_DATA * dat );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		Y回転時のXYを取得する
	 *
	 * @param		xtang[in/out]		X
	 * @param		ztang[in/out]		Y
	 * @param		yang		        ラジアン
	 */
	//------------------------------------------------------------------------------------------
  void GetXZRotateY( f32* xtag, f32* ztag, f32 yang );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		Spotモデル作成
	 *
	 * @param		dat		モデルデータ
	 */
	//------------------------------------------------------------------------------------------
  void CreateSpotModel( MODEL_DATA * dat );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		Spotモデル破棄
	 *
	 * @param		dat		モデルデータ
	 */
	//------------------------------------------------------------------------------------------
  void DeleteSpotModel( MODEL_DATA * dat );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		アニメを再生する
	 *
	 * @param		dat		モデルデータ
	 * @param		animeId アニメID
	 */
	//------------------------------------------------------------------------------------------
  void SetAnime( MODEL_DATA * dat, PokeTool::MODEL_ANIME animeId );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモンソート
	 */
	//------------------------------------------------------------------------------------------
  void SortPokeLayerId();

private:
	app::util::Heap * pHeap;									//!< ヒープ
  app::util::AppRenderingManager * renderingManager; //!< レンダリングマネージャ
  gfl2::fs::AsyncFileManager * asyncFileManager; //!ファイル読み込みマネージャ
  PokeTool::PokeModelSystem *  pPokeModelSystem;  //!< ポケモデルシステム

	MODEL_DATA	modelData[MODEL_MAX];								//!< モデルデータ

	f32	minBaseHeight;		//!< 最小高さ
	f32	maxBaseHeight;		//!< 最大高さ

	f32	minBaseLength;		//!< 最小幅（前後）
	f32	maxBaseLength;		//!< 最大幅（前後）

	f32	baseLength;				//!< 基準となる幅（前後）

  u32 initialze;
  u32 finalize;

  u32 spotInvisibleId;
  u32 spotVisibleId;
  u32 spotPos;

  static const u32 SPOT_INVALID = 0xFF;

  poke_3d::model::BaseCamera* pCamera;
};


}	// dendou_demo
}	// app

#endif // __DENDOU_DEMO_POKEMODEL_H__
