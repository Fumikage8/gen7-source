//======================================================================
/**
 * @file DendouDemoView.h
 * @date 2016/03/01 14:58:53
 * @author  nagihashi_toru(移植), Hiroyuki Nakamura
 * @brief グラフィックス関連 GraphicWorkの移植だが、UIViewを継承し修正
 * @par Copyright
 * (C)1995-2015 GAME FREAK inc. All Rights Reserved.
 */
//======================================================================

#if !defined __DENDOU_DEMO_VIEW_HEADER_H_INCLUDED__
#define __DENDOU_DEMO_VIEW_HEADER_H_INCLUDED__
#pragma once

#include <AppLib/include/ui/UIView.h>
#include <PokeTool/include/PokeTool.h>
namespace app { namespace util { class Heap; class AppRenderingManager; class AppCamera; class EffectUtil; } }
namespace app { namespace dendou_demo { class PokeModel; class PlayerModel; } }
namespace gfl2{ namespace fs { class AsyncFileManager; } }
namespace Savedata { class MyStatus; }
namespace gfl2{ namespace renderingengine { namespace scenegraph { namespace instance { class DrawEnvNode; } } } }
namespace poke_3d { namespace model{ class BaseCamera; class BaseModel; } }
namespace gfl2 { namespace renderingengine {  namespace scenegraph { namespace resource { class ResourceNode; } } } }

namespace app {
namespace dendou_demo {

class FileLoader;

#define	DENDOU_DEMO_PLAYER_READ_WAIT_ENABLE		// 主人公モデルが読み終わってから開始するか（有効で待つ）

/**
 * @class View
 * @brief クラスの説明
 */
class View : public app::ui::UIView
{
  GFL_FORBID_COPY_AND_ASSIGN( View );
public:
	//! レイアウトID
	enum {
		LYTID_TOP = 0,
	};

	//! レイアウトアニメ
	enum {
    ANM_TELOP_IN,
    ANM_TELOP_KEEP,
		ANM_STAMP,
    ANM_FIRST,
    ANM_DIFENSE,
		ANM_MAX
	};


public:
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	View( app::util::Heap * heap, gfl2::fs::AsyncFileManager * fileManager, app::util::AppRenderingManager * renderingManager );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	virtual ~View();

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		初期化
	 *
	 * @param		heap		ヒープ
	 * @param		man			ファイルリードマネージャ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Initialize();

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		終了処理
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = 処理中"
	 */
	//--------------------------------------------------------------------------------------------
	bool Finalize(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		アップデート
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	virtual void Update(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		描画
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	virtual void Draw( gfl2::gfx::CtrDisplayNo no );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ファイル読み込みチェック
	 *
	 * @param		none
	 *
	 * @retval	"true = 読み込み中"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckFileRead(const Savedata::MyStatus * myst);

	//--------------------------------------------------------------------------------------------
	/**
   * @brief		システム初期化セットアップ中
	 *
	 * @param		none
	 *
	 * @retval	"true = 読み込み中"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool Setup(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		レイアウトアニメ再生
	 *
	 * @param		anm		アニメ番号
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetLytAnime( u32 anm );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		レイアウトアニメ再生チェック
	 *
	 * @param		anm		アニメ番号
	 *
	 * @retval	"true = 再生中"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool CheckLytAnime( u32 anm );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3Dカメラアニメ開始
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void StartCameraAnime(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3Dカメラアニメ再生フレーム取得
	 *
	 * @param		none
	 *
	 * @return	再生フレーム
	 */
	//--------------------------------------------------------------------------------------------
	f32 GetCameraFrame(void) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		3Dカメラアニメの最終フレームかどうか
   *
   * @param		none
   *
   * @return	trueで最終フレーム
   */
  //--------------------------------------------------------------------------------------------
  b32 IsCameraLastFrame(void) const;
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		カメラアニメ設定
	 *
	 * @param		flg		true = 再生、false = 停止
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetPlayCameraAnime( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモデル作成
	 *
	 * @param		pp		PokemonParamのテーブル
	 * @param		max		モデル数
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreatePokeModel( const pml::pokepara::PokemonParam ** pp, u32 max );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモデルが生成されたか
	 *
	 * @param		id	モデルID
	 *
	 * @retval	"true = 生成済み"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool IsPokeModelCreate( u32 id );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ポケモデルが生成されたか（ぜんぶ）
   *
   * @param   num モデル数
   *
   * @retval	"true = 生成済み"
   * @retval	"false = それ以外"
   */
  //--------------------------------------------------------------------------------------------
  bool IsPokeModelCreateAll( u32 num );
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモデル表示切り替え
	 *
	 * @param		id		モデルID
	 * @param		flg		true = 表示、false = 非表示
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetVisiblePokeMondel( u32 id, bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ループシーンのポケモン配置
	 *
	 * @param		id		モデルID
	 * @param		pos		配置位置
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void PutLoopPokemon( u32 id, u32 pos );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		初期化用ダミーポケモデル作成
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateDummyPokeModel(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		初期化用ダミーポケモデルからパラメータを設定
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool SetDummyPokeModelParam(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデル作成
	 *
	 * @param		myst								プレイヤーデータ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreatePlayerModel(
				const Savedata::MyStatus * myst );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデル削除
	 *
	 * @param		none
	 *
	 * @retval	"true = 削除完了"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool DeletePlayerModel(void);

#ifdef DENDOU_DEMO_PLAYER_READ_WAIT_ENABLE
	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデルの設定が完了したか
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool SetupPlayerModel(void);
#endif	// DENDOU_DEMO_PLAYER_READ_WAIT_ENABLE

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデルが生成されているか
	 *
	 * @param		none
	 *
	 * @retval	"true = 生成済み"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool IsPlayerModelCreate(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデル表示切り替え
	 *
	 * @param		flg		true = 表示、false = 非表示
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetVisiblePlayerModel( bool flg );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデルの終了モーションを再生
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetPlayerEndMotion(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		プレイヤーモデルの終了モーション後のモーションを再生
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void SetPlayerEndMotionNext(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ボタン押し確認
	 *
	 * @param		none
	 *
	 * @return	押された時true それ以外false
	 */
	//--------------------------------------------------------------------------------------------
  bool UpdateUI(void);

  //--------------------------------------------------------------------------------------------
  /**
  * @brief		パーティクル開始
  *
  */
  //--------------------------------------------------------------------------------------------
  void StartParticle(void);
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		ポケモンモデルモーション開始
  */
  //--------------------------------------------------------------------------------------------
  void StartPokeMotion(u32 id);

  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルセットアップ
  */
  //--------------------------------------------------------------------------------------------
  void SetupSpot( u32 id, u32 pos );
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルの切り替え
  */
  //--------------------------------------------------------------------------------------------
  void ChangeSpot( void );
  //--------------------------------------------------------------------------------------------
  /**
  * @brief		スポットライトモデルの切り替え予約
  */
  //--------------------------------------------------------------------------------------------
  void ReserveChangeSpot( u32 pos, u32 previd, u32 nextid );
private:

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		2D関連作成
	 *
	 * @param		heap		ヒープ
	 * @param		man			ファイルリードマネージャ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Create2D( app::util::Heap * heap, gfl2::fs::AsyncFileManager * man );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		2D関連削除
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool Delete2D(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3D関連作成
	 *
	 * @param		heap		ヒープ
	 * @param		man			ファイルリードマネージャ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Create3D( app::util::Heap * heap, gfl2::fs::AsyncFileManager * man );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3D関連削除
	 *
	 * @param		none
	 *
	 * @retval	"true = 完了"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool Delete3D(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3Dアップデート
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Update3D(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		3D描画
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void Draw3D(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief	  環境作成
	 *
	 * @param		heap	ヒープ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateEnv( app::util::Heap * heap );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		環境削除
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void DeleteEnv(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		床モデル作成
	 *
	 * @param		af		アークファイル
	 * @param		heap	ヒープ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateFloorModel( app::util::Heap * heap );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		床モデル削除
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void DeleteFloorModel(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモデル作成
	 *
	 * @param		id	モデルID
	 * @param		pp	PokemonParam
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
  void CreatePokeModel( u32 id, const PokeTool::SimpleParam & param );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パーティクル作成
	 *
	 * @param		af		アークファイル
	 * @param		heap	ヒープ
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void CreateParticle( app::util::Heap * heap );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パーティクル削除
	 *
	 * @param		none
	 *
	 * @return	none
	 */
	//--------------------------------------------------------------------------------------------
	void DeleteParticle(void);



private:
  app::util::Heap * pHeap;
  app::util::AppRenderingManager * pRenderingManager; //!<レンダリングパイプライン
  gfl2::fs::AsyncFileManager * pFileManager;
	PokeModel * pPokeModel;		//!< ポケモンモデル
	PlayerModel * pPlayerModel;		//!< プレイヤーモデル
	bool endFlag;														//!< 終了がリクエストされたか
	bool playerModelSetup;				//!< プレイヤーモデルの生成が終了したか

  app::util::EffectUtil*                  pEffectUtil;

  poke_3d::model::BaseCamera*                               pCamera;               //!< カメラ
  poke_3d::model::BaseModel*                                pFloorModel;           //!< BGモデル
  u32 loadSeq;
  u32 setupSeq;
  u32 finalizeSeq;
  u32 sex;  //!< 主人公の性別

  FileLoader * pFileLoader;

  gfl2::renderingengine::scenegraph::resource::ResourceNode *pCameraMotNode;
  gfl2::renderingengine::scenegraph::resource::ResourceNode *pFloorMotNode;
  gfl2::renderingengine::scenegraph::resource::ResourceNode *pFloorMdlNode;
  gfl2::renderingengine::scenegraph::resource::ResourceNode *pEnvResNode;
  gfl2::renderingengine::scenegraph::instance::DrawEnvNode* pEnvNode;
};

}	// dendou_demo
}	// app

#endif // __DENDOU_DEMO_VIEW_HEADER_H_INCLUDED__