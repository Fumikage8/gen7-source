//=============================================================================
/**
 * @file    FieldMenuFrame.h
 * @brief   フィールドメニューフレーム
 * @author  Hiroyuki Nakamura
 * @date    2015.05.18
 */
//=============================================================================
#if !defined( FIELD_MENU_FRAME_H_INCLUDED )
#define FIELD_MENU_FRAME_H_INCLUDED

#pragma once

// gflib
#include <types/include/gfl2_Typedef.h>
#include <macro/include/gfl2_Macros.h>
// niji
#include "Savedata/include/FieldMenuSave.h"
#include "AppLib/include/Frame/AppFrameCellSuper.h"
#include "Field/FieldStatic/include/Subscreen/SubscreenRequestDef.h"
#include "Field/FieldRo/include/Event/FieldEventPokemonRide.h"
// module
#include "FieldMenuListener.h"
#include "RideDrawListener.h"
#include "QuickMatchDrawListener.h"



// 前方宣言
GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(util)
class Heap;
class AppRenderingManager;
GFL_NAMESPACE_END(util)
GFL_NAMESPACE_END(app)

GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(tool)
class MenuCursor;
GFL_NAMESPACE_END(tool)
GFL_NAMESPACE_END(app)

GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(ui)
class UIView;
GFL_NAMESPACE_END(ui)
GFL_NAMESPACE_END(app)

GFL_NAMESPACE_BEGIN(Field)
class EventWork;
GFL_NAMESPACE_END(Field)

GFL_NAMESPACE_BEGIN(GameSys)
class GameManager;
GFL_NAMESPACE_END(GameSys)

GFL_NAMESPACE_BEGIN(Savedata)
class Misc;
GFL_NAMESPACE_END(Savedata)


GFL_NAMESPACE_BEGIN(App)
GFL_NAMESPACE_BEGIN(FieldMenu)

// 前方宣言
class MenuBase;
class MenuDraw;
class NaviDraw;
class PlayData;
class RideDraw;
class ReportDraw;
class QuickMatchDraw;

//=============================================================================
/**
 * @class FieldMenuFrame
 * @brief フィールドメニューフレームクラス
 * @date  2015.05.18
 */
//=============================================================================
class FieldMenuFrame
  : public applib::frame::CellSuper
  , public FrameListener
  , public RideDrawListener
  , public QuickMatchDrawListener
{
  GFL_FORBID_COPY_AND_ASSIGN(FieldMenuFrame);   // コピーコンストラクタ＋代入禁止

public:
  //! 開始モード
  enum StartType
  {
    START_TYPE_NORMAL = 0,    //!< 通常
    START_TYPE_MENU_OPEN,     //!< メニューを開いた状態で開始
    START_TYPE_RIDE_OPEN,     //!< ライド選択画面を開いた状態で開始
  };


private:
  static const u32 MENU_ICON_H_MAX = 2;   //!< メニュー項目横方向表示最大数
  static const u32 MENU_ICON_V_MAX = 3;   //!< メニュー項目縦方向表示最大数

  static const u32 MENU_ICON_CATCH_SCROLL_COUNT = 4;  //!< メニューアイコンキャッチムーブ時のスクロールカウント

  //! ライドポケモンID変換データ
  struct RIDE_ID_CNV
  {
    Savedata::FieldMenu::RideID list;   //!< ライド選択画面のID
    Field::RIDE_POKEMON_ID field;       //!< フィールドのID
  };

  //! ライドポケモンID変換テーブル
  static const RIDE_ID_CNV RideConvTable[Field::RIDE_POKEMON_NUM];

  static const u32 ROTOM_MSG_HEAP_SIZE = 0x1000;        //!< ロトムメッセージ用システムヒープサイズ
  static const u32 ROTOM_MSG_DEVICE_HEAP_SIZE = 0x400;  //!< ロトムメッセージ用デバイスヒープサイズ

  static const u32 MENUBASE_HEAP_SIZE = 0x6000;           //!< MenuBaseクラス用システムヒープサイズ
  static const u32 MENUBASE_DEVICE_HEAP_SIZE = 0xe0000;   //!< MenuBaseクラス用デバイスヒープサイズ

  static const u32 START_ROTOM_FREE_TALK_VALUE = 20;    //!< ゲーム起動時にロトム会話が発生する確率


public:
  //-----------------------------------------------------------------------------
  /**
   * @brief コンストラクタ
   */
  //-----------------------------------------------------------------------------
  FieldMenuFrame(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief デストラクタ
   */
  //-----------------------------------------------------------------------------
  virtual ~FieldMenuFrame();

  //-----------------------------------------------------------------------------
  /**
   * @func    Setup
   * @brief   パラメータセット
   * @date    2015.05.18
   *
   * @parma   heap        ヒープ
   * @param   render_man  描画マネージャー
   * @param   type        開始タイプ
   */
  //-----------------------------------------------------------------------------
  void Setup( app::util::Heap * heap, app::util::AppRenderingManager * render_man, StartType type );

  //-----------------------------------------------------------------------------
  /**
   * @func    InitFunc
   * @brief   フレーム初期化
   * @date    2015.05.18
   *
   * @return  applib::frame::Result
   */
  //-----------------------------------------------------------------------------
  virtual applib::frame::Result InitFunc(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    EndFunc
   * @brief   フレーム終了
   * @date    2015.05.18
   *
   * @return  applib::frame::Result
   */
  //-----------------------------------------------------------------------------
  virtual applib::frame::Result EndFunc(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    UpdateFunc
   * @brief   フレーム更新
   * @date    2015.05.18
   *
   * @return  applib::frame::Result
   */
  //-----------------------------------------------------------------------------
  virtual applib::frame::Result UpdateFunc(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DrawFunc
   * @brief   フレーム描画
   * @date    2015.05.18
   *
   * @param   no  描画先のディスプレイ番号
   */
  //-----------------------------------------------------------------------------
  virtual void DrawFunc( gfl2::gfx::CtrDisplayNo no );

  //-----------------------------------------------------------------------------
  /**
   * @func    IsCreate
   * @brief   最低限の生成が完了したか
   * @date    2015.11.04
   *
   * @retval  true  = 完了した
   * @retval  false = それ以外
   *
   * @note  trueを返すまでフェードイン禁止。
   */
  //-----------------------------------------------------------------------------
  bool IsCreate(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetRequest
   * @brief   下画面にリクエストを発行
   * @date    2015.05.25
   *
   * @param   id  リクエストID
   */
  //-----------------------------------------------------------------------------
  void SetRequest( Field::SubScreen::FieldMenuInRequestID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    GetRequest
   * @brief   下画面からのリクエストを取得
   * @date    2015.05.25
   *
   * @return  リクエストID
   */
  //-----------------------------------------------------------------------------
  Field::SubScreen::FieldMenuOutRequestID GetRequest(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ResetRequest
   * @brief   下画面からのリクエストを削除
   * @date    2015.05.25
   */
  //-----------------------------------------------------------------------------
  void ResetRequest(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    GetRideID
   * @brief   選択されたライドIDを取得
   * @date    2015.07.15
   *
   * @return  ライドID
   */
  //-----------------------------------------------------------------------------
  Savedata::FieldMenu::RideID GetRideID(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    GetFieldRideID
   * @brief   メニュー画面のライドIDをフールドのライドIDに変換
   * @date    2015.09.16
   *
   * @param   id  メニュー画面のライドID
   *
   * @return  フィールドのライドID
   */
  //-----------------------------------------------------------------------------
  Field::RIDE_POKEMON_ID GetFieldRideID( Savedata::FieldMenu::RideID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetRotomEvent
   * @brief   ロトムメッセージイベントをセット
   * @date    2015.11.11
   *
   * @param   msg_id  メッセージID
   *
   * @note  パッシブ状態のイベント中はこちらを使用すること
   */
  //-----------------------------------------------------------------------------
  bool SetRotomEvent( u32 msg_id );

  //-----------------------------------------------------------------------------
  /**
   * @func    IsRotomEvent
   * @brief   ロトムイベント中か
   * @date    2015.11.11
   *
   * @retbal  true  = イベント中
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool IsRotomEvent(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetRotomPosEvent
   * @brief   POSイベント用ロトムメッセージセット
   * @date    2016.01.15
   *
   * @param   msg_id  メッセージID
   *
   * @note  メッセージを表示するだけ
   */
  //-----------------------------------------------------------------------------
  void SetRotomPosEvent( u32 msg_id );

  //-----------------------------------------------------------------------------
  /**
   * @func    GetRotoponItem
   * @brief   ロトポンで獲得した道具を取得
   * @date    2016.12.16
   *
   * @return  アイテム番号
   */
  //-----------------------------------------------------------------------------
  u16 GetRotoponItem(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    IsMenuDrawCreate
   * @brief   MenuDrawクラスの生成が完了したか
   * @date    2017.04.05
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   *
   * @note
   *    FieldStaffListクラス生成時に
   *    メッセージのアーカイブへの読み込みが重なってしまうため、
   *    メッセージを読み込んでいるMenuDrawクラスの完成をチェックする
   */
  //-----------------------------------------------------------------------------
  bool IsMenuDrawCreate(void) const;


#if PM_DEBUG
  void DebugSetup(void);
#endif  // PM_DEBUG


private:
  //-----------------------------------------------------------------------------
  /**
   * @func    CheckRequest
   * @brief   外部からのリクエストをチェック
   * @date    2015.06.09
   *
   * @retval  true  = リクエストあり
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CheckRequest(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetDispMask
   * @brief   マスク表示切り替え
   * @date    2015.11.09
   *
   * @param   flg   true = 表示, false = 非表示
   */
  //-----------------------------------------------------------------------------
  void SetDispMask( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetInputEnable
   * @brief   下画面全体の入力制御切り替え
   * @date    2015.06.09
   *
   * @param   flg   true = 許可, false = 不許可
   */
  //-----------------------------------------------------------------------------
  void SetInputEnable( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetMenuBaseInputEnable
   * @brief   MenuBaseクラスの入力制御切り替え
   * @date    2015.06.19
   *
   * @param   flg   true = 許可, false = 不許可
   */
  //-----------------------------------------------------------------------------
  void SetMenuBaseInputEnable( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetMenuDrawInputEnable
   * @brief   MenuDrawクラスの入力制御切り替え
   * @date    2015.06.19
   *
   * @param   flg   true = 許可, false = 不許可
   */
  //-----------------------------------------------------------------------------
  void SetMenuDrawInputEnable( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetNaviDrawInputEnable
   * @brief   NaviDrawクラスの入力制御切り替え
   * @date    2015.06.19
   *
   * @param   flg   true = 許可, false = 不許可
   */
  //-----------------------------------------------------------------------------
  void SetNaviDrawInputEnable( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    PlaySE
   * @brief   SE再生
   * @date    2015.06.23
   *
   * @parma   id  SEのID
   */
  //-----------------------------------------------------------------------------
  void PlaySE( u32 id );

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateRotomMessageHeap
   * @brief   ロトムメッセージ用のヒープを生成
   * @date    2016.01.21
   */
  //-----------------------------------------------------------------------------
  void CreateRotomMessageHeap(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteRotomMessageHeap
   * @brief   ロトムメッセージ用のヒープを削除
   * @date    2016.01.21
   */
  //-----------------------------------------------------------------------------
  void DeleteRotomMessageHeap(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateMenuBaseHeap
   * @brief   MenuBaseクラス用のヒープを生成
   * @date    2016.04.21
   */
  //-----------------------------------------------------------------------------
  void CreateMenuBaseHeap(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteMenuBaseHeap
   * @brief   MenuBaseクラス用のヒープを削除
   * @date    2016.04.21
   */
  //-----------------------------------------------------------------------------
  void DeleteMenuBaseHeap(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    GetGameData
   * @brief   ゲームデータ関連取得
   * @date    2015.05.21
   */
  //-----------------------------------------------------------------------------
  void GetGameData(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    AddSubModuleView
   * @brief   登録順を一定にしてViewを登録
   * @date    2015.07.15
   *
   * @param   view  登録するView
   */
  //-----------------------------------------------------------------------------
  void AddSubModuleView( app::ui::UIView * view );

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateMenuBaseEz
   * @brief   MenuBaseクラス生成（簡易版）
   * @date    2016.04.19
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateMenuBaseEz(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    InitMenuBaseSync
   * @brief   MenuBaseクラス生成（同期版）
   * @date    2016.04.21
   */
  //-----------------------------------------------------------------------------
  void InitMenuBaseSync(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateMenuBase
   * @brief   MenuBaseクラス生成
   * @date    2016.01.08
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateMenuBase(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteMenuBase
   * @brief   MenuBaseクラス削除
   * @date    2016.01.08
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteMenuBase(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateMenuDraw
   * @brief   MenuDrawクラス生成
   * @date    2015.05.21
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateMenuDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteMenuDraw
   * @brief   MenuDrawクラス削除
   * @date    2015.05.21
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteMenuDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateNaviDraw
   * @brief   NaviDrawクラス生成
   * @date    2015.05.29
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateNaviDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteNaviDraw
   * @brief   NaviDrawクラス削除
   * @date    2015.05.29
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteNaviDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateRideDraw
   * @brief   RideDrawクラス生成
   * @date    2015.07.15
   *
   * @param   is_frame_start  true = 下画面初期化時（ライド説明画面からの復帰時）
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateRideDraw( bool is_frame_start );

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteRideDraw
   * @brief   RideDrawクラス削除
   * @date    2015.07.15
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteRideDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateReportDraw
   * @brief   ReportDrawクラス生成
   * @date    2015.08.18
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateReportDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteReportDraw
   * @brief   ReportDrawクラス削除
   * @date    2015.08.18
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteReportDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateQuickMatchDraw
   * @brief   QuickMatchDrawクラス生成
   * @date    2015.09.09
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool CreateQuickMatchDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteQuickMatchDraw
   * @brief   QuickMatchDrawクラス削除
   * @date    2015.09.09
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool DeleteQuickMatchDraw(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangeSubSeq
   * @brief   アップデートのシーケンス切り替え
   * @date    2015.05.22
   *
   * @param   main  メインシーケンス
   * @param   sub   サブシーケンス
   */
  //-----------------------------------------------------------------------------
  void ChangeSubSeq( u32 main, u32 sub=0 );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetEnd
   * @brief   下画面終了をセット
   * @date    2015.05.22
   */
  //-----------------------------------------------------------------------------
  void SetEnd(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    IsSetEnd
   * @brief   下画面を終了できるか
   * @date    2015.09.28
   *
   * @retval  true  = 可
   * @retval  false = 不可
   */
  //-----------------------------------------------------------------------------
  bool IsSetEnd(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetEndEnable
   * @brief   終了設定制御フラグをセット
   * @date    2016.01.09
   *
   * @param   flg   true = 終了可能, false = 終了不可
   */
  //-----------------------------------------------------------------------------
  void SetEndEnable( bool flg );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetEndEnableSequence
   * @brief   アップデートシーケンスをチェックして終了設定制御フラグをセット
   * @date    2016.01.09
   *
   * @param   seq   アップデートシーケンス
   */
  //-----------------------------------------------------------------------------
  void SetEndEnableSequence( u32 seq );

  //-----------------------------------------------------------------------------
  /**
   * @func    CreateFieldMenu
   * @brief   フィールドメニュー生成
   * @date    2015.08.24
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   *
   * @note  下画面アプリからの復帰に使用
   */
  //-----------------------------------------------------------------------------
  bool CreateFieldMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    DeleteFieldMenu
   * @brief   フィールドメニュー削除
   * @date    2015.08.24
   *
   * @retval  true  = 完了
   * @retval  false = それ以外
   *
   * @note  下画面アプリ起動のために一部を削除
   */
  //-----------------------------------------------------------------------------
  bool DeleteFieldMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInit
   * @brief   アップデート：初期化
   * @date    2016.01.09
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInit(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInitMenu
   * @brief   アップデート：メニューを開いた状態で初期化
   * @date    2016.02.13
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInitMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInitRide
   * @brief   アップデート：ライド選択画面を開いた状態で初期化
   * @date    2016.03.30
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInitRide(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqStart
   * @brief   アップデート：開始処理
   * @date    2015.05.22
   */
  //-----------------------------------------------------------------------------
  void Update_SeqStart(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqMain
   * @brief   アップデート：メイン処理
   * @date    2015.05.29
   */
  //-----------------------------------------------------------------------------
  void Update_SeqMain(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqOpenMenu
   * @brief   アップデート：メニューを開く
   * @date    2015.05.29
   */
  //-----------------------------------------------------------------------------
  void Update_SeqOpenMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqCloseMenu
   * @brief   アップデート：メニューを閉じる
   * @date    2015.05.29
   */
  //-----------------------------------------------------------------------------
  void Update_SeqCloseMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqChangeMenuPage
   * @brief   アップデート：メニューのページ切り替え
   * @date    2015.06.02
   */
  //-----------------------------------------------------------------------------
  void Update_SeqChangeMenuPage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqSlideMenuPage
   * @brief   アップデート：スライド操作でのメニューページ切り替え
   * @date    2015.06.04
   */
  //-----------------------------------------------------------------------------
  void Update_SeqSlideMenuPage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqMenuIconCatch
   * @brief   アップデート：メニュー項目キャッチムーブ
   * @date    2015.06.04
   */
  //-----------------------------------------------------------------------------
  void Update_SeqMenuIconCatch(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInitRideList
   * @brief   アップデート：ライド選択画面起動
   * @date    2015.07.15
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInitRideList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqExitRideList
   * @brief   アップデート：ライド選択画面終了
   * @date    2015.07.15
   */
  //-----------------------------------------------------------------------------
  void Update_SeqExitRideList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInitReport
   * @brief   アップデート：レポート画面起動
   * @date    2015.08.18
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInitReport(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqMainReport
   * @brief   アップデート：レポート画面メイン処理
   * @date    2015.08.18
   */
  //-----------------------------------------------------------------------------
  void Update_SeqMainReport(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqExitReport
   * @brief   アップデート：レポート画面終了
   * @date    2015.08.18
   */
  //-----------------------------------------------------------------------------
  void Update_SeqExitReport(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqInitQuickMatch
   * @brief   アップデート：クイック通信画面起動
   * @date    2015.09.09
   */
  //-----------------------------------------------------------------------------
  void Update_SeqInitQuickMatch(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqExitQuickMatch
   * @brief   アップデート：クイック通信終了
   * @date    2015.09.09
   */
  //-----------------------------------------------------------------------------
  void Update_SeqExitQuickMatch(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    Update_SeqRotomEvent
   * @brief   アップデート：ロトムイベント
   * @date    2015.11.11
   */
  //-----------------------------------------------------------------------------
  void Update_SeqRotomEvent(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    OnAction
   * @brief   入力リスナー
   * @date    2015.05.21
   *
   * @param   id  入力ID
   *
   * @note  override FrameListener
   */
  //-----------------------------------------------------------------------------
  virtual void OnAction( u32 id );

  //-----------------------------------------------------------------------------
  /**
   * @func    OnActionField
   * @brief   フィールドフリームーブ中の入力
   * @date    2015.05.29
   *
   * @param   id  入力ID
   */
  //-----------------------------------------------------------------------------
  void OnActionField( u32 id );

  //-----------------------------------------------------------------------------
  /**
   * @func    OnActionMenu
   * @brief   メニューを開いている場合の入力
   * @date    2015.05.29
   *
   * @param   id  入力ID
   */
  //-----------------------------------------------------------------------------
  void OnActionMenu( u32 id );

  //-----------------------------------------------------------------------------
  /**
   * @func    OpenMenu
   * @brief   フィールドメニューを開く
   * @date    2015.05.29
   */
  //-----------------------------------------------------------------------------
  void OpenMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CloseMenu
   * @brief   フィールドメニューを閉じる
   * @date    2015.05.29
   */
  //-----------------------------------------------------------------------------
  void CloseMenu(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangePage
   * @brief   メニューのページを切り替える
   * @date    2015.06.02
   *
   * @param   mv            切り替え方向
   * @param   is_arrow_anm  true = 切り替え矢印のアニメを再生
   */
  //-----------------------------------------------------------------------------
  void ChangePage( int mv, bool is_arrow_anm = true );

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangePageCore
   * @brief   メニューのページを切り替える（共通部分）
   * @date    2015.06.04
   *
   * @param   mv            切り替え方向
   * @param   is_arrow_anm  true = 切り替え矢印のアニメを再生
   */
  //-----------------------------------------------------------------------------
  void ChangePageCore( int mv, bool is_arrow_anm = true );

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangePageButton
   * @brief   ページボタンからメニューのページを切り替える
   * @date    2015.06.02
   *
   * @param   next_page   切り替え後のページ
   */
  //-----------------------------------------------------------------------------
  void ChangePageButton( int next_page );

  //-----------------------------------------------------------------------------
  /**
   * @func    ChangePageButtonCore
   * @brief   ページボタンからメニューのページを切り替える（共通部分）
   * @date    2015.06.04
   *
   * @param   next_page   切り替え後のページ
   */
  //-----------------------------------------------------------------------------
  void ChangePageButtonCore( int next_page );

  //-----------------------------------------------------------------------------
  /**
   * @func    GetPageLowPos
   * @brief   ページの並び位置を取得
   * @date    2015.06.02
   *
   * @param   page  ページ番号
   *
   * @return  並び位置
   *
   * @note  未使用（３ページあったときの処理）
   */
  //-----------------------------------------------------------------------------
  u32 GetPageLowPos( u32 page );

  //-----------------------------------------------------------------------------
  /**
   * @func    EndChangePage
   * @brief   ページ切り替え終了
   * @date    2015.06.04
   *
   * @return  現在のページ番号
   */
  //-----------------------------------------------------------------------------
  u32 EndChangePage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    MoveMenuPos
   * @brief   メニューカーソル移動
   * @date    2015.06.02
   *
   * @parma   id      動作ID
   * @param   is_trg  true = トリガー入力
   */
  //-----------------------------------------------------------------------------
  void MoveMenuPos( u32 id, bool is_trg );

  //-----------------------------------------------------------------------------
  /**
   * @func    CatchMenuIcon
   * @brief   メニュー項目キャッチ
   * @date    2015.06.04
   *
   * @param   id  メニュー項目ID
   */
  //-----------------------------------------------------------------------------
  void CatchMenuIcon( u32 id );

  //-----------------------------------------------------------------------------
  /**
   * @func    DragMenuPage
   * @brief   ページのドラッグ処理
   * @date    2015.06.04
   */
  //-----------------------------------------------------------------------------
  void DragMenuPage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ReleaseMenuPage
   * @brief   ページのリリース処理
   * @date    2015.06.04
   */
  //-----------------------------------------------------------------------------
  void ReleaseMenuPage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    ScrollMenuPage
   * @brief   ページスクロール
   * @date    2015.06.04
   */
  //-----------------------------------------------------------------------------
  void ScrollMenuPage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    OpenRideList
   * @brief   ライド選択画面を開く
   * @date    2015.07.15
   */
  //-----------------------------------------------------------------------------
  void OpenRideList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CloseRideList
   * @brief   ライド選択画面を閉じる
   * @date    2015.07.15
   */
  //-----------------------------------------------------------------------------
  void CloseRideList(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SelectRide
   * @brief   ライド画面選択時のリスナー
   * @date    2015.07.15
   *
   * @param   id  入力ID
   *
   * @note  override RideDrawListener
   */
  //-----------------------------------------------------------------------------
  virtual void SelectRide( Savedata::FieldMenu::RideID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    SelectRideInfo
   * @brief   ライド画面説明選択時のリスナー
   * @date    2016.03.30
   *
   * @param   id  入力ID
   *
   * @note  override RideDrawListener
   */
  //-----------------------------------------------------------------------------
  virtual void SelectRideInfo( Savedata::FieldMenu::RideID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    GetMenuRideID
   * @brief   フィールドのライドIDからメニュー画面のライドIDを取得
   * @date    2015.09.16
   *
   * @param   id  フィールドのライドID
   *
   * @return  メニュー画面のライドID
   */
  //-----------------------------------------------------------------------------
  Savedata::FieldMenu::RideID GetMenuRideID( Field::RIDE_POKEMON_ID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    IsRideOnEnable
   * @brief   ライドポケモンに乗れるかをチェック
   * @date    2015.09.16
   *
   * @param   id  ライドID
   *
   * @return  チェック結果
   */
  //-----------------------------------------------------------------------------
  Field::RIDE_CHECK_RESULT IsRideOnEnable( Savedata::FieldMenu::RideID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    IsRideOffEnable
   * @brief   ライドポケモンから降りられるかをチェック
   * @date    2015.09.16
   *
   * @param   id  ライドID
   *
   * @return  チェック結果
   */
  //-----------------------------------------------------------------------------
  Field::RIDE_CHECK_RESULT IsRideOffEnable( Savedata::FieldMenu::RideID id );

  //-----------------------------------------------------------------------------
  /**
   * @func    OpenReport
   * @brief   レポート画面を開く
   * @date    2015.08.18
   */
  //-----------------------------------------------------------------------------
  void OpenReport(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CloseReport
   * @brief   レポート画面を閉じる
   * @date    2015.08.18
   */
  //-----------------------------------------------------------------------------
  void CloseReport(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    OpenQuickMatch
   * @brief   クイック通信画面を開く
   * @date    2015.09.09
   */
  //-----------------------------------------------------------------------------
  void OpenQuickMatch(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CloseQuickMatch
   * @brief   クイック通信画面を閉じる
   * @date    2015.09.09
   */
  //-----------------------------------------------------------------------------
  void CloseQuickMatch(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    OnQuickMatchDrawExit
   * @brief   クイック通信がBボタンで終了した時に呼ばれる
   * @date    2015.09.09
   *
   * @note  override QuickMatchDrawListener
   */
  //-----------------------------------------------------------------------------
  virtual void OnQuickMatchDrawExit(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    OnQuickMatchDrawNext
   * @brief   クイック通信がマッチングに成功してアプリに遷移するときに呼ばれる
   * @date    2015.09.09
   *
   * @note  override QuickMatchDrawListener
   */
  //-----------------------------------------------------------------------------
  virtual void OnQuickMatchDrawNext(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetRotomMessage
   * @brief   ロトムメッセージをセット
   * @date    2015.09.04
   */
  //-----------------------------------------------------------------------------
  void SetRotomMessage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    GetNaviPosIcon
   * @brief   現在地アイコンの表示モードを取得
   * @date    2016.01.15
   *
   * @return  現在地アイコンの表示モード
   */
  //-----------------------------------------------------------------------------
  int GetNaviPosIcon(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    IsValidFieldMap
   * @brief   フィールドマップの有効位置にいるかをチェック
   * @date    2015.12.02
   *
   * @retval  true  = 有効位置
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool IsValidFieldMap(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    IsPlayerEnableInput
   * @brief   プレイヤーキャラが入力を受け付けているか
   * @date    2017.05.19
   *
   * @retval  true  = 受け付けている
   * @retval  false = それ以外
   *
   * @fix MMCat[728]
   */
  //-----------------------------------------------------------------------------
  bool IsPlayerEnableInput(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SelectRotomDisp
   * @brief   ロトムの画面を選択
   * @date    2016.02.16
   *
   * @param   is_talk   true = メッセージ表示へ
   */
  //-----------------------------------------------------------------------------
  void SelectRotomDisp( bool is_talk );

  //-----------------------------------------------------------------------------
  /**
   * @func    SetRequestRotomMessage
   * @brief   ロトムメッセージ表示リクエスト
   * @date    2016.02.16
   */
  //-----------------------------------------------------------------------------
  void SetRequestRotomMessage(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    CallFinder
   * @brief   ファインダー呼び出し
   * @date    2016.02.16
   *
   * @retval  true  = 成功
   * @retval  false = 失敗
   */
  //-----------------------------------------------------------------------------
  bool CallFinder(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    StartRotopon
   * @brief   ロトポン開始
   * @date    2016.12.08
   */
  //-----------------------------------------------------------------------------
  void StartRotopon(void);

  //-----------------------------------------------------------------------------
  /**
   * @func    SetTimeRotomColor
   * @brief   ロトム時間帯アニメセット
   * @date    2017.03.30
   */
  //-----------------------------------------------------------------------------
  void SetTimeRotomColor(void);


private:
  app::util::Heap * m_heap;   //!< ヒープ
  app::util::AppRenderingManager * m_renderingManager;  //!< 描画マネージャ

  StartType m_startType;  //!< 開始モード

  s32 m_dispMode;   //!< 表示モード

  GameSys::GameManager * m_gameManager;   //!< ゲームマネージャ
  Savedata::FieldMenu * m_saveFieldMenu;  //!< フィールドメニューセーブデータ
  Savedata::Misc * m_saveMisc;            //!< 未分類セーブデータ
  PlayData * m_playData;                  //!< フィールドメニューゲームデータ
  const Field::EventWork * m_eventWork;   //!< イベントワーク

  Field::SubScreen::FieldMenuInRequestID m_inRequestID;    //!< フィールドからメニューへのリクエスト
  Field::SubScreen::FieldMenuOutRequestID m_outRequestID;  //!< メニューからフィールドへのリクエスト

  u8 m_createSeq;           //!< 生成処理用シーケンス
  u8 m_subSeq;              //!< サブシーケンス
  u8 m_moduleSeq;           //!< モジュール処理用シーケンス
  u8 m_setupFieldMenuSeq;   //!< フィールドメニューセットアップ用シーケンス

  MenuBase * m_pMenuBase;   //!< フィールドメニュー基本クラス
  bool m_isMenuBaseCreate;  //!< MenuBaseクラスが生成されたか
  MenuDraw * m_pMenuDraw;   //!< フィールドメニュー表示クラス
  bool m_isMenuDrawCreate;  //!< MenuDrawクラスが生成されたか
  NaviDraw * m_pNaviDraw;   //!< マップ表示クラス
  bool m_isNaviDrawCreate;  //!< NaviDrawクラスが生成されたか 

  u16 m_cursorPos;          //!< カーソル位置
  u16 m_catchScrollCount;   //!< 項目キャッチ時のページスクロールカウンタ

  bool m_isMenuOpen;    //!< true = メニューが開いている

  bool m_cpyIsMenuBaseInput;  //!< パッシブ時にMenuBaseクラスの入力制御切り替えを行った場合のフラグ保存場所
  bool m_cpyIsMenuDrawInput;  //!< パッシブ時にMenuDrawクラスの入力制御切り替えを行った場合のフラグ保存場所
  bool m_cpyIsNaviDrawInput;  //!< パッシブ時にNaviDrawクラスの入力制御切り替えを行った場合のフラグ保存場所
  bool m_isPassive;           //!< true = 下画面入力不可

  RideDraw * m_pRideDraw;                 //!< ライド選択画面クラス
  Savedata::FieldMenu::RideID m_rideID;   //!< 選択されたライドID
  bool m_isRideCollisionUpdate;           //!< true = ライドのコリジョン判定を更新（フィールド処理）

  ReportDraw * m_pReportDraw;     //!< レポート画面クラス

  QuickMatchDraw * m_pQuickMatch;   //!< クイック通信画面クラス
  bool m_isQuickMatchExit;          //!< ※未使用

  bool m_isCreate;    //!< true = 生成完了　※フリームーブを開始してもok

  bool m_isRotomEvent;            //!< true = スクリプトからロトムメッセージ処理を起動
  bool m_isRotomEventStartOpen;   //!< true = スクリプトから起動されたロトムメッセージ表示開始

  bool m_isEndEnable;   //!< true = 終了可

  app::util::Heap * m_pRotomMsgHeap;  //!< ロトムメッセージ用ヒープ
  app::util::Heap * m_pMenuBaseHeap;  //!< MenuBaseクラス用ヒープ

  bool m_isStartGetRequest;   //!< 外部からリクエストの取得が開始された

#if PM_DEBUG
  bool m_debugModeFlag;

  static const u32 DEBUG_PRINT_TIME_ID_INIT = 0xffffffff;
  void DebugPrintTime( u32 id );

  u32 m_debugSysHeapSizeLow;
  u32 m_debugDevHeapSizeLow;
  bool DebugSetHeapSizeLow(void);
  void DebugPrintHeapSizeLow( const char * str );
#endif  // PM_DEBUG

};


GFL_NAMESPACE_END(FieldMenu)
GFL_NAMESPACE_END(App)

#endif  // FIELD_MENU_FRAME_H_INCLUDED
