//=============================================================================
/**
 * @file    BagGamedata.cpp
 * @brief   バッグ画面 ゲーム中に保持し続けるデータ
 * @author  Hiroyuki Nakamura
 * @date    2011.10.20
 */
//=============================================================================

// module
#include "App/AppEvent/include/Bag/BagGamedata.h"
// gflib2
#include <debug/include/gfl2_Assert.h>


GFL_NAMESPACE_BEGIN(app)
GFL_NAMESPACE_BEGIN(bag)

//-----------------------------------------------------------------------------
/**
 * @brief   コンストラクタ
 */
//-----------------------------------------------------------------------------
PlayData::PlayData(void)
{
  InitPocketData();
  m_pocketPos = BAG_POCKET_DRUG;
}

//-----------------------------------------------------------------------------
/**
 * @brief   デストラクタ
 */
//-----------------------------------------------------------------------------
PlayData::~PlayData()
{
}


//=============================================================================
//  ポケットデータ
//=============================================================================

//-----------------------------------------------------------------------------
/**
 * @brief   ポケットデータ初期化
 */
//-----------------------------------------------------------------------------
void PlayData::InitPocketData(void)
{
  for( int i=0; i<POCKET_DATA_MAX; i++ ){
    m_pocketData[i].pos    = 0;
    m_pocketData[i].scroll = 0;
  }
}

//-----------------------------------------------------------------------------
/**
 * @brief   ポケットデータ取得
 *
 * @param   pocket  ポケット番号
 *
 * @return  ポケットデータ
 */
//-----------------------------------------------------------------------------
const PlayData::POCKET_DATA * PlayData::GetPocketData( u32 pocket )
{
  if( pocket >= POCKET_DATA_MAX ){
    GFL_ASSERT( 0 );
    pocket = 0;
  }
  return &m_pocketData[pocket];
}

//-----------------------------------------------------------------------------
/**
 * @brief   ポケットデータセット
 *
 * @param   pocket  ポケット番号
 * @param   pos     カーソル位置
 * @param   scroll  スクロール値
 */
//-----------------------------------------------------------------------------
void PlayData::SetPocketData( u32 pocket, u32 pos, u32 scroll )
{
  if( pocket >= POCKET_DATA_MAX ){
    GFL_ASSERT( 0 );
    return;
  }
  m_pocketData[pocket].pos    = pos;
  m_pocketData[pocket].scroll = scroll;
}


//=============================================================================
//  ポケット位置
//=============================================================================

//-----------------------------------------------------------------------------
/**
 * @brief   ポケット位置を取得
 *
 * @return  ポケット位置
 */
//-----------------------------------------------------------------------------
u32 PlayData::GetPocketPos(void) const
{
  return m_pocketPos;
}

//-----------------------------------------------------------------------------
/**
 * @brief   ポケット位置を設定
 *
 * @param   ポケット位置
 */
//-----------------------------------------------------------------------------
void PlayData::SetPocketPos( u32 pos )
{
  m_pocketPos = pos;
}


GFL_NAMESPACE_END(bag)
GFL_NAMESPACE_END(app)
