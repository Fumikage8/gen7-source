#if !defined( __RESORT_LOWER_GIM_DRAW_H__ )
#define __RESORT_LOWER_GIM_DRAW_H__
#pragma once
//======================================================================
/**
 * @file    ResortLowerGimDraw.h
 * @date    2015/10/02 12:02:20
 * @author  fukushima_yuya
 * @brief   ポケリゾート：うんどう状態画面(下)
 * @par Copyright
 * (C)1995-2015 GAME FREAK inc. All Rights Reserved.
 */
//======================================================================

// niji
#include "ResortLowerBaseDraw.h"

#include <App/Resort/source/ResortConst.h>


//------------------------------------------------------------------------------
// @brief   前方宣言
//------------------------------------------------------------------------------
GFL_NAMESPACE_BEGIN(App)
GFL_NAMESPACE_BEGIN(Resort)
class ResortCounter;
GFL_NAMESPACE_END(Resort)
GFL_NAMESPACE_END(App)


GFL_NAMESPACE_BEGIN(App)
GFL_NAMESPACE_BEGIN(Resort)

//------------------------------------------------------------------------------
// @brief   ポケリゾート：うんどう状態画面(下)
//------------------------------------------------------------------------------
class LowerGimDraw
  : public LowerBaseDraw
{
  GFL_FORBID_COPY_AND_ASSIGN(LowerGimDraw);

public:
  //------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   *
   * @param   param   生成パラメータ
   */
  //------------------------------------------------------------------
  LowerGimDraw( CreateParam& param );

  //------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //------------------------------------------------------------------
  virtual ~LowerGimDraw( void ) { ; }


private:
  //------------------------------------------------------------------
  /**
   * @brief   2D関連作成
   *
   * @param   param   初期化パラメータ
   */
  //------------------------------------------------------------------
  virtual void Initialize2D( InitParam& param );

  //------------------------------------------------------------------
  /**
   * @brief   クラスの初期化
   *
   * @param   param   初期化パラメータ
   */
  //------------------------------------------------------------------
  virtual void InitializeClass( InitParam& param );

  //------------------------------------------------------------------
  /**
   * @brief   ペインの初期化
   */
  //------------------------------------------------------------------
  virtual void InitializePane( void );

  //------------------------------------------------------------------
  /**
   * @brief   初期テキスト
   */
  //------------------------------------------------------------------
  virtual void InitializeText( void );
  
private:
  //------------------------------------------------------------------
  /**
   * @brief   終了処理
   */
  //------------------------------------------------------------------
  virtual bool Terminate( void );

public:
  //------------------------------------------------------------------
  /**
   * @brief   更新
   */
  //------------------------------------------------------------------
  virtual void Update( void );

  //------------------------------------------------------------------
  /**
  * @brief   描画
   */
  //------------------------------------------------------------------
  virtual void Draw( gfl2::gfx::CtrDisplayNo no );

public:
  //------------------------------------------------------------------
  /**
   * @brief   開く
   */
  //------------------------------------------------------------------
  virtual void Open( void );
  
  //------------------------------------------------------------------
  /**
   * @brief   閉じる
   */
  //------------------------------------------------------------------
  virtual void Close( void );

public:
  //------------------------------------------------------------------
  /**
   * @brief   グループインデックスの設定
   *
   * @param   index   グループインデックス
   */
  //------------------------------------------------------------------
  void SetGroupIndex( u8 index ) { m_GroupIndex = index; }

  //------------------------------------------------------------------
  /**
   * @brief   グループインデックスの設定
   *
   * @return  グループインデックス
   */
  //------------------------------------------------------------------
  //u8 GetGroupIndex( void ) const { return (m_GroupIndex); }  // 外部から呼ばなくしたのでコメントアウト。
  
  //------------------------------------------------------------------
  /**
   * @brief   引き取るボタンの有効設定
   *
   * @param   enable    有効フラグ
   */
  //------------------------------------------------------------------
  void SetDecideBtnEnable( bool enable ) { m_DecideBtnEnable = enable; }
  
private:
  //------------------------------------------------------------------
  /**
   * @brief   セットアップ
   */
  //------------------------------------------------------------------
  void Setup( void );

public:
  //------------------------------------------------------------------
  /**
   * @brief   状態の更新
   */
  //------------------------------------------------------------------
  void UpdateGimState( void );

  //------------------------------------------------------------------
  /**
   * @brief   セット回数の更新
   */
  //------------------------------------------------------------------
  void UpdateSetCount( void );

  //------------------------------------------------------------------
  /**
   * @brief   終了時間の更新
   */
  //------------------------------------------------------------------
  void UpdateEndTime( void );

private:
  //------------------------------------------------------------------
  /**
   * @brief   決定ボタンの更新
   */
  //------------------------------------------------------------------
  void UpdateDecideBtn( void );

  //------------------------------------------------------------------
  /**
   * @brief   決定処理
   */
  //------------------------------------------------------------------
  void DecideFunc( void );

  //------------------------------------------------------------------
  /**
   * @brief   終了時間のセット
   */
  //------------------------------------------------------------------
  void SetEndTime( void );

  //------------------------------------------------------------------
  /**
   * @brief   トレーニング時間の取得
   *
   * @param   １セット分のトレーニング時間
   */
  //------------------------------------------------------------------
  u32 GetTrainingTime( void );


private:   //!< app::ui::UIInputListener
  //------------------------------------------------------------------
  /**
   * @brief   ペインアクション通知用リスナ
   *
   * @param   paneID
   */
  //------------------------------------------------------------------
  virtual app::ui::UIInputListener::ListenerResult OnLayoutPaneEvent( const u32 paneID );

private:   //!< app::tool::ButtonManager
  //------------------------------------------------------------------
  /**
   * @brief   ボタンの個別セットアップ
   *
   * @param   btnMan    ボタンマネージャ
   */
  //------------------------------------------------------------------
  virtual void SetupButton( app::tool::ButtonManager* btnMan );

  //------------------------------------------------------------------
  /**
   * @brief   ボタンの有効設定
   */
  //------------------------------------------------------------------
  void SetButtonEnable( void );


private:
  ResortCounter*          m_pNumCounter;

private:
  PokePaneData            m_PokePane[GIM_GROUP_POKE_MAX];

  TimeParam               m_EndTime;

private:
  u8      m_Seq;

  u8      m_GroupIndex;

  u8      m_GimState;

  u8      m_PrevGimState;

  bool    m_DecideBtnEnable;

private:
  gfl2::lyt::LytTextBox*  m_pHeaderMain;

  gfl2::lyt::LytTextBox*  m_pCourseDesc;

  gfl2::lyt::LytTextBox*  m_pSelBtnText;

  gfl2::lyt::LytTextBox*  m_pRemainingCount;

  gfl2::lyt::LytTextBox*  m_pTimeTitle;

  gfl2::lyt::LytTextBox*  m_pTimeText;

  gfl2::lyt::LytPane*     m_pTakebackBtn;

  gfl2::lyt::LytPane*     m_pContinueBtn;
};

GFL_NAMESPACE_END(Resort)
GFL_NAMESPACE_END(App)

#endif // __RESORT_LOWER_GIM_DRAW_H__
