#if !defined( __APP_STATUS_DRAW_LISTENER_H_INCLUDED__ )
#define __APP_STATUS_DRAW_LISTENER_H_INCLUDED__
#pragma once
//======================================================================
/**
 * @file    StatusDrawListener.h
 * @date    2015/11/27 16:57:15
 * @author  fukushima_yuya
 * @brief   ポケモンステータス：描画リスナー
 * @par Copyright
 * (C)1995-2015 GAME FREAK inc. All Rights Reserved.
 */
//======================================================================

// gflib2
#include <macro/include/gfl2_Macros.h>
#include <types/include/gfl2_Typedef.h>


GFL_NAMESPACE_BEGIN(App)
GFL_NAMESPACE_BEGIN(Status)

//! @brief    画面モード
enum {
  DISP_MODE_STATUS,           //!< 通常
  DISP_MODE_WAZA,             //!< 技説明表示
  DISP_MODE_MEMO,             //!< リボン説明表示
  DISP_MODE_WAZA_EXCHANGE,    //!< 技入れ替え
  DISP_MODE_MSG_WND,          //!< メッセージウィンドウ
  DISP_MODE_NUM,
};

//! @brief    タブモード
enum {
  TAB_MODE_WAZA = 0,
  TAB_MODE_MEMO,
  TAB_MODE_EGG,
  TAB_MODE_NUM,
};


//------------------------------------------------------------------------------
// @brief   描画リスナー
//------------------------------------------------------------------------------
class StatusDrawListener
{
public:
  //------------------------------------------------------------------
  /**
   * @brief   画面の終了通知
   */
  //------------------------------------------------------------------
  virtual void EndStatus( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   キャンセルボタンの押下
   */
  //------------------------------------------------------------------
  virtual void OnCancelBtn( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   決定ボタンの押下
   */
  //------------------------------------------------------------------
  virtual void OnDecideBtn( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   閉じる
   */
  //------------------------------------------------------------------
  virtual void StatusClose( void ) { ; }


  //------------------------------------------------------------------
  /**
   * @brief   画面モードの取得
   *
   * @param   mode    画面モード
   */
  //------------------------------------------------------------------
  virtual void SetDispMode( u8 mode ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   画面モードの取得
   *
   * @return  画面モード
   */
  //------------------------------------------------------------------
  virtual u8 GetDispMode( void ) { return DISP_MODE_NUM; }

  //------------------------------------------------------------------
  /**
   * @brief   タブモードの取得
   *
   * @return  タブモード
   */
  //------------------------------------------------------------------
  virtual u8 GetTabMode( void ) { return TAB_MODE_NUM; }

  //------------------------------------------------------------------
  /**
   * @brief   レーダーチャートの表示モード切替
   */
  //------------------------------------------------------------------
  virtual void ChangeRadarChartMode( void ) { ; }


  //==================================================================
  // @brief   タブ関連
  //==================================================================

  //------------------------------------------------------------------
  /**
   * @brief   技タブへの変更
   *
   * @return  "true  = 変更成功"
   * @return  "false = 変更失敗"
   */
  //------------------------------------------------------------------
  virtual bool ChangeWazaTab( void ) { return true; }

  //------------------------------------------------------------------
  /**
   * @brief   メモタブへの変更
   *
   * @return  "true  = 変更成功"
   * @return  "false = 変更失敗"
   */
  //------------------------------------------------------------------
  virtual bool ChangeMemoTab( void ) { return true; }

  //------------------------------------------------------------------
  /**
   * @brief   タマゴ用メモタブへの変更
   *
   * @return  "true  = 変更成功"
   * @return  "false = 変更失敗"
   */
  //------------------------------------------------------------------
  virtual bool ChangeEggMemoTab( void ) { return true; }


  //==================================================================
  // @brief   ポケモンパラメータ関連
  //==================================================================

  //------------------------------------------------------------------
  /**
   * @brief   次のポケモンへ
   *
   * @note    十字キー切り替え
   */
  //------------------------------------------------------------------
  virtual void NextPokemon( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   前のポケモンへ
   *
   * @note    十字キー切り替え
   */
  //------------------------------------------------------------------
  virtual void PrevPokemon( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   指定したポケモンに変更
   *
   * @note    手持ち表示でボールをタッチした時のみ使用
   */
  //------------------------------------------------------------------
  virtual void SetPokemon( u32 index ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   ポケモンパラメータの更新
   */
  //------------------------------------------------------------------
  virtual void UpdatePokeParam( void ) { ; }


  //==================================================================
  // @brief   ボックスマーク変更画面関連
  //==================================================================

  //------------------------------------------------------------------
  /**
   * @brief   ボックスマーク変更画面のオープン
   *
   * @param   updateProhibition   更新禁止フラグ
   */
  //------------------------------------------------------------------
  virtual void OpenBoxMark( bool updateProhibition ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   ボックスマーク変更画面のクローズ
   */
  //------------------------------------------------------------------
  virtual void CloseBoxMark( void ) { ; }


  //==================================================================
  // @brief   技説明画面関連
  //==================================================================

  //------------------------------------------------------------------
  /**
   * @brief   技説明画面のオープン
   *
   * @param   index   インデックス
   *
   * @return  "true  = 開いた"
   * @return  "false = それ以外"
   */
  //------------------------------------------------------------------
  virtual bool OpenWazaExplain( u32 index ) { return true; }

  //------------------------------------------------------------------
  /**
   * @brief   技説明画面のクローズ
   */
  //------------------------------------------------------------------
  virtual void CloseWazaExplain( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   表示する技を変更
   *
   * @param   wazaNo    技No
   */
  //------------------------------------------------------------------
  virtual void SetWazaExplain( u32 wazaNo ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   技説明が閉じきったかどうか
   *
   * @param   wazaNo    技No
   */
  //------------------------------------------------------------------
  virtual bool IsWazaExplainClosed( void ) { return true; }


  //==================================================================
  // @brief   リボン説明画面関連
  //==================================================================

  //------------------------------------------------------------------
  /**
   * @brief   リボン説明画面のオープン
   *
   * @param   ribbonID    リボンID
   */
  //------------------------------------------------------------------
  virtual bool OpenRibbonExplain( u32 ribbonID ) { return true; }

  //------------------------------------------------------------------
  /**
   * @brief   リボン説明画面のクローズ
   */
  //------------------------------------------------------------------
  virtual void CloseRibbonExplain( void ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   表示するリボンを変更
   *
   * @param   ribbonID    リボンID
   */
  //------------------------------------------------------------------
  virtual void SetRibbonExplain( u32 ribbonID ) { ; }

  //------------------------------------------------------------------
  /**
   * @brief   リボンを未所持かどうか
   *
   * @param   none    true = 未所持、false = それ以外
   */
  //------------------------------------------------------------------
  virtual void SetRibbonNone( bool none ) { ; }
};

GFL_NAMESPACE_END(Status)
GFL_NAMESPACE_END(App)

#endif // __APP_STATUS_DRAW_LISTENER_H_INCLUDED__
