//============================================================================================
/**
 * @file    Misc.h
 * @brief   未分類セーブデータ
 * @author  taya
 * @date    2012.03.13
 *
 * namespace  savedata::
 *
 *
 * 大きな分類項目でくくれない、未分類のこまかなセーブデータを保存するためのワークです
 *
 * @fix BTS:828 SCameraSaveDataを追加
 */
//============================================================================================
#if !defined( MISC_SAVE_H_INCLUDED )
#define MISC_SAVE_H_INCLUDED

#pragma once

#include <util/include/gfl2_std_string.h>

#include "SaveDataInterface.h"
#include "niji_reference_files/script/FieldPawnTypes.h"

// ライブラリ
#if defined(GF_PLATFORM_CTR)
//#include <nn.h>
#include <nn/cfg.h>
#endif // GF_PLATFORM_CTR

GFL_NAMESPACE_BEGIN(Savedata)

//
// 前方宣言
//
//class SecretBaseDeliveryBaseExtendDataAccessor;

class Misc
  : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(Misc); //コピーコンストラクタ＋代入禁止


public:
  //--------------------------------------------------------------------------------------------
  /// 定数
  //--------------------------------------------------------------------------------------------
  enum {
    MY_GOLD_MAX = 9999999,    ///< 所持金MAX
    MY_GOLD_KETA = 7,         ///< 所持金の桁数 
    BADGE_COUNT_MAX = 8,      ///< バッジ個数最大値
    BP_MAX = 9999,            ///< 所持BP最大値
    BP_KETA = 4,              ///< 所持BPの桁数
    FC_KETA = 7,              ///< 所持フェスコインの桁数
    SELL_PRICE_KETA = 8,      ///< 売値の桁数　※合計が7桁を超える場合があるため表示用に追加
/*
    TUTORIAL_ENCOUNT_STEP = 3,  ///< チュートリアルエンカウントの歩数
*/
  };
  
/*
  enum {
    HIKYO_NOT = 0,  ///< 秘境でない
    HIKYO_MY,       ///< 自分の秘境
    HIKYO_OTHER,    ///< 他人の秘境
  };
*/

public:
  //----------------------------------------------------------
  /**
   * @brief 持っている金額を取得する
   * @param my    自分状態保持ワークへのポインタ
   * @return  u32   持っている金額
   */
  //----------------------------------------------------------
  u32 GetGold(void) const;
  //----------------------------------------------------------
  /**
   * @brief   お金を設定する
   * @param gold  セットする金額
   * @return  u32   現在の手持ち金額
   */
  //----------------------------------------------------------
  u32 SetGold(u32 gold);
  //----------------------------------------------------------
  /**
   * @brief  お金を増やす
   * @param add   加える金額
   * @return  u32   現在の手持ち金額
   */
  //----------------------------------------------------------
  u32 AddGold(u32 add);
  //----------------------------------------------------------
  /**
   * @brief    お金を減らす
   * @param sub   引き出す金額
   * @return  u32   現在の手持ち金額
   */
  //----------------------------------------------------------
  u32 SubGold(u32 sub);

  //-----------------------------------------------------------------------------
  /**
   * @brief   学習装置の起動フラグをセット
   *
   * @param   flag  true = ON, false = OFF
   */
  //-----------------------------------------------------------------------------
  void SetGakusyuusoutiFlag( bool flag );

  //-----------------------------------------------------------------------------
  /**
   * @brief   学習装置の起動フラグを取得
   *
   * @retval  true  = ON
   * @retval  false = OFF
   */
  //-----------------------------------------------------------------------------
  bool GetGakusyuusoutiFlag( void ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   バッジ個数を設定する
   *
   * @param   count   設定する個数
   */
  //--------------------------------------------------------------------------------------------
  void  SetBadgeCount( u8 count );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   バッジ個数を取得する
   */
  //--------------------------------------------------------------------------------------------
  u8  GetBadgeCount( void ) const;

  //----------------------------------------------------------
  /**
   * @brief   敗北時に失う金額を計算する
   * @param   level_max   手持ちポケモンで最大のレベル
   * @return  u32         失う金額
   */
  //----------------------------------------------------------
  u32 CalcPenaltyMoney( u32 level_max ) const;

	//--------------------------------------------------------------------------------------------
  /**
   * @brief   メガ進化を見たか？のフラグ列を取得する
   * @param[out]  dst     メガ進化フラグをコピーする領域へのポインタ
   */
	//--------------------------------------------------------------------------------------------
  void GetMegaSeeFlags( u8 * dst ) const;

	//--------------------------------------------------------------------------------------------
  /**
   * @brief   メガ進化を見たか？のフラグ列をセットする
   * @param[in] src     取得するメガ進化フラグ列へのポインタ
   */
	//--------------------------------------------------------------------------------------------
  void SetMegaSeeFlag( const u8 * src );

	//--------------------------------------------------------------------------------------------
  /**
   * @brief メガ進化を見たか？フラグ列のサイズ（バイト単位）
   */
	//--------------------------------------------------------------------------------------------
  enum { MEGA_SEE_AREA_SIZE = 8 };

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   文字入力画面のパラメータをセット
   *
   * @param   mode  入力モード
   */
  //--------------------------------------------------------------------------------------------
  void SetStrInputParam( u32 mode );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   文字入力画面のパラメータを取得
   *
   * @param   mode  入力モード
   */
  //--------------------------------------------------------------------------------------------
  void GetStrInputParam( u32 * mode ) const;

	//--------------------------------------------------------------------------------------------
  /**
   * @brief イベントリストでイベントを見たか？フラグ列のサイズ（バイト単位）
   */
	//--------------------------------------------------------------------------------------------
  enum {
    EVENT_LIST_MAX  = 256,    //!< サブイベント数
    EVENT_LIST_BIT_MAX = EVENT_LIST_MAX*8,  //!< eventlist_first_checkのビット数


    EVENT_LIST_TYPE_MAIN = 0, //!< メイン
    EVENT_LIST_TYPE_SUB,      //!< サブ
    EVENT_LIST_TYPE_MAX,      //!< リストのタイプ

    EVENT_LIST_TARGET_EVENT_NONE = 0xFFFFFFFF,    //!< ターゲットイベントなし
  };

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   イベントリストの既読チェック
   *
   * @param   index   イベントのインデックス
   */
  //--------------------------------------------------------------------------------------------
  bool IsEventFirstCheck( u32 index ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   イベントリストの既読更新
   *
   * @param   index   イベントのインデックス
   */
  //--------------------------------------------------------------------------------------------
  void SetEventFirstCheck( u32 index );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   イベントリストのターゲットイベントIDの取得
   *
   * @param   listType    リストの種類(メイン or サブ)
   *
   * @return  ターゲットイベントID
   *
   * @note    マップに表示するイベントアイコンに対応するイベントIDを取得
   *          EVENT_LIST_TARGET_EVENT_NONE ならアイコンを非表示
   */
  //--------------------------------------------------------------------------------------------
  u32 GetTargetEventID( u32 listType ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   イベントリストのターゲットイベントIDの設定
   *
   * @param   listType    リストの種類(メイン or サブ)
   * @param   eventID     イベントID
   *
   * @note    マップに表示するイベントアイコンに対応するイベントIDを設定
   *          表示しない場合は EVENT_LIST_TARGET_EVENT_NONE を設定
   */
  //--------------------------------------------------------------------------------------------
  void SetTargetEventID( u32 listType, u32 eventID = EVENT_LIST_TARGET_EVENT_NONE );

  //--------------------------------------------------------------------------
  /**
   *	@brief  バトルレコーダー初回チュートリアルフラグ設定
   */
  //--------------------------------------------------------------------------
  void SetBattleVideoPlayerTutorial( void );

  //--------------------------------------------------------------------------
  /**
   *	@brief  バトルレコーダー初回チュートリアルフラグ取得
   * 
   * @return true:チュートリアル終了した false:していない
   */
  //--------------------------------------------------------------------------
  bool GetBattleVideoPlayerTutorial( void ) const;

    //--------------------------------------------------------------------------
  /**
   *	@brief  かわいがり初回チュートリアルフラグ設定
   */
  //--------------------------------------------------------------------------
  void SetKawaigariTutorial( void );

  //--------------------------------------------------------------------------
  /**
   *	@brief  かわいがり初回チュートリアルフラグ取得
   * 
   * @return true:チュートリアル終了した false:していない
   */
  //--------------------------------------------------------------------------
  bool GetKawaigariTutorial( void ) const;

  //----------------------------------------------------------
  /**
   * @brief     BPを取得する
   * @return    BP
   */
  //----------------------------------------------------------
  u32 GetBP(void) const;
  //----------------------------------------------------------
  /**
   * @brief     BPをセットする
   * @param[in]   value
   * @return    BP
   */
  //----------------------------------------------------------
  u32 SetBP(u32 value);

  //----------------------------------------------------------
  /**
   * @brief   トレーナーパスのスタンプをセット
   * @param   id  スタンプのフラグID 
   */
  //----------------------------------------------------------
  void SetTrainerPassStamp( TrainerPassStampID id );

  //----------------------------------------------------------
  /**
   * @brief   トレーナーパスのスタンプをリセット
   * @param   id  スタンプのフラグID TrainerPassStampID
   */
  //----------------------------------------------------------
  void ResetTrainerPassStamp( TrainerPassStampID id );

  //----------------------------------------------------------
  /**
   * @brief   トレーナーパスのスタンプを持っているか
   * @param   id  スタンプのフラグID TrainerPassStampID
   * @retval  true  = 持っている
   * @retval  false = それ以外
   */
  //----------------------------------------------------------
  bool IsTrainerPassStamp( TrainerPassStampID id ) const;

  //----------------------------------------------------------
  /**
   * @brief 島めぐりスタンプの数
   */
  //----------------------------------------------------------
  static const u32 ISLAND_STAMP_NUM = 5;  

  //----------------------------------------------------------
  /**
   * @brief 島めぐりスタンプの所持数を取得する
   * @retval [0, ISLAND_STAMP_NUM]
   */
  //----------------------------------------------------------
  u32 GetIslandStampNum( void ) const;

  //----------------------------------------------------------
  /**
   * @brief   バトルのボール投げの習得関連
   */
  //----------------------------------------------------------
  enum
  {
    BALL_THROW_TYPE_NUM = 9,
  };
  void SetBallThrowLearn( u8 type );
  void ResetBallThrowLearn(void);
  bool CheckBallThrowLearn( u8 type )const;

  //----------------------------------------------------------
  /**
   * @brief   最後のkawaigariからの経過日数関連
   */
  //----------------------------------------------------------
  void AddKawaigariPastDays(u8 day = 1 );
  void ResetKawaigariPastDays(void);
  u8   GetKawaigariPastDays(void)const;

  //----------------------------------------------------------
  /**
   * @brief   アローラ時間のフェイクタイム設定
   */
  //----------------------------------------------------------
  void SetAlolaOnlyFakeTime( b8 flag, u8 hour, u8 minute, u8 second );
  inline b32 IsAlolaOnlyFakeTime() const { return m_data.alola_only_fake_time; }
  inline u8 GetAlolaOnlyFakeTimeHour() const { return m_data.alola_only_fake_time_hour; }
  inline u8 GetAlolaOnlyFakeTimeMinute() const { return m_data.alola_only_fake_time_minute; }
  inline u8 GetAlolaOnlyFakeTimeSecond() const { return m_data.alola_only_fake_time_second; }


  //--------------------------------------------------------------------------
  /**
   * @brief   リアル地域ポケモン情報を取得する
   * @return  u32 リアル地域ポケモンのフォルム値
   *
   * @note    実際にはフォルムはu8あれば十分だが、仕様修正に備えてu32確保している
   */
  //--------------------------------------------------------------------------
  u32 GetRealRegionFormNo( void ) const;

  //--------------------------------------------------------------------------
  /**
   * @brief   リアル地域ポケモン情報を設定する
   * @param[in]  u32 リアル地域ポケモンのフォルム値
   */
  //--------------------------------------------------------------------------
  void SetRealRegionFormNo( u32 value );

  /**
   * @brief   カメラデータ操作
   */
  void SetFieldCameraData( u32 areaId, u32 areaDataNo, u32 oldAreaData );
  void GetFieldCameraData( u32* areaId, u32* pAreaDataNo, u32* pOldAreaData ) const;

  //--------------------------------------------------------------------------
  /**
  * @brief   100%レア、100%ノーマルのポケモンとエンカウントするようにするトリガー（momijiひずみ世界のみで使用する）
  */
  //--------------------------------------------------------------------------
  void SetMustRareEncTrigger(void);
  void ResetMustRareEncTrigger(void);
  bool CheckMustRareEncTrigger(void) const;

  //--------------------------------------------------------------------------
  /**
  * @brief   マンタインサーフレコードのセットと取得
  */
  //--------------------------------------------------------------------------
  void SetSurfRecord(u32 corse_id, u32 score);
  u32 GetSurfRecord(u32 corse_id);

  //-----------------------------------------------------------------------------
  /**
   * @brief   ロトポン関連のアイテムを確認したか
   *
   * @retval  true  = 確認した
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool IsBagRotoponItemEnable(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   ロトポン関連のアイテムを確認済みにする
   */
  //-----------------------------------------------------------------------------
  void SetBagRotoponItemEnable(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   マイアルバムでUGCのメッセージを表示したか
   *
   * @retval  true  = 表示した
   * @retval  false = それ以外
   */
  //-----------------------------------------------------------------------------
  bool IsMyAlbumUGCEnable(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief   マイアルバムのUGCのメッセージを表示済みにする
   */
  //-----------------------------------------------------------------------------
  void SetMyAlbumUGCEnable(void);



  void SetShoki3PersonalRnd(s32 value){ m_data.shoki3_personal_rand = value; } 
  s32 GetShoki3PersonalRnd(void){ return m_data.shoki3_personal_rand; }

#if 0
  //-----------------------------------------------------------------------------
  /**
   *	@brief  ライバル名を取得
   *
   *	@param	gfl::str::StrBuf* dst [OUT]文字列格納先
   */
  //-----------------------------------------------------------------------------
  void GetRivalName( gfl::str::StrBuf* dst ) const;
  //-----------------------------------------------------------------------------
  /**
   *	@brief  ライバル名を設定
   *
   *	@param	gfl::str::StrBuf* src [IN]代入する文字列
   */
  //-----------------------------------------------------------------------------
  void SetRivalName( gfl::str::StrBuf* src );
  
  //-----------------------------------------------------------------------------
  /**
   *	@brief  ライバル名を設定
   *
   *	@param[in]	pTempHeap   作業用ヒープ
   *	@param[in]  sex         主人公の性別
   */
  //-----------------------------------------------------------------------------
  void SetRivalName( gfl::heap::HeapBase * pTempHeap, u8 sex );

  //-----------------------------------------------------------------------------
  /**
   *	@brief  バッジフラグの取得
   *
   *	@param	u16 badge_id バッジID
   */
  //-----------------------------------------------------------------------------
  bool GetBadgeFlag( u16 badge_id ) const;
  
  //-----------------------------------------------------------------------------
  /**
   *	@brief  バッジフラグの設定
   *
   *	@param	u16 badge_id バッジID
   */
  //-----------------------------------------------------------------------------
  void SetBadgeFlag( u16 badge_id );

  //-----------------------------------------------------------------------------
  /**
   *	@brief  バッジフラグのリセット
   *
   *	@param	u16 badge_id バッジID
   */
  //-----------------------------------------------------------------------------
  void ResetBadgeFlag( u16 badge_id );

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パソコン画面でリーグ制覇の壁紙追加メッセージを読んだかのフラグを設定
	 *
	 * @param		none
	 *
	 * @return  none
	 */
	//--------------------------------------------------------------------------------------------
	void SetPCMsgFlagLeague(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パソコン画面でチャンピオン撃破の壁紙追加メッセージを読んだかのフラグを設定
	 *
	 * @param		none
	 *
	 * @return  none
	 */
	//--------------------------------------------------------------------------------------------
	void SetPCMsgFlagChampion(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パソコン画面でリーグ制覇の壁紙追加メッセージを読んだかのフラグを取得
	 *
	 * @param		none
	 *
	 * @retval	"true = みた"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool GetPCMsgFlagLeague(void) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		パソコン画面でチャンピオン撃破の壁紙追加メッセージを読んだかのフラグを取得
	 *
	 * @param		none
	 *
	 * @retval	"true = みた"
	 * @retval	"false = それ以外"
	 */
	//--------------------------------------------------------------------------------------------
	bool GetPCMsgFlagChampion(void) const;

	//--------------------------------------------------------------------------------------------
  /**
   * @brief   3Dカメラのモード設定
   * @param[in] isExpert
   *
   * @note  true  エキスパートモード / false イージーモード
   */
	//--------------------------------------------------------------------------------------------
  void Set3DCameraMode( bool isExpert );

	//--------------------------------------------------------------------------------------------
  /**
   * @brief   3Dカメラのモード取得
   *
   * @retval  true  エキスパートモード
   * @retval  false イージーモード
   */
	//--------------------------------------------------------------------------------------------
  bool Get3DCameraModeIsExpert( void ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン用ランダムシード取得
	 * @return	  シード値
	 */
	//--------------------------------------------------------------------------------------------
  u64 GetPokemonCreateRandomSeed(void) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		  ポケモン用ランダムシード設定
   * @param[in]	 シード値
	 */
	//--------------------------------------------------------------------------------------------
  void SetPokemonCreateRandomSeed(u64 seed);

	//--------------------------------------------------------------------------------------------
  /**
   * @brief 下画面チュートリアル既読フラグON
   *
   * @param mode  モード（下画面チュートリアルのモード） app::sub_screen_tutorial::Mode
   */
	//--------------------------------------------------------------------------------------------
  void SetSubScreenTutorialWatched( u32 mode );
	//--------------------------------------------------------------------------------------------
  /**
   * @brief 下画面チュートリアル既読フラグ
   *
   * @param mode  モード（下画面チュートリアルのモード） app::sub_screen_tutorial::Mode
   *
   * @return true見た false見ていない
   */
	//--------------------------------------------------------------------------------------------
  bool IsSubScreenTutorialWatched( u32 mode ) const;

	//--------------------------------------------------------------------------------------------
  /**
   * @brief カメラエリアセーブデータを設定
   */
	//--------------------------------------------------------------------------------------------
  void SetCameraSaveData( const field::SCameraSaveData& data );

	//--------------------------------------------------------------------------------------------
  /**
   * @brief カメラエリアセーブデータを取得
   */
	//--------------------------------------------------------------------------------------------
  const field::SCameraSaveData& GetCameraSaveData( void ) const;

  //--------------------------------------------------------------------------
  /**
   *	@brief  Oパワーアプリ初回チュートリアルフラグ設定
   */
  //--------------------------------------------------------------------------
  void SetApowerTutorial( void );

  //--------------------------------------------------------------------------
  /**
   *	@brief  Oパワーアプリ初回チュートリアルフラグ取得
   * 
   * @return true:チュートリアル終了した false:していない
   */
  //--------------------------------------------------------------------------
  bool GetApowerTutorial( void ) const;

  /* ------------------------------------------------------------------------- */
  /**
   * @brief 隠しアイテムの復活フラグを取得
   *
   * @return true:復活する, false:復活しない
   */
  /* ------------------------------------------------------------------------- */
  bool GetHideItemRevivalFlag( void ) const;

  /* ------------------------------------------------------------------------- */
  /**
   * @brief 隠しアイテムの復活フラグを設定
   *
   * @param is_revival true:復活する, false:復活しない
   */
  /* ------------------------------------------------------------------------- */
  void SetHideItemRevivalFlag( bool is_revival );


  /* ------------------------------------------------------------------------- */
  /**
   * @brief おおぞらをとぶ ショート再生フラグ
   */
  /* ------------------------------------------------------------------------- */
  bool GetSkyTripShortFlag( void ) const;
  
    /* ------------------------------------------------------------------------- */
  /**
   * @brief おおぞらをとぶ ショート再生フラグ
   *
   * @param is_short true:ショートデモ, false:ロングデモ
   */
  /* ------------------------------------------------------------------------- */
  void SetSkyTripShortFlag( bool is_short );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief 秘境フラグを取得
   *
   * @return hikyo NIKYO_NOT など
   */
  /* ------------------------------------------------------------------------- */
  u32 GetHikyo( void ) const;

  /* ------------------------------------------------------------------------- */
  /**
   * @brief 秘境フラグをセット
   *
   * @param hikyo HIKYO_NOT など
   */
  /* ------------------------------------------------------------------------- */
  void SetHikyo( u32 hikyo );

  //-----------------------------------------------------------------------------
  /**
   *	@brief  時をかける賞状ポケモンのMONSNOとニックネームを取得
   *	@param	gfl::str::StrBuf*  dst [OUT]  ニックネーム文字列格納先
   *	@param  pml::Sex*          sex [OUT]  性別格納先
   *	@retval MONSNO_NULLを返すときはdstには何も代入しない。
   */
  //-----------------------------------------------------------------------------
  MonsNo GetTokikakePoke( gfl::str::StrBuf* dst, pml::Sex* sex ) const;
  //-----------------------------------------------------------------------------
  /**
   *	@brief  時をかける賞状ポケモンのMONSNOとニックネームを設定
   *	@param	MonsNo            monsNo [IN]  1以上386デオキシス以下でなくても有効。進化するので。
   *	@param	gfl::str::StrBuf  src    [IN]  代入するニックネーム文字列。
   *	@param  pml::Sex          sex    [IN]  性別。
   *	@retval 正常に設定できたときはtrueを返す。無効なMONSNOのときは設定せずfalseを返す。
   */
  //-----------------------------------------------------------------------------
  bool SetTokikakePoke( MonsNo monsNo, const gfl::str::StrBuf& src, pml::Sex sex );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief エンカウントチュートリアルフラグを設定
   *
   * @param is_enable [IN] true:有効, false:無効
   */
  /* ------------------------------------------------------------------------- */
  void SetEncountTutorialEndFlag( bool is_enable );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief エンカウントチュートリアルフラグを取得
   *
   * @param true:有効, false:無効
   */
  /* ------------------------------------------------------------------------- */
  bool GetEncountTutorialEndFlag( void ) const;
  
  /* ------------------------------------------------------------------------- */
  /**
   * @brief エンカウントチュートリアル用カウンタを設定 (※2 bit)
   *
   * @param count カウント数
   */
  /* ------------------------------------------------------------------------- */
  void SetEncountTutorialCount( u32 count );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief エンカウントチュートリアル用カウンタを取得
   *
   * @return カウント数
   */
  /* ------------------------------------------------------------------------- */
  u32 GetEncountTutorialCount( void ) const;

  /**
   * @brief 配信ひみつきち用拡張データへのアクセッサーを取得
   *
   * @return アクセッサー型
   */
  const SecretBaseDeliveryBaseExtendDataAccessor GetSecretBaseDeliveryBaseExtendDataAccessor( void ) const;

  /**
   * @brief 配信ひみつきち用拡張データへのアクセッサーを取得
   *
   * @return アクセッサー型
   */
  SecretBaseDeliveryBaseExtendDataAccessor GetSecretBaseDeliveryBaseExtendDataAccessor( void );
#endif


  //--------------------------------------------------------------------------------------------
  /**
   * @brief   Miscセーブデータのコピー　（JoinFestaマップジャンプ対応用）
   */
  //--------------------------------------------------------------------------------------------
  void CopyData( const Misc& data, b32 joinFestaReturn );

  ///////////////////////////////////////////////////
  //
  // 以下、アクセスしないこと
  //
  ///////////////////////////////////////////////////
public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  Misc(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  virtual ~Misc();

  //-----------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy(pData, reinterpret_cast<void*>(&m_data), sizeof(Data)); }
  //-----------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&m_data); }
  //-----------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   * @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return sizeof(Data); }

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap );



private:
  /// 実際にセーブするデータ
  struct Data
  {
    u32 badge;                      ///< ジムバッジBIT

    u32 gold;                       ///< 手持ちのおこずかい

    u32 gakusyuusoutiFlag:1;              ///< 学習装置のスイッチOn/Offフラグ(Onなら起動中)
    u32 strinputMode:1;                   ///< 文字入力画面：入力モード
    u32 rotopon_item_enable:1;            ///< バッグ画面でロトポンのアイテムを認識した = 1
    u32 battle_video_player_tutorial:1;   ///< バトルレコーダー初回チュートリアル
    u32 trainer_pass_stamp:15;            ///< トレーナーパススタンプ
    u32 kawaigari_tutorial:1; /// 可愛がりの最初起動した時のチュートリアルを見たフラグ
    u32 myalbum_ugc_enable:1;             ///< マイアルバムでUGCのメッセージを表示した = 1
    u32 _dmy0:11;

    u8  eventlist_first_check[EVENT_LIST_MAX];          ///< イベントリストの既読フラグ
    u32 eventlist_target_event[EVENT_LIST_TYPE_MAX];    ///< イベントリストのターゲットしているイベントID

    u8  mega_see_flag[ MEGA_SEE_AREA_SIZE ];            ///< メガ進化を見たか？フラグ(8バイト)

    u32 BattlePoint;                      ///< バトルポイント(4バイト)

    u8 alola_only_fake_time;              ///< アローラオンリーフェイクタイム
    u8 alola_only_fake_time_hour;         ///< 時間
    u8 alola_only_fake_time_minute;       ///< 分
    u8 kawaigariPastDay;                  ///<最後に可愛がってからの経過日数

    // フィールドカメラ関連
    u32 fieldCameraAreaId;                ///< 保存したエリアID
    u32 fieldCameraAreaDataNo;            ///< 今回のカメラエリアデータ番号
    u32 fieldCameraAreaOldDataNo;         ///< 前回のカメラエリアデータ番号

    u32 realRegionFormWork;               ///< 2013.03.20 リアル地域ポケモン用ワーク(4バイト)
    
    u8 alola_only_fake_time_second;       ///< アローラオンリーフェイクタイム 秒　NMCat[983]アローラ時間固定イベントで時間が戻ることがある
    u8 must_rare_encont;                  ///< １００％レアをエンカウントさせるフラグ（ルナソルダイブ用）0:１００％ノーマル　１：１００％レア
    u8 padding[2];

    u32 SurfRecord[Field::COURSE_NUM];                    ///< マンタインサーフレコード
    u32 shoki3_personal_rand;                             ///< 初期3体の個性乱数
    u32 reserved[ 46 - 2 ];               ///< 拡張用予備領域( 204バイト - 0バイト )、この領域込みで512バイトになるように調節しています。追加した分だけマイナスしてください。  


#if 0
    u64 pokemonCreateRandomSeed;    ///<※この値は直接使用してはいけません 乱数Seed記憶値
    ///ライバルの名前
    gfl::str::STRCODE rivalname[ gamesystem::STRLEN_PERSON_NAME + gamesystem::EOM_LEN ];  // 26(13*2)バイト
    u8  padding[2];

		u32	pcLeagueMsgFlag:1;			    ///< パソコン画面：リーグ制覇の壁紙追加メッセージを読んだか
		u32	pcChampionMsgFlag:1;		    ///< パソコン画面：チャンピオン撃破の壁紙追加メッセージを読んだか


    u32 b3DcameraMode:1;            ///< 3Dカメラのモード指定（EASY/EXPERT)
		u32 sub_screen_tutorial_pss_watched:1;  ///< 下画面チュートリアル既に見た（PSS）
		u32 sub_screen_tutorial_kawaigari_watched:1;  ///< 下画面チュートリアル既に見た（かわいがり）
		u32 sub_screen_tutorial_sparring_watched:1;  ///< 下画面チュートリアル既に見た（スパーリング）
    u32 apower_tutorial:1;          ///< Oパワーアプリ初回チュートリアル

    u32 hideitem_revival:1; ///< 隠しアイテムが復活するか？

    u32 skytrip_short:1; ///< おおぞらをとぶ ロング再生フラグ(1回目はロング・2回目以降はショート)
    u32 hikyo:2; ///< 秘境情報 0:秘境でない, 1:自分の秘境, 2:他人の秘境

		u32 tv_navi_init:1;		///< PMN: TVナビの初回起動フラグ

    u32 _dmy0:9;           // 空き
    u32 tokikakeSex:2;     ///< 時をかける賞状ポケモン性別(pml::SEX_MALE, pml::SEX_FEMALE, pml::SEX_UNKNOWN)

    u32 encount_tutorial_end:1;
    u32 encount_tutorial_count:2;

		u32 _dmy:3;

    field::SCameraSaveData cameraAreaSave;  ///< フィールドカメラエリアセーブデータ(8バイト)
    gfl::str::STRCODE tokikakeNickname[ gamesystem::STRLEN_POKEMON_NAME + gamesystem::EOM_LEN ];  ///< 時をかける賞状ポケモンニックネーム26バイト((12+1)文字*2バイト)
    u8                padding2[2];

  
    field::secretBase::DELIVERY_BASE_EXTEND_DATA  secretBaseDeliveryBaseExtendData;     ///< 配信ひみつきち用拡張データ、8バイト

    u16 tokikakeMonsNo;        ///< 時をかける賞状ポケモンMONSNO。0のときはナシ。(進化するので1以上386デオキシス以下の値とは限らない)
    u16 _dmy1;                 // 空き
    
    u32 reserved[ 64 - 16 ];         ///< 拡張用予備領域（256 - 64バイト）
#endif
  };

private:
  Data m_data;  // セーブするデータ

private:
  //--------------------------------------------------------------------------
  /**
   * @brief 地域ポケモンのフォルムを決定する
   * @param pHeap
   * @return  u8    フォルムナンバー
   */
  //--------------------------------------------------------------------------
  u8 DecideRealRegion( gfl2::heap::HeapBase * pHeap );
};


GFL_NAMESPACE_END(Savedata)

#endif  // MISC_SAVE_H_INCLUDED
