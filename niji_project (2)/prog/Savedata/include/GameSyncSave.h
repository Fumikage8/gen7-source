//============================================================================================
/**
 * @file    GameSyncSave.h
 * @brief   ゲームシンク用セーブデータ
 * @author  hisanao_suzuki
 */
//============================================================================================

#ifndef __SV_GAME_SYNC_H__
#define __SV_GAME_SYNC_H__

#pragma once

#include <macro/include/gfl2_macros.h>
#include <types/include/gfl2_Typedef.h>
#include <util/include/gfl2_std_string.h>
#include "heap/include/gfl2_heap_manager.h"
#include "Savedata/include/SaveDataInterface.h"

namespace Savedata
{

class GameSyncSave : public SaveDataInterface
{
public:
  static const u32 STOCK_ITEM_MAX = 100;  //!< ストックできるアイテムスロット数

  enum
  {
    LOCK_MINUTES = 60,
  };

  typedef struct
  {
    //------------------------------
    u16   m_isUploaded         : 1;   //!< サーバにセーブデータをアップロードした、していないを制御。
    u16   m_isNoRegistPGL      : 1;   //!< PGLに未登録状態でゲームシンクをして失敗した際にON。アラート閲覧後にOFF。
    u16   m_isEnableAutoSync   : 1;   //!< オートシンクON、OFF。初期値ON。
    u16   m_isSendingMileage   : 1;   //!< マイレージを送る、送らないを制御。初期値は送る。

    u16   m_isDispedGuide1     : 1;   //!< ゲームシンクとは？の説明を全て読んだ
    u16   m_isDispedGuide2     : 1;   //!< ゲームシンクのじゅんびを全て読んだ
    u16   m_isDispedGuide3     : 1;   //!< ゲームシンクのやりかたを全て読んだ
    u16   m_isDispedFirstGuide : 1;   //!< ゲームシンク画面の初回テキストを制御。初回テキストをもたらON。

    u16   m_isUpdateWallPaper  : 1;   //!< 壁紙をダウンロードして更新した際に１、更新していない場合は0にする。
    u16   m_isExecuteGameSync  : 1;   //!< ゲームシンクを行ったか
    u16   m_isGameSyncFirstConnected : 1; //!< ゲームシンク初回接続フラグ

    u16   m_padding            : 5;   //!< padding
    //------------------------------
    //
    u8    m_reserved[88];             //!< 予約
  }ConfigInfo;

  /**
  * @brief PGL登録情報
  */
  typedef struct
  {
    bool  m_isSigned;     //!< 「大好きクラブ」登録済みフラグ
    u8    m_reserved[3];  //!< 予約
  }PglRegistInfo;

  /**
   * @brief 壁紙情報
   */
  typedef struct
  {
    u16   m_registId;   //!< 登録されている壁紙ID
    u16   m_reserved;   //!< 予約
  }WallPaperInfo;

  /**
   * @brief ストックアイテム情報
   */
  typedef struct
  {
    u16   m_id;         //!< 道具ID
    u16   m_num;        //!< 個数
  }StockItem;

  /**
   * @brief アイテムスロット情報
   */
  typedef struct
  {
    StockItem m_itemSlot[STOCK_ITEM_MAX]; //!< アイテムスロット
    u32       m_itemNum;                  //!< 使用スロット数
  }StockItemInfo;

  /**
   * @brief ゲームシンク実施タイムスタンプ
   */
  typedef struct
  {
    u8 m_year;        //!< 年(0-99)
    u8 m_month;       //!< 月
    u8 m_day;         //!< 日
    u8 m_hour;        //!< 時
    u8 m_minute;      //!< 分
    u8 m_reserved[3]; //!< 予約
  }DateInfo;

  /**
   * @brief ゲームシンク情報
   */
  typedef struct
  {
    PglRegistInfo m_registInf;  //!< PGL登録情報
    StockItemInfo m_itemInf;    //!< アイテムスロット情報
    WallPaperInfo m_wallInf;    //!< 壁紙情報
    DateInfo      m_dateInf;    //!< ゲームシンク実施タイムスタンプ
    ConfigInfo    m_config;     //!< コンフィグ情報
  }GameSyncSaveData;

public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  GameSyncSave(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  ~GameSyncSave(void);

  //=============================================================================
  //@brief アイテムスロットの空き数を取得
  //=============================================================================
  u8 GetFreeItemSlotNum(void) const;


  //=============================================================================
  //@brief オートゲームシンクが有効かどうか
  //=============================================================================
  bool IsAutoGameSyncSaveEnable(void) const;

  //=============================================================================
  //@brief マイレージ送るが有効かどうか
  //=============================================================================
  bool IsSendingMileageEnable(void) const;

  //=============================================================================
  /**
   * @brief PGL登録済みかどうか
   * @return true:登録済み false:未登録
   */
  //=============================================================================
  bool IsSignedPGL(void) const;

  //=============================================================================
  /**
   * @brief PGL登録済みを変更
   * @param[in] true:登録済み false:未登録
   */
  //=============================================================================
  void SetSignedPGL( bool isSigned );

  //=============================================================================
  /**
   * @brief PGLから受信済みのアイテム情報数を取得
   */
  //=============================================================================
  u8 GetItemNum(void) const;

  //=============================================================================
  /**
   * @brief PGLから受信済みのアイテム情報を取得
   *
   * @param index データインデックス(0 ～ (GetItem()-1))
   */
  //=============================================================================
  const StockItem& GetItem(u8 index) const;

  //=============================================================================
  /**
   * @brief PGLから受信済みのアイテム情報を削除
   *
   * @param index データインデックス(0 ～ (GetItem()-1))
   */
  //=============================================================================
  void DeleteItem(u8 index);

  //=============================================================================
  /**
   * @brief PGLから受け取ったアイテムを登録
   *
   * @param itemId  スロットに格納するアイテムのID
   * @param itemNum スロットに格納するアイテムの数
   */
  //=============================================================================
  bool PushItem( u16 itemId, u16 itemNum );

  //=============================================================================
  //@brief アイテムを削除（巻き戻し用）
  //=============================================================================
  void PopItem(void);

  //=============================================================================
  /**
   * @brief ゲームシンクした時間を更新
   */
  //=============================================================================
  void UpdateDateTime( void );

  //=============================================================================
  /**
   * @brief ゲームシンクした時間をコミット
   */
  //=============================================================================
  void CommitDateTime( void );

  //=============================================================================
  /**
   * @brief ゲームシンクした時間を巻き戻し
   */
  //=============================================================================
  void RollbackDateTime( void );

  //! @brief 初回説明フラグの設定
  void SetDispedFirstGuideFlag( bool bFlag );

  //=============================================================================
  //@brief PGL未登録でオートゲームシンクを試みた時のアラートフラグ取得
  //=============================================================================
  bool GetIsNoRegistPGL(void) const;
  //=============================================================================
  //@brief PGL未登録でオートゲームシンクを試みた時のアラートフラグ設定
  //=============================================================================
  void SetIsNoRegistPGL( bool flag );

  //=============================================================================
  //@brief ゲームシンクアプリでゲームシンクIDを作成したかどうか
  //=============================================================================
  bool GetIsCreateGameSyncSaveID(void) const;

  //=============================================================================
  //@brief ゲームシンク初回接続フラグ取得
  //=============================================================================
  bool GetGameSyncFirstConnected(void) const;
  //=============================================================================
  //@brief ゲームシンク初回接続フラグ設定
  //=============================================================================
  void SetGameSyncFirstConnected( bool flag );

  //=============================================================================
  //@brief 5xxエラーが発生したのでゲームシンクを1時間ロックする（大会時はロックしない）
  //=============================================================================
  void LockGameSyncSaveFor5xxError(void);

  //=============================================================================
  //@brief 5xxエラーによるロック確認（1時間経過していたら解除）
  //=============================================================================
  bool CheckLockGameSyncSaveFor5xxError(void);

#if PM_DEBUG
  s64* DbgGet5xxErrorTime(void){ return &m_lockStartMinutes; };
#endif
  //=============================================================================
  //@brief SaveDataInterface実装
  //=============================================================================
public:

  /**
  *  @brief    データの先頭ポインタを得る関数
  * @return   先頭のポインタ
  */
  virtual void* GetData(void);

  const GameSyncSaveData& GetGameSyncSaveData() const { return m_data; }
  GameSyncSaveData& GetGameSyncSaveDataDirect() { return m_data; }

  DateInfo& GetGameSyncDateTime() { return m_data.m_dateInf; }

  /**
  *  @brief    データサイズ
  *  @retval   バイト
  */
  virtual size_t GetDataSize(void);
  /**
  * @brief セーブデータのクリア
  * @param heap　クリアに使用するテンポラリヒープ
  */
  virtual void Clear( gfl2::heap::HeapBase * heap );


  //=============================================================================
  //@brief 以下private
  //=============================================================================
private:
  GameSyncSaveData m_data;  //データ本体

  DateInfo      m_backupDateInf;//日付バックアップ

  s64 m_lockStartMinutes;//ロック開始時間（分）
};


} //namespace savedata


#endif // __SV_GAME_SYNC_H__
