//==============================================================================
/**
 * @file	  BattleInstSave.h
 * @brief		バトル施設セーブデータ（バトルツリー/ロイヤル）
 */
// =============================================================================
#pragma once
#if !defined( __BATTLE_INST_SAVE_H__ )
#define	__BATTLE_INST_SAVE_H__

#include <macro/include/gfl2_macros.h>
#include <types/include/gfl2_Typedef.h>
#include <util/include/gfl2_std_string.h>

#include "Savedata/include/SaveDataInterface.h"
#include "niji_reference_files/script/FieldPawnTypes.h"  //BattleTreeType

/**
 * @brief		バトルツリー/バトルロイヤルセーブデータ
 */
GFL_NAMESPACE_BEGIN(Savedata)

class BattleInstSave : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(BattleInstSave);

public:

  static const u16 SCOUT_TRAINER_MAX    = 50;     ///<スカウトトレーナー最大数

public:

  //--------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 */
	//--------------------------------------------------------------------------
  BattleInstSave( void );
  
  //--------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//--------------------------------------------------------------------------
  virtual ~BattleInstSave( void );

public:
	// SaveDataInterface実装
  //--------------------------------------------------------------------------
	/**
	 * @brief		読み込んだデータをセットする関数
	 * @param		pData		先頭のポインタ
	 */
	//--------------------------------------------------------------------------
  virtual void SetData(void* data);
  //--------------------------------------------------------------------------
	/**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
	 */
	//--------------------------------------------------------------------------
  virtual void* GetData(void);
  //--------------------------------------------------------------------------
	/**
   * @brief    データサイズ
   * @retval   バイト
	 */
	//--------------------------------------------------------------------------
  virtual size_t GetDataSize(void);
  //--------------------------------------------------------------------------
	/**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
	 */
	//--------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap );

  //--------------------------------------------------------------------------
  /**
   * @brief 連勝数インクリメント
   * @param type
   * @param super
   */
  //--------------------------------------------------------------------------
  void AddWinCount( const BattleTreeType type, const BattleTreeRank rank  );

  //--------------------------------------------------------------------------
  /**
   * @brief 連勝数クリア
   * @param type
   * @param super
   */
  //--------------------------------------------------------------------------
  void ClearWinCount( const BattleTreeType type, const BattleTreeRank rank  );

  //--------------------------------------------------------------------------
  /**
   * @brief 連勝数セット
   * @param type
   * @param super
   * @param val
   */
  //--------------------------------------------------------------------------
  void SetWinCount( const BattleTreeType type, const BattleTreeRank rank, u16 val );

  //--------------------------------------------------------------------------
  /**
  * @brief 連勝数セット(ご褒美用)
  * @param val
  */
  //--------------------------------------------------------------------------
  void SetPrizeWinCount( u16 val );

  //--------------------------------------------------------------------------
  /**
  * @brief 連勝数(ご褒美用)を取得
  */
  //--------------------------------------------------------------------------
  u16 GetPrizeWinCount();

  //--------------------------------------------------------------------------
  /**
  * @brief 連勝数クリア(ご褒美用)
  */
  //--------------------------------------------------------------------------
  void ResetPrizeWinCount();

  //--------------------------------------------------------------------------
  /**
   * @brief 連勝数取得
   * @param type
   * @param super
   * @retval 連勝数
   */
  //--------------------------------------------------------------------------
  u16 GetWinCount( const BattleTreeType type, const BattleTreeRank rank );

  //--------------------------------------------------------------------------
  /**
   * @brief 最大連勝数取得
   * @param type
   * @param super
   * @retval 連勝数
   */
  //--------------------------------------------------------------------------
  u16 GetMaxWinCount( const BattleTreeType type, const BattleTreeRank rank );

  //--------------------------------------------------------------------------
  /**
   * @brief 戦闘ＢＧＭのセット
   * @param bgm
   */
  //--------------------------------------------------------------------------
  void SetBattleBgm( int bgm );

  //--------------------------------------------------------------------------
  /**
   * @brief 戦闘ＢＧＭを設定なしにする
   */
  //--------------------------------------------------------------------------
  void ResetBattleBgm( void );

  //--------------------------------------------------------------------------
  /**
   * @brief 戦闘ＢＧＭの取得
   * @retval int
   */
  //--------------------------------------------------------------------------
  int GetBattleBgm( void );

  //--------------------------------------------------------------------------
  /**
   * @brief 戦闘ＢＧＭが設定されているか？
   * @retval bool
   */
  //--------------------------------------------------------------------------
  bool IsSetBattleBgm( void );

  //--------------------------------------------------------------------------
  /**
   * @brief 挑戦ランクとバトルタイプのセット
   * @param type
   * @param rank
   */
  //--------------------------------------------------------------------------
  void SetBattleTypeAndRank( const BattleTreeType type, const BattleTreeRank rank );

  //--------------------------------------------------------------------------
  /**
   * @brief 挑戦ランクとバトルタイプのリセット
   */
  //--------------------------------------------------------------------------
  void ResetBattleTypeAndRank( void );

  //--------------------------------------------------------------------------
  /**
   * @brief 挑戦ランク取得
   * @retval Super
   */
  //--------------------------------------------------------------------------
  BattleTreeRank GetRank( void );

  //--------------------------------------------------------------------------
  /**
   * @brief 挑戦バトルタイプ取得
   * @retval type
   */
  //--------------------------------------------------------------------------
  BattleTreeType GetBattleType( void );

  //--------------------------------------------------------------------------
  /**
   * @brief カウンター最大値取得
   * @retval int
   */
  //--------------------------------------------------------------------------
  int GetCountMax( void );

  //--------------------------------------------------------------------------
  /**
   * @brief スカウトトレーナー情報が一杯か？
   */
  //--------------------------------------------------------------------------
  bool IsFullScoutTrainerData() const ;

  //--------------------------------------------------------------------------
  /**
   * @brief 登録されているスカウトトレーナー情報の数を取得
   */
  //--------------------------------------------------------------------------
  u32 GetRegistScoutTrainerDataNum() const ;

  //--------------------------------------------------------------------------
  /**
   * @brief スカウトトレーナー情報の追加
   * @param trainerID トレーナーデータID
   * @param pokeID1 手持ちポケモン1匹目のデータID
   * @param pokeID2 手持ちポケモン2匹目のデータID
   * @param tokuseiIndex1 手持ちポケモン1匹目の特性インデックス
   * @param tokuseiIndex2 手持ちポケモン2匹目の特性インデックス
   * @note このメソッドで指しているIDはバトルタワーデータメーカーのIDです
   */
  //--------------------------------------------------------------------------
  void AddScoutTrainerData( u16 trainerID, u16 pokeID1, u16 pokeID2,u8 tokuseiIndex1, u8 tokuseiIndex2 );

  //--------------------------------------------------------------------------
  /**
   * @brief スカウトトレーナー情報のセット
   * @param index どこにセットするか
   * @param trainerID トレーナーデータID
   * @param pokeID1 手持ちポケモン1匹目のデータID
   * @param pokeID2 手持ちポケモン2匹目のデータID
   * @param tokuseiIndex1 手持ちポケモン1匹目の特性インデックス
   * @param tokuseiIndex2 手持ちポケモン2匹目の特性インデックス
   * @note このメソッドで指しているIDはバトルタワーデータメーカーのIDです
   */
  //--------------------------------------------------------------------------
  void SetScoutTrainerData( u32 index, u16 trainerID, u16 pokeID1, u16 pokeID2, u8 tokuseiIndex1, u8 tokuseiIndex2 );

  //--------------------------------------------------------------------------
  /**
   * @brief スカウトトレーナー情報の取得
   * @param index どこから取得するか
   * @param pOutTrainerID トレーナーデータID格納先
   * @param pOutPokeID1 手持ちポケモン1匹目のデータID格納先
   * @param pOutPokeID2 手持ちポケモン2匹目のデータID格納先
   * @note このメソッドで指しているIDはバトルタワーデータメーカーのIDです
   */
  //--------------------------------------------------------------------------
  void GetScoutTrainerData( u32 index, u16* pOutTrainerID, u16* pOutPokeID1, u16* pOutPokeID2, u8* pOutTokuseiIndex1, u8* pOutTokuseiIndex2) const ;

  //--------------------------------------------------------------------------
  /**
   * @brief スカウトトレーナーが存在しているか
   * @param trainerID トレーナーID
   * @retval true 存在している
   * @retval true 存在していない
   */
  //--------------------------------------------------------------------------
  bool IsExistScoutTrainerData( u16 trainerID ) const ;

  //--------------------------------------------------------------------------
  /**
  * @brief 特定のインデックスのスカウトトレーナーをクリア
  * @param index　スカウトトレーナーのインデックス
  */
  //--------------------------------------------------------------------------
  void ClearScoutTrainerIndex( int index );

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤルマスターランク連勝数加算
   */
  //--------------------------------------------------------------------------
  void AddWinCountRoyal();

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤルマスターランク連勝数クリア
   */
  //--------------------------------------------------------------------------
  void ClearWinCountRoyal();

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤルマスターランク連勝数取得
   */
  //--------------------------------------------------------------------------
  u16 GetWinCountRoyal() const ;

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤルマスターランク連勝数が最大か
   * @retval true 最大(=ボス戦)
   * @retval false それ以外
   */
  //--------------------------------------------------------------------------
  bool IsMaxWinCountRoyal() const ;

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤルランク解放
   * @note マスターランクまで解放されていた場合は何もしない
   */
  //--------------------------------------------------------------------------
  void ReleaseNextRankRoyal();

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤル解放ランク取得
   * @return 解放されているランク。スーパーまで解放されていればスーパーが返る
   */
  //--------------------------------------------------------------------------
  BattleRoyalRank GetReleaseRankRoyal() const ;

  // デバッグ用途
#if PM_DEBUG

  //--------------------------------------------------------------------------
  /**
   * @brief 最大連勝数セット
   * @param type
   * @param super
   * @param val
   */
  //--------------------------------------------------------------------------
  void SetWinCountMax( const BattleTreeType type, const BattleTreeRank rank, u16 val );

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤル連勝数セット
   */
  //--------------------------------------------------------------------------
  void SetWinCountRoyal( u16 count);

  //--------------------------------------------------------------------------
  /**
   * @brief ロイヤル解放ランクセット
   */
  //--------------------------------------------------------------------------
  void SetReleaseRankRoyal( BattleRoyalRank rank);

#endif

private:

  static const u16 MAX_COUNT            = 9999;   ///<連勝数カウンタ最大値
  static const int NO_BTL_BGM           = -1;     ///<戦闘ＢＧＭ指定なし
  static const u16 SCOUT_TRAINER_ERROR  = 0xFFFF; ///< スカウトトレーナー関連の無効値

  //-------------------------------------
  ///	セーブデータ
  //=====================================
	struct BATTLE_INST_DATA
	{
    u16   TreeSingleWin[BATTLE_TREE_RANK_MAX];      ///<ツリーシングル連勝数
    u16   TreeSingleWinMax[BATTLE_TREE_RANK_MAX];   ///<ツリーシングル最大連勝数
    u16   TreeDoubleWin[BATTLE_TREE_RANK_MAX];      ///<ツリーダブル連勝数
    u16   TreeDoubleWinMax[BATTLE_TREE_RANK_MAX];   ///<ツリーダブル最大連勝数
    u16   TreeMultiWin[BATTLE_TREE_RANK_MAX];       ///<ツリーマルチ連勝数
    u16   TreeMultiWinMax[BATTLE_TREE_RANK_MAX];    ///<ツリーマルチ最大連勝数
    int   TreeBattleBgm;                            ///<ツリー通信マルチ・ボス戦　以外での戦闘ＢＧＭ指定
    BattleTreeType  TreeType;                       ///<ツリー挑戦中戦闘タイプ
    BattleTreeRank  TreeRank;                       ///<ツリー挑戦中ランク
    s32             RoyalRank;                      ///<バトルロイヤル　シングルランク
    u16   ScoutTrainerID[SCOUT_TRAINER_MAX];        ///<スカウトトレーナーのデータID
    u16   ScoutTrainerPokeID1[SCOUT_TRAINER_MAX];   ///<スカウトトレーナーのポケモンデータID(1匹目)
    u16   ScoutTrainerPokeID2[SCOUT_TRAINER_MAX];   ///<スカウトトレーナーのポケモンデータID(2匹目)
    u16   RoyalWinCount;                            ///<ロイヤルマスターランク連勝回数  
    u16   TreePrizeWinCount;                         ///<ツリー連勝数 
    u8    ScoutTrainerTokuseiIndex1[SCOUT_TRAINER_MAX];   ///<スカウトトレーナーのポケモン特性インデックス(1匹目)
    u8    ScoutTrainerTokuseiIndex2[SCOUT_TRAINER_MAX];   ///<スカウトトレーナーのポケモン特性インデックス(2匹目)
    u8    data[ 68 ];                              ///padding
	};

	BATTLE_INST_DATA m_data; ///<データ本体

  //--------------------------------------------------------------------------
	/**
	 * @brief		勝利数加算
	 * @param		now     現在勝利数格納バッファへのポインタ
   * @param   max     最大勝利数格納バッファへのポインタ
	 */
	//--------------------------------------------------------------------------
  void IncWin( u16 *now, u16 *max );

  //--------------------------------------------------------------------------
	/**
	 * @brief		勝利数設定
	 * @param		now     現在勝利数格納バッファへのポインタ
   * @param   max     最大勝利数格納バッファへのポインタ
   * @param   val     設定勝利数
	 */
	//--------------------------------------------------------------------------
  void SetWin( u16 *now, u16 *max, u16 val );

  //--------------------------------------------------------------------------
	/**
	 * @brief スカウトトレーナーの空き番号取得
   * @return 空き番号
   * @note SCOUT_TRAINER_MAXが返ってきたら空きがない
	 */
	//--------------------------------------------------------------------------
  u16 GetEmptyScoutTrainerIndex() const ;

  //--------------------------------------------------------------------------
  /**
  * @brief 指定したトレーナーが登録されているか検索
  * @param trainerID トレーナーデータID
  * @return 登録されているトレーナーのインデックス(登録されていない場合はSCOUT_TRAINER_MAX)
  */
  //--------------------------------------------------------------------------
  u16 SearchRegistTrainerIndex( u16 trainerID ) const;
};


GFL_NAMESPACE_END(Savedata)

#endif	/* __BATTLE_INST_SAVE_H__ */

