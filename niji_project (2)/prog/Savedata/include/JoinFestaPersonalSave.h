//===================================================================
/**
 * @file    JoinFestaPersonalSave.h
 * @brief   JoinFestaプレイヤーデータ管理
 * @author  ichiraku_katsuhiko
 * @date    2015/10/12
 */
//===================================================================
#ifndef __JOIN_FESTA_PLAYER_SAVE_H__
#define __JOIN_FESTA_PLAYER_SAVE_H__

#include <macro/include/gfl2_Macros.h>
#include <gfx/include/gfl2_types.h>

#include "SaveDataInterface.h"

// JoinFestaPlayer
#include "NetStatic/NetAppLib/include/JoinFesta/JoinFestaPersonalData.h"

GFL_NAMESPACE_BEGIN(Savedata)

/**
 *  @brief JoinFestaプレイヤーデータ管理クラス
 */
class JoinFestaPersonalSave : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(JoinFestaPersonalSave); //コピーコンストラクタ＋代入禁止
public:

  static const u32   LIST_MAX = 50;   //!< １リストに登録できる最大件数

public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief    コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  JoinFestaPersonalSave( void );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief    デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  virtual ~JoinFestaPersonalSave(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   JoinFestaフレンドキーをもとに、パーソナルコアデータを取得する
   *
   * @param[in]   friendKey 検索対象となるJoinFestaフレンドキー
   *
   * @return  検出したパーソナルコアデータへのポインタ。データが存在しない場合はNULLを返却
   */
  //--------------------------------------------------------------------------------------------
  const NetAppLib::JoinFesta::JoinFestaPersonalData::CoreData * GetPersonalCoreData( const JoinFestaFriendKey& friendKey );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   インデックスをもとにパーソナルコアデータを取得する
   *
   * @param[in]   index 取得するデータインデックス。GetNum()未満の正数値を指定すること
   *
   * @return  検出したパーソナルコアデータへのポインタ。データが存在しない場合はNULLを返却
   */
  //--------------------------------------------------------------------------------------------
  const NetAppLib::JoinFesta::JoinFestaPersonalData::CoreData* GetPersonalCoreData( u32 index );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   パーソナルデータを更新・追加する
   *
   * @param[in]   personal   登録対象のパーソナルデータ
   *
   * @return  更新されたならtrueを、一致するフレンドキーが見つからなかった際はfalseを返却
   */
  //--------------------------------------------------------------------------------------------
  bool UpdatePersonalData( NetAppLib::JoinFesta::JoinFestaPersonalData* personal );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   パーソナルデータを追加する
   *
   * @param[in]   personal   追加対象のパーソナルデータ
   *
   * @note    空きがない場合は、最も古い情報を削除する
   *
   * @return  追加できたならtrueを、データがすでに存在する場合はfalseを返却
   */
  //--------------------------------------------------------------------------------------------
  bool AddPersonalData( const NetAppLib::JoinFesta::JoinFestaPersonalData* personal );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   パーソナルデータリストを取得する
   *
   * @return  パーソナルデータリストへのポインタ
   */
  //--------------------------------------------------------------------------------------------
  const NetAppLib::JoinFesta::JoinFestaPersonalData::CoreData*  GetPersonalDataList( void );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief  JoinFestaフレンドキーをもとに、パーソナルデータをリストから削除する
   *
   * @param[in]  friendKey 削除対象となるJoinFestaフレンドキー
   *
   * @return  削除が行われたならtrueを返却する
   */
  //--------------------------------------------------------------------------------------------
  bool RemovePersonalData( const JoinFestaFriendKey& friendKey );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   現状に合わせてUpdateJoinFestaPersonalDataListを更新する
   */
  //--------------------------------------------------------------------------------------------
  void UpdateJoinFestaPersonalDataList( void );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   パーソナルデータが未登録か判定
   *
   * @return  1件もパーソナルデータが未登録ならtrueを返却する
   */
  //--------------------------------------------------------------------------------------------
  bool IsEmpty( void ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   パーソナルデータが制限値に達しているか判定
   *
   * @return  パーソナルデータ登録件数が制限値に達しているならtrueを返却
   */
  //--------------------------------------------------------------------------------------------
  bool IsFull( void ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   お気に入り登録されているパーソナルデータ件数を取得する
   *
   * @return  登録パーソナルデータ件数
   */
  //--------------------------------------------------------------------------------------------
  u32 GetNum( void ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   全パーソナルデータリストをリセットする
   */
  //--------------------------------------------------------------------------------------------
  void Reset( void );

public:
  //------------------------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   *
   * @param[in]  pData   先頭のポインタ
   */
  //------------------------------------------------------------------------------------------
  virtual void SetData( void* pData );

  //------------------------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   *
   * @return  先頭のポインタ
   */
  //------------------------------------------------------------------------------------------
  virtual void * GetData(void);

  //------------------------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   *
   * @return  バイト
   */
  //------------------------------------------------------------------------------------------
  virtual size_t GetDataSize(void);

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param[in] heap クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { Reset(); };

protected:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief   登録済みコアデータからJoinFestaフレンドキーを取得する
   *
   * @param[in]   index     登録コアデータインデックス
   * @param[in]   friendKey 取得したJoinFestaフレンドキー格納先領域へのポインタ
   *
   * @return  取得に成功したならtrueを返却する
   */
  //--------------------------------------------------------------------------------------------
  bool GetJoinFestaFriendKey( u32 index, JoinFestaFriendKey *friendKey );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief  JoinFestaフレンドキーをもとに、パーソナルデータを取得する[内部クラス用]
   *
   * @param[in] friendKey 検索対象となるJoinFestaフレンドキー
   *
   * @return  検出したパーソナルデータへのポインタ。データが存在しない場合はNULLを返却
   */
  //--------------------------------------------------------------------------------------------
  NetAppLib::JoinFesta::JoinFestaPersonalData::CoreData* GetPersonalCoreDataPrivate( const JoinFestaFriendKey& friendKey );

private:
  /**
   * @brief セーブデータコア
   * 計26800byte
   */
  typedef struct
  {
    NetAppLib::JoinFesta::JoinFestaPersonalData::CoreData  m_personal[ LIST_MAX ];  //!< パーソナルデータ実体
    u32                                                    m_registNum;             //!< 登録数
    u32                                                    padding;
  }SaveBody;

private:
  SaveBody  m_body;  // セーブデータ
};  // class JoinFestaPersonalSave

GFL_NAMESPACE_END(Savedata)


#endif // __JOIN_FESTA_PLAYER_SAVE_H__
