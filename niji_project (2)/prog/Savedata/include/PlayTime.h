//============================================================================================
/**
 * @file	PlayTime.h
 * @brief	プレイ時間
 * @date	2011.12.16
 */
//============================================================================================
#if !defined( PLAY_TIME_H_INCLUDED )
#define PLAY_TIME_H_INCLUDED

#pragma once

// gflib2
#include <util/include/gfl2_std_string.h>
// niji
#include "SaveDataInterface.h"


GFL_NAMESPACE_BEGIN(Savedata)

// 前方宣言
class GameTime;

//============================================================================================
//============================================================================================
//---------------------------------------------------------------------------
/**
 * @brief プレイ時間の不完全型定義
 */
//---------------------------------------------------------------------------
///セーブした日時
typedef struct
{
  u32 save_year:12;     // セーブ時の日付（年）
  u32 save_month:4;     // セーブ時の日付（月）
  u32 save_day:5;       // セーブ時の日付（日）
  u32 save_hour:5;      // セーブ時の時間（時）
  u32 save_minute:6;    // セーブ時の時間（分）
}PLAYTIME_SAVE_DATE;

typedef struct
{
  u16 hour;            // プレイ時間（時）
  u8  minute;          // プレイ時間（分）
  u8  second;          // プレイ時間（秒）

  PLAYTIME_SAVE_DATE  save_date;  // セーブ時の日時
}PLAYTIME;

class PlayTime : public SaveDataInterface
{
public:
  //---------------------------------------------------------------------------
  //		プレイ時間の最大値の定義
  //---------------------------------------------------------------------------
  static const u32 PTIME_HOUR_MAX		= (999);			///<プレイ時間（時）の最大値
  static const u32 PTIME_MINUTE_MAX	= (59);			///<プレイ時間（分）の最大値
  static const u32 PTIME_SECOND_MAX	= (59);			///<プレイ時間（秒）の最大値


private:
  static const u32 PLAYTIME_HOUR_MAX   = 999;
  static const u32 PLAYTIME_MINUTE_MAX = 59;
  static const u32 PLAYTIME_SECOND_MAX = 59;

private:
  PLAYTIME           m_playTime;
  PLAYTIME_SAVE_DATE m_saveTimeBackup;

public:
          PlayTime( void );
  virtual ~PlayTime( void );

public:
  //-----------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy(pData, reinterpret_cast<void*>(&m_playTime), sizeof(PLAYTIME)); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&m_playTime); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   * @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return sizeof(PLAYTIME); };

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { Initialize(); };
public:
  void Initialize( void );
  void CountUp( u32 value );
  //
  u16  GetPlayHour( void ) const;
  u8   GetPlayMinute( void ) const;
  u8   GetPlaySecond( void ) const;

  //---------------------------------------------------------------------------
  /**
   * @brief プレイ時間のセット
   * @param hour  時間
   * @param min   分
   * @param sec   秒
   */
  //---------------------------------------------------------------------------
  void SetPlayTime( u32 hour, u32 min, u32 sec);

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした日付と時間を設定
   * @return  none
   */
  //---------------------------------------------------------------------------
  void SetSaveTime( Savedata::GameTime* gameTime );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブ実行時間の退避
   */
  //---------------------------------------------------------------------------
  void PushSaveTime( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブ実行時間の復帰
   */
  //---------------------------------------------------------------------------
  void PopSaveTime( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした年を取得
   * @param   ptime   プレイ時間へのポインタ
   * @return  年
   */
  //---------------------------------------------------------------------------
  u32  GetSaveYear( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした月を取得
   * @param   ptime   プレイ時間へのポインタ
   * @return  月
   */
  //---------------------------------------------------------------------------
  u32  GetSaveMonth( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした日を取得
   * @param   ptime   プレイ時間へのポインタ
   * @return  日
   */
  //---------------------------------------------------------------------------
  u32  GetSaveDay( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした時を取得
   * @param   ptime   プレイ時間へのポインタ
   * @return  時
   */
  //---------------------------------------------------------------------------
  u32  GetSaveHour( void );

  //---------------------------------------------------------------------------
  /**
   * @brief   セーブした分を取得
   * @param   ptime   プレイ時間へのポインタ
   * @return  分
   */
  //---------------------------------------------------------------------------
  u32  GetSaveMinute( void );
};


GFL_NAMESPACE_END(Savedata)

#endif  // PLAY_TIME_H_INCLUDED
