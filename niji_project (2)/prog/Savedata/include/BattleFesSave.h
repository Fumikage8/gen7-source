//===================================================================
/**
* @file    BattleFesSave.h
* @brief   バトルフェスサークルのデータ管理
* @author  munakata_kai
* @date    2016/11/15
*/
//===================================================================
#ifndef __BATTLE_FES_SAVE_H__
#define __BATTLE_FES_SAVE_H__

#include <macro/include/gfl2_Macros.h>
#include "System/include/GameStrLen.h"
#include "SaveDataInterface.h"
#include "Savedata/include/MyStatus.h"
// pokelib
#include <pml/include/pmlib.h>

#include "Field/FieldStatic/include/BattleFes/BattleFesDefine.h"

GFL_NAMESPACE_BEGIN(Savedata)

/**
*  @brief バトルフェスサークルのデータ管理クラス
*/
class BattleFesSave : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(BattleFesSave); //コピーコンストラクタ＋代入禁止
public:

  // 232byte
  typedef struct
  {
    u8	pokemonCoreParam[pml::pokepara::CoreParam::DATASIZE];	//!< ポケモンデータ
  }RentalPokemonData;

  //--------------------------------------------------------------------------------------------
  /**
  * @brief    コンストラクタ
  */
  //--------------------------------------------------------------------------------------------
  BattleFesSave();

  //--------------------------------------------------------------------------------------------
  /**
  * @brief    デストラクタ
  */
  //--------------------------------------------------------------------------------------------
  virtual ~BattleFesSave();

  //--------------------------------------------------------------------------------------------
  /**
  * @brief   全データをリセットする
  */
  //--------------------------------------------------------------------------------------------
  void Reset();

  //------------------------------------------------------------------------------------------
  /**
  * @brief    読み込んだデータをセットする関数
  *
  * @param[in]  pData   先頭のポインタ
  */
  //------------------------------------------------------------------------------------------
  virtual void SetData(void* pData);

  //------------------------------------------------------------------------------------------
  /**
  * @brief    データの先頭ポインタを得る関数
  *
  * @return  先頭のポインタ
  */
  //------------------------------------------------------------------------------------------
  virtual void* GetData();

  //------------------------------------------------------------------------------------------
  /**
  * @brief    データサイズ
  *
  * @return  バイト
  */
  //------------------------------------------------------------------------------------------
  virtual size_t GetDataSize();

  //-----------------------------------------------------------------------------
  /**
  * @brief セーブデータのクリア
  * @param[in] heap クリアに使用するテンポラリヒープ
  */
  //-----------------------------------------------------------------------------
  virtual void Clear(gfl2::heap::HeapBase* heap);

  //--------------------------------------------------------------------------
  /**
  * @brief バトルセーブデータのクリア
  * @param heap　クリアに使用するテンポラリヒープ
  */
  //--------------------------------------------------------------------------
  void ClearBattleData(gfl2::heap::HeapBase * heap);

  //-----------------------------------------------------------------------------
  /**
  * @brief   自分のレンタルポケモンデータの初期化
  * @param[in] heap  ヒープ
  */
  //-----------------------------------------------------------------------------
  void InitRentalPokemonData(gfl2::heap::HeapBase* heap);

  //-----------------------------------------------------------------------------
  /**
  * @brief   自分のレンタルポケモンデータの登録 CoreParamをセット
  * @param[in] pml::pokepara::CoreParam* cp
  */
  //-----------------------------------------------------------------------------
  void SetRentalPokemonData(const pml::pokepara::CoreParam* cp);

  //-----------------------------------------------------------------------------
  /**
  * @brief   自分のレンタルポケモンデータの取得 CoreParamを取得
  * @param[in] pml::pokepara::CoreParam* cp 取得場所
  * @param[out] bool 取得成功/取得失敗
  */
  //-----------------------------------------------------------------------------
  bool GetRentalPokemonData(pml::pokepara::CoreParam* cp) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 自分のレンタルポケモンデータの有無
  * @param[out] bool true : データ有り false : データ無し
  */
  //-----------------------------------------------------------------------------
  bool IsExistRentalPokemonData() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリーデータの登録
  * @param[in] 
  */
  //-----------------------------------------------------------------------------
  void SetBattleTreeData(const BattleFes::BATTLE_TREE_DATA battle_tree_data);

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリーＩＤの登録
  * @param[in] u16 battle_tree_id
  */
  //-----------------------------------------------------------------------------
  void SetBattleTreeID(const u16 battle_tree_id);

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリーＩＤの取得
  * @param[out] u16 battle_tree_id　0は異常
  */
  //-----------------------------------------------------------------------------
  u16 GetBattleTreeID() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリー性別の登録
  * @param[in] u8
  */
  //-----------------------------------------------------------------------------
  void SetBattleTreeSex(const u8 battle_tree_sex);

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリー性別の取得
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetBattleTreeSex() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリー特性の登録
  * @param[in] u8
  */
  //-----------------------------------------------------------------------------
  void SetBattleTreeTokusei(const u8 battle_tree_tokusei);

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリー特性の取得
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetBattleTreeTokusei() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   バトルツリー関連データ削除
  */
  //-----------------------------------------------------------------------------
  void ClearBattleTreeData();

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間のレンタルポケモンデータの初期化
  * @param[in] heap  ヒープ
  */
  //-----------------------------------------------------------------------------
  void InitPartnerPokemonData(const u32 index, gfl2::heap::HeapBase* heap);

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間のレンタルポケモンデータの登録 CoreParamをセット
  * @param[in] pml::pokepara::CoreParam* cp
  */
  //-----------------------------------------------------------------------------
  void SetPartnerPokemonData(const u32 index, const pml::pokepara::CoreParam* cp);

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間のレンタルポケモンデータの取得 CoreParamを取得
  * @param[in] index
  * @param[in] pml::pokepara::CoreParam* cp
  */
  //-----------------------------------------------------------------------------
  void GetPartnerPokemonData(const u32 index, pml::pokepara::CoreParam* cp);

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間が登録されているか
  * @param[in] index
  * @param[out] bool
  */
  //-----------------------------------------------------------------------------
  bool IsPartner(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間の名前登録
  * @param[in] index
  * @param[in] gfl2::str::STRCODE*
  */
  //-----------------------------------------------------------------------------
  void SetPartnerName(const u32 index, const gfl2::str::STRCODE* name);

  //-----------------------------------------------------------------------------
  /**
  * @brief   仲間の名前取得
  * @param[in] index
  * @param[in] gfl2::str::STRCODE* (２６バイト以上のサイズ必須)
  */
  //-----------------------------------------------------------------------------
  void GetPartnerName(const u32 index, gfl2::str::STRCODE* name) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   定型文挨拶登録
  * @param[in] index
  * @param[in] u16
  */
  //-----------------------------------------------------------------------------
  void SetPartnerHello(const u32 index, const u16 patternHello);

  //-----------------------------------------------------------------------------
  /**
  * @brief   定型文挨拶取得
  * @param[in] index
  * @param[out] u16
  */
  //-----------------------------------------------------------------------------
  u16 GetPartnerHello(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   定型文感動登録
  * @param[in] index
  * @param[in] u16
  */
  //-----------------------------------------------------------------------------
  void SetPartnerEmotion(const u32 index, const u16 patternEmotion);

  //-----------------------------------------------------------------------------
  /**
  * @brief   定型文感動取得
  * @param[in] index
  * @param[out] u16
  */
  //-----------------------------------------------------------------------------
  u16 GetPartnerEmotion(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   ボール投げ種類の登録
  * @param[in] index
  * @param[in] u8 (0~7)
  */
  //-----------------------------------------------------------------------------
  void SetPartnerBallThrowType(const u32 index, const u8 ballThrowType);

  //-----------------------------------------------------------------------------
  /**
  * @brief   ボール投げ種類の取得
  * @param[in] index
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerBallThrowType(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   メガリングフラグの登録
  * @param[in] index
  * @param[in] u8 
  */
  //-----------------------------------------------------------------------------
  void SetPartnerMegaRing(const u32 index, const u8 has_mega_ring);

  //-----------------------------------------------------------------------------
  /**
  * @brief   メガリングフラグの取得
  * @param[in] index
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerMegaRing(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   ぜんりょくリングフラグの登録
  * @param[in] index
  * @param[in] u8
  */
  //-----------------------------------------------------------------------------
  void SetPartnerZenryokuRing(const u32 index, const u8 has_zenryoku_ring);

  //-----------------------------------------------------------------------------
  /**
  * @brief   ぜんりょくリングフラグの取得
  * @param[in] index
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerZenryokuRing(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief   性別の登録
  * @param[in] index
  * @param[in] u8
  */
  //-----------------------------------------------------------------------------
  void SetPartnerSex(const u32 index, const u8 sex);

  //-----------------------------------------------------------------------------
  /**
  * @brief   性別の取得
  * @param[in] index
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerSex(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 仲間のレンタルポケモンデータの有無
  * @param[in] index 0~1
  * @param[out] bool true : データ有り false : データ無し
  */
  //-----------------------------------------------------------------------------
  bool IsExistPartnerPokemonData(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 仲間が最大人数いるか否か
  * @param[out] bool true : 最大人数登録されている false : 空きがある
  */
  //-----------------------------------------------------------------------------
  bool IsFullPartner();

  //-----------------------------------------------------------------------------
  /**
  * @brief 指定の仲間データを削除
  * @param[in] index 
  * @param[in] heap クリアに使用するテンポラリヒープ
  */
  //-----------------------------------------------------------------------------
  void ClearPartnerData(const u32 index, gfl2::heap::HeapBase* heap);

  //-----------------------------------------------------------------------------
  /**
  * @brief   フェスファンフラグ（ＴＲＵＥ）設定
  * @param[in] index
  */
  //-----------------------------------------------------------------------------
  void SetPartnerFesFun(const u32 index);

  //-----------------------------------------------------------------------------
  /**
  * @brief   フェスファンフラグの取得
  * @param[in] index
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  bool IsFesFun(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 今のバトルセットカウント取得（０〜５）
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetNowBattleSetCount() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief ランクアップに必要なバトルセットカウント取得（１〜５）
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetRankUpBattleSetCount() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 連勝数取得（０〜４）
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetWinCount() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 連勝数カウントアップ（＋１）
  */
  //-----------------------------------------------------------------------------
  void AddWinCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 連勝数０クリア
  */
  //-----------------------------------------------------------------------------
  void ZeroClearWinCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 連勝数クリア（※０にするわけではない）
  *        0~4→0
  *        5~9→5
  *        10~14→10
  *        15~19→15
  *        20~24→20
  */
  //-----------------------------------------------------------------------------
  void ClearWinCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 全乱数回数取得
  * @param[out] u16
  */
  //-----------------------------------------------------------------------------
  u16 GetTotalRandCount() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief 全乱数回数クリア
  */
  //-----------------------------------------------------------------------------
  void ClearTotalRandCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 全乱数回数更新
  */
  //-----------------------------------------------------------------------------
  void UpdateTotalRandCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 今抽選されたポケモンに使用した乱数回数アップ（＋１）
  */
  //-----------------------------------------------------------------------------
  void AddActiveRandCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief 今抽選されたポケモンに使用した乱数回数クリア
  */
  //-----------------------------------------------------------------------------
  void ClearActiveRandCount();

  //-----------------------------------------------------------------------------
  /**
  * @brief ランク回数取得
  * @param[out] u8
  */
  //-----------------------------------------------------------------------------
  u8 GetRank() const;

  //-----------------------------------------------------------------------------
  /**
  * @brief ランクアップ（＋１）
  */
  //-----------------------------------------------------------------------------
  void AddRank();

  //-----------------------------------------------------------------------------
  /**
  * @brief 日にち更新
  */
  //-----------------------------------------------------------------------------
  void UpdateBattleFesDayEvent();

  //-----------------------------------------------------------------------------
  /**
  * @brief バトルツリートレーナーデータ（ポケモン情報含む）設定
  * param[in] u32 (0~4)
  * param[in] const BattleFes::TRAINER_DATA&
  */
  //-----------------------------------------------------------------------------
  void SetTrainerData(const u32 index, const BattleFes::TRAINER_DATA trainer);

  //-----------------------------------------------------------------------------
  /**
  * @brief バトルツリートレーナーデータ（ポケモン情報含む）取得
  * param[in] u32 (0~4)
  * param[out] const BattleFes::TRAINER_DATA&
  */
  //-----------------------------------------------------------------------------
  const BattleFes::TRAINER_DATA& GetTrainerData(const u32 index) const;

  //-----------------------------------------------------------------------------
  /**
  * @brief バトルツリートレーナーデータ（ポケモン情報含む）全削除
  */
  //-----------------------------------------------------------------------------
  void ClearTrainerData();

  //-----------------------------------------------------------------------------
  /**
  * @brief 仲間にフェスファンを追加する
  * param[in] u32 (0~1)
  */
  //-----------------------------------------------------------------------------
  void AddFesFunPartner(const u32 index, const u32 sex, const pml::pokepara::CoreParam* cp, poke_3d::model::DressUpParam* dressUpParam);

  //----------------------------------------------------------------------------
  /**
  *  @brief ボスか否か
  */
  //-----------------------------------------------------------------------------
  bool IsBoss(const u32 tr_count) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief 
  */
  //-----------------------------------------------------------------------------
  void SetPartnerRegionCode(const u32 index, const u8 regionCode);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerRegionCode(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  void SetPartnerRomCode(const u32 index, const u8 romCode);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerRomCode(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  void SetPartnerLanguageId(const u32 index, const u8 languageId);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerLanguageId(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  void SetPartnerAddressId(const u32 index, const u32 addressId);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  u32 GetPartnerAddressId(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  void SetPartnerIcon(const u32 index, const Savedata::MyStatus::ICON_DATA* icon);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  const Savedata::MyStatus::ICON_DATA* GetPartnerIcon(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  void SetPartnerRank(const u32 index, const u8 rank);

  //----------------------------------------------------------------------------
  /**
  *  @brief
  */
  //-----------------------------------------------------------------------------
  u8 GetPartnerRank(const u32 index) const;

  //----------------------------------------------------------------------------
  /**
  *  @brief お店使用フラグ取得
  */
  //-----------------------------------------------------------------------------
  bool IsUseShop() const;

  //----------------------------------------------------------------------------
  /**
  *  @brief お店使用
  */
  //-----------------------------------------------------------------------------
  void UseShop();

  //----------------------------------------------------------------------------
  /**
  *  @brief お店使用フラグクリア
  */
  //-----------------------------------------------------------------------------
  void ClearUseShop();

  //----------------------------------------------------------------------------
  /**
  *  @brief サカキフラグON＆マーマネ→サカキ対応
  */
  //-----------------------------------------------------------------------------
  void OpenSakaki();

#if PM_DEBUG
  u32 GetDebugWinCount();
  void SetWinCount(const u32 win_count);
  void SetRank(const u32 rank);
  void SetTotalRandCount(const u16 count);
#endif

private:
  // 312byte
  typedef struct
  {
    RentalPokemonData rentalPokemon;  // 232
    // 文字情報
    gfl2::str::STRCODE name[System::STRLEN_PLAYER_NAME + System::EOM_LEN]; ///< 自身の名前   2Byte*STRLEN_PLAYER_NAME(12+1)文字*1 // 26
    u16 patternHello;                         //!< 定型：あいさつ
    u16 patternEmotion;                       //!< 定型：感動
    u8 isRegistName : 1;
    u8 isRegistIcon : 1;
    u8 isRegistMegaRing : 1;
    u8 isRegistZenryokuRing : 1;
    u8 isRegistBall : 1;
    u8 isRegistSex : 1;
    u8 isRegistPoke : 1;
    u8 isRegistHello : 1;

    u8 isRegistEmotion : 1;
    u8 isFesFun : 1;                         // フェスファンデータか否か
    u8 isRegistRegionCode : 1;
    u8 isRegistRomCode : 1;
    u8 isRegistLanguageId : 1;
    u8 isRegistAddressId : 1;
    u8 isRegistRank : 1;
    u8 padding : 1;

    u8                     regionCode;                                //!< リージョン                     1byte
    u8                     romCode;                                   //!< ROMコード
    u8                     languageId;                                //!< 言語コード
    u8                     rank;

    u32                    addressId;                                 //!< 簡易アドレス情報(国など）      4Byte

    u8 ballThrowType;                         ///< バトルのボール投げの種類(0〜7)
    u8 has_mega_ring;                         ///< メガリング入手フラグ
    u8 has_zenryoku_ring;                     ///< ぜんりょくリング入手フラグ
    u8 sex;                                   ///< 性別

    Savedata::MyStatus::ICON_DATA         icon;                       //!< 着せ替え                      36byte

  }PartnerData;

  // 924byte(セーブデータは、512byte区切り)
  typedef struct
  {
    RentalPokemonData rentalPokemon;
    PartnerData partner[BattleFes::BattleFesDefine::PARTNER_TRAINER_MAX];
    u16 totalRandCount;                        // 現在の抽選ポケモンまでのトータル乱数回数
    u16 activeRandCount;                       // 現在の抽選ポケモンに使用した乱数回数
    u32 isUseShop : 1;                         // お店利用したか否か
    u32 padding : 5;                           // 空き
    u32 rank : 6;                              // ランク（０〜５０）
    u32 winCount : 5;                          // 連勝数（0~15）
    u32 isRegistPoke : 1;                      // レンタルポケモンを登録したか否か
    u32 battle_tree_id : 10;                   // バトルツリーＩＤ
    u32 battle_tree_sex : 2;                   // バトルツリー性別
    u32 battle_tree_tokusei : 2;               // バトルツリー特性
    BattleFes::TRAINER_DATA trainer[BattleFes::BattleFesDefine::FIGHT_TRAINER_MAX]; // 20byte
  }BattleFesData;

  BattleFesData  m_battleFesData;        // セーブデータ
};  // class BattleFesSave

GFL_NAMESPACE_END(Savedata)


#endif // __BATTLE_FES_SAVE_H__
