//======================================================================
/**
 * @file Situation.h
 * @date 2015/08/28 10:24:48
 * @author takahashi_tomoya
 * @brief 簡単な説明
 * @par Copyright
 * (C)1995-2015 GAME FREAK inc. All Rights Reserved.
 */
//======================================================================

#if !defined __SITUATION_H__
#define __SITUATION_H__
#pragma once

#include <macro/include/gfl2_Macros.h>
#include <util/include/gfl2_std_string.h>

#include "Savedata/include/SaveDataInterface.h"

#include "Field/FieldStatic/include/FieldLocation.h"

GFL_NAMESPACE_BEGIN(Savedata)

// @caution 今作もビードロがあるなら有効
#define USE_BIIDORO (0)

class Situation : public SaveDataInterface
{
public:

#if USE_BIIDORO
  enum BIIDORO_TYPE {
    BIIDORO_TYPE_NONE,  ///< ビードロ未使用
    BIIDORO_TYPE_BLACK, ///< 黒いビードロ使用中
    BIIDORO_TYPE_WHITE, ///< 白いビードロ使用中
    BIIDORO_TYPE_MAX,
  };
#endif

private:


  //-------------------------------------
  ///	状況データ型
  //=====================================
  struct Data
  {
    Field::Location::SaveData   start_loc;      ///<セーブ復帰位置
    Field::Location::SaveData   special_loc;    ///<特殊復帰位置
    Field::Location::SaveData   escape_loc;     ///<脱出先
    u16 warp_id;            ///<ワープ飛び先指定ID
    b8  is_warp_continue;     ///< コンティニュー時にマップ遷移するか？
    u8  weather_id;         ///<天気

    u32 egg_step_count;     ///<タマゴ孵化カウンタ

    u16 lastZoneID;         ///<ひとつ前にいたゾーンID
    u16 friendly_step_count;  ///<なつき度上昇用カウンタ

    u16 kawaigari_step_count;  ///<かわいがり度上昇用カウンタ
    u8  event_skybox_time_flag : 1; //< イベントで時間固定している状態保存用
    u8  event_skybox_time_hour : 7; //< イベントで時間固定している状態保存用
    u8  event_skybox_time_minute;   //< イベントで時間固定している状態保存用

#if USE_BIIDORO
    u8  biidoro_type:2;     ///< ビードロタイプ
    u8  padding0:6;
    u8  padding1[3];
#endif
  };


  Data m_Data;


  
public:

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	Situation(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//--------------------------------------------------------------------------------------------
	virtual ~Situation(void);
  
  //-----------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy(pData, reinterpret_cast<void*>(&m_Data), sizeof(Data)); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&m_Data); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   * @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return sizeof(Data); };


  //-----------------------------------------------------------------------------
  /**
   * @brief    JF行き来　データコピー用関数
   */
  //-----------------------------------------------------------------------------
  void CopyData( const Situation& data, b32 joinFestaReturn );

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { Initialize(); };

  //----------------------------------------------------------------------------
  /**
   *	@brief  状況データの初期化
   *
   *	@param	  p_work    データポインタ
   */
  //-----------------------------------------------------------------------------
  void Initialize( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief  セーブ復帰場所の取得
   *
   *	@return セーブ復帰用のロケーションポインタ
   */
  //-----------------------------------------------------------------------------
  Field::Location::SaveData* GetStartLocation( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief  セーブ復帰場所のセット
   *
   *	@return セーブ復帰用のロケーションポインタ
   */
  //-----------------------------------------------------------------------------
  void SetStartLocation( Field::Location* location );

  //----------------------------------------------------------------------------
  /**
   *	@brief  特殊復帰場所の取得
   *
   *	@return 特殊接続先のロケーションポインタ
   */
  //-----------------------------------------------------------------------------
  Field::Location::SaveData* GetSpecialLocation( void );

  //----------------------------------------------------------------------------
  /**
  *	@brief  特殊復帰位置のセット
   */
  //-----------------------------------------------------------------------------
  void SetSpecialLocation( Field::Location* location );

  //----------------------------------------------------------------------------
  /**
   *	@brief  脱出先の取得
   *
   *	@return 脱出先のロケーションポインタ
   */
  //-----------------------------------------------------------------------------
  Field::Location::SaveData* GetEscapeLocation( void );

  //----------------------------------------------------------------------------
  /**
   *	@brief  脱出先のセット
   *
   *	@return 脱出先のロケーションポインタ
   */
  //-----------------------------------------------------------------------------
  void SetEscapeLocation( Field::Location* location );

  //----------------------------------------------------------------------------
  /**
   *	@brief  ワープの取得
   *
   *	@param	  p_data    データポインタ
   *	@param    worpID    ワープID
   */
  //-----------------------------------------------------------------------------
  void SetWarpID( u16 worpID );
  
  //----------------------------------------------------------------------------
  /**
   *	@brief  ワープの取得
   *
   *	@return ワープID
   */
  //-----------------------------------------------------------------------------
  u16 GetWarpID( void ) const;


#if USE_BIIDORO
  //----------------------------------------------------------------------------
  /**
   *	@brief  ビードロタイプの設定
   *
   *	@param  type  ビードロタイプ
   */
  //-----------------------------------------------------------------------------
  void SetBiidoroType( BIIDORO_TYPE type );

  //----------------------------------------------------------------------------
  /**
   *	@brief  ビードロタイプの取得
   *
   *	@return ビードロタイプ
   */
  //-----------------------------------------------------------------------------
  u8 GetBiidoroType( void ) const;
#endif // USE_BIIDORO

  //----------------------------------------------------------------------------
  /**
   *	@brief  天気の設定
   *
   *	@param	  p_data      データポインタ
   *	@param    weather     天気
   */
  //-----------------------------------------------------------------------------
  void SetWeatherID( u32 weather );

  //----------------------------------------------------------------------------
  /**
   *	@brief  天気の取得
   *
   *	@param	  p_data    データポインタ
   *
   *	@return 天気
   */
  //-----------------------------------------------------------------------------
  u32 GetWeatherID( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  最後いたZoneIDの設定
   *
   *	@param	  p_data      データポインタ
   *	@param    lastZoneID  最後に表示したZoneID
   */
  //-----------------------------------------------------------------------------
  void SetLastZoneID( Field::ZoneID lastZoneID );

  //----------------------------------------------------------------------------
  /**
   *	@brief  一つ前にいたZoneID取得
   *
   *	@param	  p_data    データポインタ
   *
   *	@return 最後に表示した地名のZoneID
   */
  //-----------------------------------------------------------------------------
  Field::ZoneID GetLastZoneID( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  タマゴ孵化カウンタの設定
   *
   *	@param	  p_data      データポインタ
   *	@param    egg_count   タマゴ孵化カウント
   */
  //-----------------------------------------------------------------------------
  void SetEggStepCount( u32 egg_count );

  //----------------------------------------------------------------------------
  /**
   *	@brief  タマゴ孵化カウンタの取得
   *
   *	@param	  p_data    データポインタ
   *
   *	@return タマゴ孵化カウンタ
   */
  //-----------------------------------------------------------------------------
  u32 GetEggStepCount( void ) const;


  //----------------------------------------------------------------------------
  /**
   *	@brief  なつき度上昇用カウンタの設定
   *
   *	@param	  p_data      データポインタ
   *	@param    step_count  なつき度上昇用カウンタ
   */
  //-----------------------------------------------------------------------------
  void SetFriendlyStepCount( u16 step_count );

  //----------------------------------------------------------------------------
  /**
   *	@brief  なつき度上昇用カウンタの取得
   *
   *	@param	  p_data    データポインタ
   *
   *	@return なつき度上昇用カウンタ
   */
  //-----------------------------------------------------------------------------
  u16 GetFriendlyStepCount( void ) const;

  //----------------------------------------------------------------------------
  /**
   *	@brief  かわいがりパラメータ上昇用ｶｳﾝﾀの設定
   */
  //-----------------------------------------------------------------------------
  void SetKawaigariStepCount( u16 step_count );


  //----------------------------------------------------------------------------
  /**
   *	@brief  かわいがりパラメータ上昇用ｶｳﾝﾀの取得
   */
  //-----------------------------------------------------------------------------
  u16 GetKawaigariStepCount( void ) const; 

  

  //----------------------------------------------------------------------------
  /**
   *	@brief  自機情報の設定
   *
   *	@param	  p_data    データポインタ
   *	@param    cp_player 自機情報
   */
  //-----------------------------------------------------------------------------
  //void SetPlayerWork( const Field::PlayerWork* cp_player );


  //----------------------------------------------------------------------------
  /**
   *	@brief  自機情報の取得
   *
   *	@param	  cp_data    データポインタ
   *	@param    p_player    自機情報設定先
   */
  //-----------------------------------------------------------------------------
  //const Field::PlayerWork& GetPlayerWorkConst( void ) const;
  //Field::PlayerWork* GetPlayerWork( void );

  //-----------------------------------------------------------------------------
  /**
   * @brief   コンティニュー時にマップ遷移するかどうか
   *
   * @retval  true    マップ遷移を伴う（ゲームクリア後）
   * @retval  false   マップ遷移なし（通常時）
   */
  //-----------------------------------------------------------------------------
  bool HasWarpContinueRequest( void ) const;

  //-----------------------------------------------------------------------------
  /**
   * @brief   コンティニュー時マップ遷移リクエストの設定
   *
   * @param[in] flag  true=マップ遷移リクエストする　false=しない
   */
  //-----------------------------------------------------------------------------
  void SetWarpContinueRequest( bool flag );

  /* ------------------------------------------------------------------------- */
  /**
   * @brief イベント用スカイボックス時間有効フラグ
   *
   * @param flag true=有効, false=無効
   */
  /* ------------------------------------------------------------------------- */
  void SetSkyboxEventTimeFlag( bool flag );
  /* ------------------------------------------------------------------------- */
  /**
   * @brief イベント用スカイボックス時間有効フラグを取得
   *
   * @return 
   */
  /* ------------------------------------------------------------------------- */
  bool GetSkyboxEventTimeFlag( void ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief イベント用スカイボックス時間指定
   *
   * @param hour 時間
   * @param minute 分
   */
  /* ------------------------------------------------------------------------- */
  void SetSkyboxEventTime( u8 hour, u8 minute );
  /* ------------------------------------------------------------------------- */
  /**
   * @brief イベント用スカイボックス時間取得
   *
   * @return 時間
   */
  /* ------------------------------------------------------------------------- */
  u8 GetSkyboxEventTimeHour( void ) const;
  /* ------------------------------------------------------------------------- */
  /**
   * @brief イベント用スカイボックス分取得
   *
   * @return 分
   */
  /* ------------------------------------------------------------------------- */
  u8 GetSkyboxEventTimeMinute( void ) const;


private:
  
};

GFL_NAMESPACE_END(Savedata)

#endif // __SITUATION_H__
