//=============================================================================
/**
 *
 *  @file   EventWork.h
 *  @brief  セーブフラグ、ワーク操作
 *  @author Miyuki Iwasawa
 *  @date   2015.11.02
 *  @author hosaka genya(XY)
 *  @data   2011.05.18
 *  @author tamada  GAMEFREAK inc.
 *  @date   2005.10.22
 *
 */
//=============================================================================
#ifndef __EVENTWORK_H__
#define __EVENTWORK_H__

#include "heap/include/gfl2_heap.h"
#include "debug/include/gfl2_assert.h"

#include <pml/include/pml_PokeParty.h>

#include "savedata/include/SaveDataInterface.h"
#include "savedata/include/EventWorkDef.h"
#include "niji_reference_files/script/FieldPawnTypes.h"

namespace Field
{ 
  class EventWork : public Savedata::SaveDataInterface
  {
    GFL_FORBID_COPY_AND_ASSIGN(EventWork); // コピーコンストラクタ＋代入禁止
  public:
    // 復活アイテムの復活パーセンテージ
    static const int EVENT_FLAG_REVIVE_ITEM_RESET_PAR;

  private:
    ///  全フラグエリア占有フラグサイズ
    //static const int EVENT_WORK_AREA_MAX = WK_AREA_END - WORKS_TOTAL_MIN;
    static const int EVENT_WORK_AREA_MAX = 1000;
    ///  全セーブフラグ占有ワークサイズ
    static const int EVENT_FLAG_AREA_MAX = 496 + 120;  // @note momijiでフラグを960個拡張。バニッシュフラグが枯渇した為。
    //static const int EVENT_FLAG_AREA_MAX = FLAGS_TOTAL_MAX/8 + ( (FLAGS_TOTAL_MAX%8==0) ? 0 : 1 );
    static const int EVENT_WORK_SAVE_PADDING1 = 3584-((EVENT_WORK_AREA_MAX*2)+EVENT_FLAG_AREA_MAX+4+24+2);

    /// 実際にセーブデータバイナリとして保存される領域の定義 ブロック補正で3584byte確保可能
    struct COREDATA
    {
      u16 Work[ EVENT_WORK_AREA_MAX ];  ///<イベントワーク
      u8  Flag[ EVENT_FLAG_AREA_MAX ];  ///<イベントフラグ

      u8  TimeRequest;                  ///<時間更新リクエスト制御ワーク
      u8  dummy;            // 旧むしよけスプレーカウンター @fix GFNMCat[2535]: 2バイトになったのでこちらは名前を変更して未使用に
      u16 MushiyokeItemNo;  // むしよけスプレーアイテムNo

      u16 DendouiriPartyRecord[DENDOUIRI_PARTY_TYPE_MAX][pml::PokeParty::MAX_MEMBERS];

      u16 SprayCount;   ///<むしよけスプレーカウンター @fix GFNMCat[2535]: 2バイトになったのでこちらを使用する

      u8  padding_1[EVENT_WORK_SAVE_PADDING1];
    };

    COREDATA mCoreData; ///<実セーブデータ

  public:
    // コンストラクタ
    EventWork( void );
    
    ///////////////////////////////////////////////////////////////////////////////
    //↓以下はSaveDataInterfaceから継承され、実装する必要がある仮想関数
    ///////////////////////////////////////////////////////////////////////////////
    ///セーブデータのクリア
    void Clear( gfl2::heap::HeapBase * heap) { InitWork(); };
    ///セッター（使用していない）
    void SetData( void * data) { GFL_ASSERT_STOP(0); };
    ///セーブデータ領域の戦闘アドレスを取得する
    void * GetData( void ) { return &mCoreData; };
    ///セーブデータ領域のサイズを取得する
    size_t GetDataSize( void ) { return sizeof(mCoreData); };
    ///////////////////////////////////////////////////////////////////////////////
    //↑以上はSaveDataInterfaceから継承され、実装する必要がある仮想関数
    ///////////////////////////////////////////////////////////////////////////////
    
    //-----------------------------------------------------------------------------
    /**
     *  @brief  ワーク初期化
     */
    //-----------------------------------------------------------------------------
    void InitWork( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  ワークサイズ取得
     *
     *  @retval  ワークサイズ
     */
    //-----------------------------------------------------------------------------
    int GetWorkSize( void ){ return sizeof(EventWork); }
    

    //------------------------------------------------------------------
    /**
     * @brief IDがフラグのレンジなのかをチェック
     *        noがフラグなのかワークなのかをチェック
     *
     * @param no   フラグナンバー
     *
     * @retval  "1 = フラグ"
     * @retval  "0 = ワーク"
     */
    //------------------------------------------------------------------
    static bool CheckIDFlagRenge( u16 no );

    //------------------------------------------------------------------
    /**
    * @brief IDがバニッシュフラグのレンジなのかをチェック
    *
    * @param no   フラグナンバー
    *
    * @retval  "1 = バニッシュフラグ"
    * @retval  "0 = それ以外"
    */
    //------------------------------------------------------------------
    static bool CheckVanishiFlagRenge( u16 no );

    //------------------------------------------------------------------
    /**
     * @brief イベントフラグをチェックする
     *
     * @param flag_no   フラグナンバー
     *
     * @retval  "1 = フラグON"
     * @retval  "0 = フラグOFF"
     */
    //------------------------------------------------------------------
    bool CheckEventFlag( u16 flag_no ) const;
    
    //------------------------------------------------------------------
    /**
     *  @brief  イベントフラグをセットする
     *
     *  @param  u16 flag_no   フラグナンバー
     */
    //------------------------------------------------------------------
    void SetEventFlag( u16 flag_no );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  イベントフラグをリセットする
     *
     *  @param  u16   フラグナンバー
     */
    //-----------------------------------------------------------------------------
    void ResetEventFlag( u16 flag_no );

    //--------------------------------------------------------------
    /**
     * @brief イベントフラグの領域クリア
     * @param flag_no   フラグナンバー
     * 
     * @noto
     * ベタな記述なので処理速度の問題があるかもしれない
     */
    //--------------------------------------------------------------
    void ClearEventFlags( u16 start_no, u16 end_no );
   
    //------------------------------------------------------------------
    /**
     * @brief イベントワークアドレスを取得
     *
     * @param work_no   ワークナンバー
     *
     * @return  "ワークのアドレス"
     *
     * @li  work_no < 0x8000  通常のセーブワーク
     * @li  work_no >= 0x8000 スクリプト制御ワークの中に確保しているワーク
     */
    //------------------------------------------------------------------
    u16* GetEventWorkAdrs( u16 work_no );
    
    const u16* GetEventWorkAdrs( u16 work_no ) const;

    //--------------------------------------------------------------
    /**
     * @brief イベントーワークに値セット
     * @param work_no   ワークナンバー
     */
    //--------------------------------------------------------------
    void SetEventWork( u16 work_no, u16 value );

    //--------------------------------------------------------------
    /**
     * @brief イベントーワークの値ゲット
     * @param work_no   ワークナンバー
     */
    //--------------------------------------------------------------
    u16 GetEventWork( u16 work_no );

    //--------------------------------------------------------------
    /**
     * @brief   イベントーワークをクリア
     * @param work_no   ワークナンバー
     */
    //--------------------------------------------------------------
    void ClearEventWorks( u16 start_no, u16 end_no );
    
    //-----------------------------------------------------------------------------
    /**
     *  @brief  時間フラグのクリア
     */
    //-----------------------------------------------------------------------------
    void ClearTimeFlags( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  本体（リアル）時間フラグのクリア
     */
    //-----------------------------------------------------------------------------
    void ClearRealTimeFlags( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  特殊時間フラグ(ペナルティの効果が逆)のクリア
     *
     *  @note 通常のタイムフラグは 0時またぎでクリアされ、ペナルティ中は0時またぎでクリアされない。
     *        ペナルティの効果が逆のこの特殊フラグは、ペナルティ発生時にフラグ強制クリア
     *        また、ペナルティ中でも0時またぎで必ずフラグがクリアされる
     */
    //-----------------------------------------------------------------------------
    void ClearTimeFlagsPenaltyInverse( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  復活隠しアイテムフラグのクリア
     */
    //-----------------------------------------------------------------------------
    void ClearReviveItemFlags( void );
    
    //----------------------------------------------------------
    //    時間更新処理リクエストの取り出し
    //    ※現状、隠しアイテム復活用
    //----------------------------------------------------------
    bool PopTimeRequest( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  むしよけスプレー使用開始
     */
    //-----------------------------------------------------------------------------
    void SetMushiyokeCount( u16 itemno, u16 count );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  むしよけスプレー有効歩数を１ずつ減らす
     */
    //-----------------------------------------------------------------------------
    bool DecMushiyokeCount( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  むしよけスプレーを使えるか？
     */
    //-----------------------------------------------------------------------------
    bool CanUseMushiyoke( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  使用中のむしよけスプレーのアイテムNoを取得
     */
    //-----------------------------------------------------------------------------
    u16 GetMushiyokeItemNo( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  ジガルデセル 取得
     */
    //-----------------------------------------------------------------------------
    u16 GetZigarudeCell( void );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  ジガルデセル 追加可能か？
    */
    //-----------------------------------------------------------------------------
    bool AddCheckZigarudeCell( u16 value );

    //-----------------------------------------------------------------------------
    /**
    *  @brief  ジガルデセル 利用可能か？
    */
    //-----------------------------------------------------------------------------
    bool SubCheckZigarudeCell( u16 value );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  ジガルデセル 追加
     */
    //-----------------------------------------------------------------------------
    u16 AddZigarudeCell( u16 value );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  ジガルデセル 利用
     */
    //-----------------------------------------------------------------------------
    u16 SubZigarudeCell( u16 value );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  殿堂入りパーティを記録
     */
    //-----------------------------------------------------------------------------
    void SetDendouiriParty( DendouiriPartyType type, const pml::PokeParty* party );

    //-----------------------------------------------------------------------------
    /**
     *  @brief  殿堂入りパーティを取得
     */
    //-----------------------------------------------------------------------------
    u16* GetDendouiriPartyArrayPtr( DendouiriPartyType type );


private:
    
    u8 * GetEventFlagAdrs( u16 flag_no );
  };

} // namespace Field

#endif // __EVENTWORK_H__
