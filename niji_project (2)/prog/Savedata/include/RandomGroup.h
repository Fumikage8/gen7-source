//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *  GAME FREAK inc.
 *
 *  @file   RandomGroup.h
 *  @brief  ランダムグループ
 *  @author tomoya takahashi
 *  @date   2011.12.03
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifndef __RANDOMGROUP_H__
#define __RANDOMGROUP_H__

//#include <gflib.h>
#include "util/include/gfl2_std_string.h"
#include "math/include/gfl2_math_random.h"

#include "Savedata/include/SaveDataInterface.h"

namespace Savedata{


//-----------------------------------------------------------------------------
/**
 *          定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *          構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *          クラス宣言
*/
//-----------------------------------------------------------------------------
class RandomGroup : public SaveDataInterface
{
public:
  enum RandomTypes{
    RANDOM_TODAY = 0,    // 今日のランダムの種

    RANDOM_MAX,
  };
  
private:


  ///< ランダムシード構造体
  struct Data
  {
    gfl2::math::Random::State random_state[ RANDOM_MAX ];
    u32 random_seed[RANDOM_MAX];
  };


  Data m_Data;
  
public:

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  RandomGroup(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  virtual ~RandomGroup(void);


  //-----------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy(pData, reinterpret_cast<void*>(&m_Data), sizeof(Data)); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&m_Data); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   * @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return sizeof(Data); };

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { Initialize(); };

  //----------------------------------------------------------------------------
  /**
   *  @brief  初期化
   */
  //-----------------------------------------------------------------------------
  void Initialize( void );


  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲーム内で使用する。今日の乱数の種を取得
   */
  //-----------------------------------------------------------------------------
  u32 GetTodayRandSeed( void ) const;


  //----------------------------------------------------------------------------
  /**
   *  @brief  ランダムの種を経過日数分まわす。
   *
   *  @param  p_data      データ
   *  @param  diff_day    経過日数 
   */
  //-----------------------------------------------------------------------------
  void UpdateRandSeed( u32 diff_day );

  u32 GetRandSeed( RandomTypes type ) const;
  
};


} // Savedata

#endif  // __RANDOMGROUP_H__

