//============================================================================================
/**
 * @file		sv_myitem.h
 * @brief		セーブデータ：所持アイテム
 * @author	Hiroyuki Nakamura
 * @date		11.05.23
 *
 * namespace	savedata
 */
//============================================================================================
#if !defined( __SV_MYITEM_H__ )
#define __SV_MYITEM_H__
#pragma once

#include <util/include/gfl2_std_string.h>
#include <heap/include/gfl2_heap.h>

#include "SaveDataInterface.h"


namespace app {
  namespace sort {
    class StringItem;
    class StringWaza;
  }
}

GFL_NAMESPACE_BEGIN(Savedata)

//--------------------------------------------------------------------------------------------
/**
 * @brief	所持アイテムセーブデータ
 */
//--------------------------------------------------------------------------------------------
class MyItem : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(MyItem); //コピーコンストラクタ＋代入禁止
  
public:
/*
  // niji ( total: 888 )
  static const u32 NORMAL_ITEM_MAX = 430;   //!< 普通の道具最大数
  static const u32 EVENT_ITEM_MAX  = 184;   //!< 大切な道具最大数
  static const u32 WAZA_ITEM_MAX   = 108;   //!< 技マシン最大数
  static const u32 DRUG_ITEM_MAX   = 64;    //!< 薬最大数
  static const u32 NUTS_ITEM_MAX   = 72;    //!< 木の実最大数
  static const u32 BEADS_ITEM_MAX  = 30;    //!< ビーズの最大数
*/
  // momiji ( total: 906 )
  static const u32 NORMAL_ITEM_MAX  = 427;  //!< 普通の道具最大数
  static const u32 EVENT_ITEM_MAX   = 198;  //!< 大切な道具最大数
  static const u32 WAZA_ITEM_MAX    = 108;  //!< 技マシン最大数
  static const u32 DRUG_ITEM_MAX    = 60;   //!< 薬最大数
  static const u32 NUTS_ITEM_MAX    = 67;   //!< 木の実最大数
  static const u32 BEADS_ITEM_MAX   = 35;   //!< ビーズの最大数
  static const u32 ROTOPON_ITEM_MAX = 11;   //!< ロトポンの最大数

  //! 全ポケットの最大数合計
  static const u32 TOTAL_ITEM_MAX = NORMAL_ITEM_MAX+EVENT_ITEM_MAX+WAZA_ITEM_MAX+DRUG_ITEM_MAX+NUTS_ITEM_MAX+BEADS_ITEM_MAX+ROTOPON_ITEM_MAX;
  
  // @note フリースペースがあるため、TOTAL_ITEM_MAXと同じ
//  static const u32 SORT_TEMPORARY_MAX = 512;  //!< ソート用テンポラリサイズ（ポケットごとの最大より大きい）

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief	所持アイテムデータ
	 */
	//--------------------------------------------------------------------------------------------
  typedef struct {
    u32 id:10;          //!< アイテム番号
    u32 num:10;         //!< 所持数
    u32 free_space:10;  //!< フリースペースでの位置
    u32 new_flag:1;     //!< 新規入手フラグ
    u32 dummy:1;
  }ITEM_ST;

  static const u32 TOTAL_ITEM_SIZE = (sizeof(ITEM_ST)*TOTAL_ITEM_MAX);		//!< 所持アイテムのデータサイズ

	static const u32 ITEM_NONE = 0xffffffff;	//!< アイテムなし

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  MyItem(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  virtual ~MyItem();

private:
  ITEM_ST itemAll[TOTAL_ITEM_MAX];		//!< 所持アイテムデータ

  ITEM_ST* drugItem;      //!< 薬ポケットのポインタ
  ITEM_ST* normalItem;    //!< 通常アイテムポケットのポインタ
  ITEM_ST* wazaItem;      //!< 技マシンポケットのポインタ
  ITEM_ST* nutsItem;      //!< 木の実ポケットのポインタ
  ITEM_ST* eventItem;     //!< 大切なものポケットのポインタ
  ITEM_ST* beadsItem;     //!< ビーズポケットのポインタ
  ITEM_ST* rotoponItem;   //!< ロトポンポケットのポインタ

//  ITEM_ST* sortTemporary;			//!< ソート用テンポラリ

public:
  //-----------------------------------------------------------------------------
  /**
   *  @brief    読み込んだデータをセットする関数
    * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy(pData, reinterpret_cast<void*>(&itemAll[0]), TOTAL_ITEM_SIZE); };
  //-----------------------------------------------------------------------------
  /**
   *  @brief    データの先頭ポインタを得る関数
    * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&itemAll[0]); };
  //-----------------------------------------------------------------------------
  /**
   *  @brief    データサイズ
   *  @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return TOTAL_ITEM_SIZE; };
  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap );

private:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを保存する場所を取得（フィールドポケット）
   *
   * @param[in]		id		アイテム番号
   * @param[out]  max		保存できる数格納場所
   *
   * @return	対象ポケット先頭のアイテムへのポインタ
   */
  //--------------------------------------------------------------------------------------------
  ITEM_ST * GetPocketParam( const u16 item_id, u32 * max ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		指定アイテムが入っている場所を取得
   *
   * @param		id		アイテム番号
   * @param		max		保存できる数格納場所
   *
   * @retval	"NULL != アイテム保存場所 ※アイテムがない場合は空の場所"
   * @retval	"NULL = 失敗
   */
  //--------------------------------------------------------------------------------------------
  ITEM_ST * GetItemPos( const u16 id, u32 * max ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ポケット内の空の場所を取得
   *
   * @param		item	ポケットデータ
   * @param		max		保存できる数
   *
   * @return	空の場所
   */
  //--------------------------------------------------------------------------------------------
  ITEM_ST * GetItemPosSpace( ITEM_ST * item, const u32 max ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテム番号０に個数が入ってたら消す
   *
   * @param		item	アイテムデータ
   * @param		max		最大値
   *
   * @return	none
   */
  //--------------------------------------------------------------------------------------------
  void DeleteNullItem( ITEM_ST * item, const u32 max );

public:
  //--------------------------------------------------------------------------------------------
  /**
   * @brief		指定アイテムが入っている場所を取得
   *
   * @param		id		アイテム番号
   *
   * @retval	"NULL != アイテム保存場所
   * @retval	"NULL = 失敗
   */
  //--------------------------------------------------------------------------------------------
  ITEM_ST * GetItem( const u16 id ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを保存する場所を取得（フィールドポケット）
   *
   * @param		pocket	ポケット番号
   * @param		max			保存できる数格納場所
   *
   * @return	アイテム保存場所
   */
  //--------------------------------------------------------------------------------------------
  ITEM_ST * GetPocketItem( const u32 pocket, u32 * max ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ポケットのアイテム数を取得
   *
   * @param		pocket         	ポケット番号
   * @param   is_free_space   true = フリースペースを有効にする  ※デフォルト = false
   *
   * @return	アイテム数
   *
   * @note  フリースペースを有効にした場合、指定ポケット外とみなす
   */
  //--------------------------------------------------------------------------------------------
  u32 GetItemCount( const u32 pocket, bool is_free_space = false );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		ポケットのアイテム総所持数を取得
   *
   * @param		pocket	ポケット番号
   * @param   is_free_space   true = フリースペースを有効にする  ※デフォルト = false
   *
   * @return	アイテム総所持数
   *
   * @note  フリースペースを有効にした場合、指定ポケット外とみなす
   */
  //--------------------------------------------------------------------------------------------
  u32 GetItemTotalCount( const u32 pocket, bool is_free_space = false );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		指定ポケットの指定位置のアイテムを取得
   *
   * @param		pocket	ポケット番号
   * @param		pos			位置
   *
   * @retval	"NULL != アイテム"
   * @retval	"NULL = 失敗"
   */
  //--------------------------------------------------------------------------------------------
  const ITEM_ST * GetItem( const u32 pocket, const u32 pos ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテム番号から指定ポケットのアイテムを取得
   *
   * @param		pocket	ポケット番号
   * @param		id			アイテム番号
   *
   * @retval	"NULL != アイテム"
   * @retval	"NULL = 失敗"
   */
  //--------------------------------------------------------------------------------------------
  const ITEM_ST * GetItemID( u32 pocket, u16 id ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   指定ポケットのアイテム位置を取得
   *
   * @param   pocket          ポケット番号
   * @param   id              アイテム番号
   * @param   is_free_space   true = フリースペースを含める
   *
   * @retval  "ITEM_NONE != アイテム位置"
   * @retval  "ITEM_NONE = アイテムなし"
   */
  //--------------------------------------------------------------------------------------------
  u32 GetItemPocketPos( u32 pocket, u16 id, bool is_free_space=true ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   アイテムを加える
   *
   * @param   id          アイテム番号
   * @param   num         加える数
   * @param   is_set_new  新規入手とするか　※デフォルト = true
   *
   * @retval  "true = 成功"
   * @retval  "false = 失敗"
   */
  //--------------------------------------------------------------------------------------------
  bool Add( const u16 id, const u16 num, bool is_set_new = true );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを加えられるかチェック
   *
   * @param		id		アイテム番号
   * @param		num		加える数
   *
   * @retval	"true = 可"
   * @retval	"false = 不可"
   */
  //--------------------------------------------------------------------------------------------
  bool AddCheck( const u16 id, const u16 num ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを減らす
   *
   * @param		id		アイテム番号
   * @param		num		減らす数
   *
   * @retval	"true = 成功"
   * @retval	"false = 失敗"
   */
  //--------------------------------------------------------------------------------------------
  bool Sub( const u16 id, const u16 num );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを減らせるかチェック
   *
   * @param		id		アイテム番号
   * @param		num		減らす数
   *
   * @retval	"true = 可"
   * @retval	"false = 不可"
   */
  //--------------------------------------------------------------------------------------------
  bool SubCheck( const u16 id, const u16 num ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		指定アイテムを持っているかチェック
   *
   * @param		id		アイテム番号
   * @param		num		数
   *
   * @retval	"true = 持っている"
   * @retval	"false = 持っていない"
   */
  //--------------------------------------------------------------------------------------------
  bool Check( const u16 id, const u16 num ) const;

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		指定アイテムの所持数を取得
	 *
	 * @param		id		アイテム番号
	 *
	 * @return	所持数
	 */
	//--------------------------------------------------------------------------------------------
	u32 GetItemNum( u16 id ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		アイテムを入れ替える
   *
   * @param		item1		アイテム１
   * @param		item2		アイテム２
   *
   * @return	none
   */
  //--------------------------------------------------------------------------------------------
  void Change( ITEM_ST * item1, ITEM_ST * item2 );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		指定ポケットのアイテムを入れ替える
   *
   * @param		pocket	ポケット番号
   * @param		pos1		位置１
   * @param		pos2		位置２
   *
   * @retval	"NULL != アイテム"
   * @retval	"NULL = 失敗"
   */
  //--------------------------------------------------------------------------------------------
  bool Change( const u32 pocket, const u32 pos1, const u32 pos2 );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   指定ポケットのアイテムを指定位置に挿入
   *
   * @param   pocket          ポケット番号
   * @param   pos1            位置１
   * @param   pos2            位置２
   * @param   is_free_space   true = フリースペースを含める
   *
   * @return  none
   */
  //--------------------------------------------------------------------------------------------
  void Insert( u32 pocket, u32 pos1, u32 pos2, bool is_free_space=false );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		スペースをつめる
   *
   * @param		item	アイテムデータ
   * @param		max		最大値
   *
   * @return	none
   */
  //--------------------------------------------------------------------------------------------
  void DeleteSpace( const u32 pocket );

  //--------------------------------------------------------------------------------------------
  /**
   * @brief		手持ちアイテム全体のNULLアイテムを消して詰める
   *
   * @param		none
   *
   * @return	none
   *
   * @li	異常ロム対処用。バッグ画面の初期化時に入れておくと良い
   */
  //--------------------------------------------------------------------------------------------
	void CheckSafety(void);

	//--------------------------------------------------------------------------------------------
	/**
	 * @brief		指定アイテムを置き換える
	 *
	 * @param		item	置き換え前のアイテム
	 *
	 * @return	置き換え後のアイテム
	 */
	//--------------------------------------------------------------------------------------------
	u32 Swap( u32 item );

	//--------------------------------------------------------------------------------------------
  /**
   * @brief アイテム名によってソート
   *
   * @param sort  ソート用バイナリ
   * @param item  GetPocketItemで取得したITEM_ST*
   * @param max   GetPocketItemで取得したmax
   */
	//--------------------------------------------------------------------------------------------
  void SortByName( const app::sort::StringItem * sort, ITEM_ST ** item, u32 max );
	//--------------------------------------------------------------------------------------------
  /**
   * @brief 技マシンを技名によってソート
   *
   * @param sort  ソート用バイナリ
   * @param item  GetPocketItemで取得したITEM_ST*
   * @param max   GetPocketItemで取得したmax
   */
	//--------------------------------------------------------------------------------------------
  void SortByWazaName( const app::sort::StringWaza * sort, ITEM_ST ** item, u32 max );
	//--------------------------------------------------------------------------------------------
  /**
   * @brief ソートを使うようにする
   *
   * @param heap  ヒープ
   */
	//--------------------------------------------------------------------------------------------
//  void SetupSortByName( gfl2::heap::HeapBase * heap );
	//--------------------------------------------------------------------------------------------
  /**
   * @brief ソートを破棄する
   */
	//--------------------------------------------------------------------------------------------
//  void CleanSortByName( void );


public:
  //--------------------------------------------------------------------------------------------
  /**
   * @func    MakeFreeSpaceItemTable
   * @brief   フリースペースの道具テーブルを生成
   * @date    2015.03.16
   *
   * @param   tbl       生成場所
   * @param   tbl_size  生成場所のサイズ
   *
   * @return  テーブルに登録した個数
   */
  //--------------------------------------------------------------------------------------------
  u32 MakeFreeSpaceItemTable( ITEM_ST ** tbl, u32 tbl_size );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    MakePocketItemTable
   * @brief   指定ポケットのフリースペース未登録の道具テーブルを生成
   * @date    2015.03.18
   *
   * @param   pocket    ポケット
   * @param   tbl       生成場所
   * @param   tbl_size  生成場所のサイズ
   *
   * @return  テーブルに登録した個数
   */
  //--------------------------------------------------------------------------------------------
  u32 MakePocketItemTable( u32 pocket, ITEM_ST ** tbl, u32 tbl_size );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    AddFreeSpace
   * @brief   フリースペースに登録
   * @date    2015.03.18
   *
   * @param   tbl           フリースペースの道具テーブル
   * @param   item          登録する道具
   * @param   freespace_max フリースペースに登録された道具数
   * @param   is_clear      登録番号を上書きするか
   */
  //--------------------------------------------------------------------------------------------
  void AddFreeSpace( ITEM_ST ** tbl, ITEM_ST * item, u32 * freespace_max, bool is_clear = false );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    SubFreeSpace
   * @brief   フリースペースの登録を解除
   * @date    2015.03.18
   *
   * @param   item  解除する道具
   */
  //--------------------------------------------------------------------------------------------
  void SubFreeSpace( ITEM_ST * item );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    InsertFreeSpace
   * @brief   フリースペースの指定位置に挿入
   * @date    2015.03.18
   *
   * @param   tbl           フリースペースの道具テーブル
   * @param   item          挿入する道具
   * @param   freespace_max フリースペースに登録された道具数
   * @param   in_pos        挿入位置
   */
  //--------------------------------------------------------------------------------------------
  void InsertFreeSpace( ITEM_ST ** tbl, ITEM_ST * item, u32 * freespace_max, u32 in_pos );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    IsRegisterFreeSpace
   * @brief   フリースペースに登録されているか
   * @date    2015.03.18
   *
   * @param   id  アイテム番号
   *
   * @retval  true  = 登録されている
   * @retval  false = それ以外
   */
  //--------------------------------------------------------------------------------------------
  bool IsRegisterFreeSpace( u32 id );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    IsRegisterFreeSpace
   * @brief   フリースペースに登録されているか
   * @date    2015.05.08
   *
   * @param   item  手持ち道具データ
   *
   * @retval  true  = 登録されている
   * @retval  false = それ以外
   */
  //--------------------------------------------------------------------------------------------
  bool IsRegisterFreeSpace( const ITEM_ST * item );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    IsNew
   * @brief   新規入手アイテムかをチェック ( 番号指定版 )
   * @date    2015.04.06
   *
   * @param   id  アイテム番号
   *
   * @retval  true  = 新規
   * @retval  false = それ以外
   */
  //--------------------------------------------------------------------------------------------
  bool IsNew( u32 id ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @func    IsNew
   * @brief   新規入手アイテムかをチェック ( データ指定版 )
   * @date    2015.04.06
   *
   * @param   item  アイテムデータ
   *
   * @retval  true  = 新規
   * @retval  false = それ以外
   */
  //--------------------------------------------------------------------------------------------
  bool IsNew( const ITEM_ST * item ) const;

  //--------------------------------------------------------------------------------------------
  /**
   * @func    ResetNew
   * @brief   新規入手フラグを下げる ( 番号指定版 )
   * @date    2015.04.06
   *
   * @param   id  アイテム番号
   */
  //--------------------------------------------------------------------------------------------
  void ResetNew( u32 id );

  //--------------------------------------------------------------------------------------------
  /**
   * @func    ResetNew
   * @brief   新規入手フラグを下げる ( データ指定版 )
   * @date    2015.04.06
   *
   * @param   id  アイテム番号
   */
  //--------------------------------------------------------------------------------------------
  void ResetNew( ITEM_ST * item );


#if PM_DEBUG
  bool Debug_Sub( const u16 id, const u16 num );
#endif  // PM_DEBUG

};

GFL_NAMESPACE_END(Savedata)

#endif	// __SV_MYITEM_H__
