//============================================================================================
/**
 * @file		BoxPokemonSave.h
 * @brief		ボックス内のポケモンセーブデータ
 * @author	Hiroyuki Nakamura  -> k.ohno
 * @date		12.02.22
 *
 * namespace	savedata::
 */
//============================================================================================
#pragma once
#if !defined( __BOX_POKEMON_SAVE_H__ )
#define __BOX_POKEMON_SAVE_H__

#include <macro/include/gfl2_Macros.h>
#include <types/include/gfl2_Typedef.h>

#include "pml/include/pokepara/pml_PokemonParam.h"
#include <util/include/gfl2_std_string.h>

#include "SaveDataInterface.h"
#include "BoxDefSave.h"
#include "BoxSave.h"


GFL_NAMESPACE_BEGIN(Savedata)

//------------------------------------------------------------------------------------------
/**
 * @brief	ボックスのポケモンセーブデータ
 */
//------------------------------------------------------------------------------------------
class BoxPokemon : public SaveDataInterface
{
public:
	static const u32 TRAY_H_LINE = 5;															//!< トレイ縦軸のポケモン数
	static const u32 TRAY_W_LINE = 6;															//!< トレイ横軸のポケモン数
	static const u32 TRAY_POKE_MAX = TRAY_H_LINE * TRAY_W_LINE;		//!< トレイのポケモン数

	static const u32 TRAY_MAX = Box::TRAY_MAX;		//!< トレイ数

	static const u32 PUT_POKEMON_ERROR = 0xffffffff;		//!< ポケモン配置エラー

public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 */
	//------------------------------------------------------------------------------------------
	BoxPokemon(void);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//------------------------------------------------------------------------------------------
	~BoxPokemon();

public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief	ポケモンデータ
	 */
	//------------------------------------------------------------------------------------------
	struct BoxTrayData {
		u8	pokemonCoreParam[ TRAY_POKE_MAX ][ pml::pokepara::CoreParam::DATASIZE ];	//!< ポケモンデータ
	};

private:
	BoxTrayData	poke[TRAY_MAX];		//!< ポケモンデータ
	BOX * sv_box;									//!< ボックス画面のセーブデータ


public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		読み込んだデータをセットする関数
	 *
	 * @param		pData		先頭のポインタ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	virtual void SetData( void* pData ){ gfl2::std::MemCopy( pData, reinterpret_cast<void*>(&poke[0]), sizeof(BoxTrayData)*TRAY_MAX ); };

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データの先頭ポインタを得る関数
	 *
	 * @param		none
	 *
	 * @return	先頭のポインタ
	 */
	//------------------------------------------------------------------------------------------
	virtual void * GetData(void){ return reinterpret_cast<void*>(&poke[0]); };

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データサイズ
	 *
	 * @param		none
	 *
	 * @return	バイト
	 */
	//------------------------------------------------------------------------------------------
	virtual size_t GetDataSize(void){ return (sizeof(BoxTrayData)*TRAY_MAX); };


  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { this->InitPokemonData(heap); };


public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ボックス画面のセーブデータをセット
	 *
	 * @param		box		ボックス画面のセーブデータ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetBoxSaveData( BOX * box );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		初期化
	 *
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 *
	 * @li	MONSNO_NULLのCoreParamを作成し、全データにコピー
	 */
	//------------------------------------------------------------------------------------------
	void InitPokemonData( gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		指定位置データをCoreParamにセット
	 *
	 * @param		cp			CoreParam
	 * @param		tray		トレイ番号
	 * @param		pos			トレイ内の位置
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void GetPokemon( pml::pokepara::CoreParam * cp, u32 tray, u32 pos );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		指定位置データを取得
	 *
	 * @param		tray		トレイ番号
	 * @param		pos			トレイ内の位置
	 * @param		heap		ヒープ
	 *
	 * @return	CoreParam
	 *
	 * @li	CoreParamは各自削除！
	 */
	//------------------------------------------------------------------------------------------
	pml::pokepara::CoreParam * GetPokemon( u32 tray, u32 pos, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		存在チェック
	 *
	 * @param		tray		トレイ番号
	 * @param		pos			トレイ内の位置
	 * @param		tmp			テンポラリ領域
	 * @param		egg			タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @retval	"ture = 存在する"
	 * @retval	"false = それ以外"
	 *
	 * @li	ボックスデータをtmpに入れてチェックします
	 */
	//------------------------------------------------------------------------------------------
	bool CheckPokemon( u32 tray, u32 pos, pml::pokepara::CoreParam * tmp, bool egg = true );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		存在チェック
	 *
	 * @param		tray		トレイ番号
	 * @param		pos			トレイ内の位置
	 * @param		heap		ヒープ
	 * @param		egg			タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @retval	"ture = 存在する"
	 * @retval	"false = それ以外"
	 */
	//------------------------------------------------------------------------------------------
	bool CheckPokemon( u32 tray, u32 pos, gfl2::heap::HeapBase * heap, bool egg = true );

  //------------------------------------------------------------------------------------------
  /**
   * @brief		存在してない場所を返す
   *
   * @param		tray		トレイ番号
   * @retval	"成功の時は0以上の空いた場所 失敗の場合ー１"
   *
   */
  //------------------------------------------------------------------------------------------
  int CheckPokemonTrayRetPos( u32 tray, pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( 全トレイ対象版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	検索開始トレイ番号
	 * @param		tmp		テンポラリ領域
   * @param   pPos  入れた場所を返す
	 *
	 * @retval	"成功 = トレイ番号"
	 * @retval	"失敗 = PUT_POKEMON_ERROR"
	 *
	 * @li	ボックスデータをtmpに入れて存在チェックを行います
	 */
	//------------------------------------------------------------------------------------------
	u32 PutPokemonEmptyTrayAll( const pml::pokepara::CoreParam * cp, u32 tray, pml::pokepara::CoreParam * tmp , u16* pPos=NULL);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( 全トレイ対象版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	検索開始トレイ番号
	 * @param		heap	ヒープ
   * @param   pPos  入れた場所を返す
	 *
	 * @retval	"成功 = トレイ番号"
	 * @retval	"失敗 = PUT_POKEMON_ERROR"
	 */
	//------------------------------------------------------------------------------------------
	u32 PutPokemonEmptyTrayAll( const pml::pokepara::CoreParam * cp, u32 tray, gfl2::heap::HeapBase * heap , u16* pPos=NULL);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( トレイ指定版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	トレイ番号
	 * @param		tmp		テンポラリ領域
   * @param   pPos  入れた場所を返す
	 *
	 * @retval	"true = 成功"
	 * @retval	"false = 失敗"
	 *
	 * @li	ボックスデータをtmpに入れて存在チェックを行います
	 */
	//------------------------------------------------------------------------------------------
	bool PutPokemonEmptyTray( const pml::pokepara::CoreParam * cp, u32 tray, pml::pokepara::CoreParam * tmp , u16* pPos=NULL);

  //------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( トレイ指定版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	トレイ番号
	 * @param		heap	ヒープ
   * @param   pPos  入れた場所を返す
	 *
	 * @retval	"true = 成功"
	 * @retval	"false = 失敗"
	 */
	//------------------------------------------------------------------------------------------
	bool PutPokemonEmptyTray( const pml::pokepara::CoreParam * cp, u32 tray, gfl2::heap::HeapBase * heap , u16* pPos=NULL);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( トレイと位置指定版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 * @param		tmp		テンポラリ領域
	 *
	 * @retval	"true = 成功"
	 * @retval	"false = 失敗"
	 *
	 * @li	ボックスデータをtmpに入れて存在チェックを行います
	 */
	//------------------------------------------------------------------------------------------
	bool PutPokemon( const pml::pokepara::CoreParam * cp, u32 tray, u32 pos, pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン配置 ( トレイと位置指定版 )
	 *
	 * @param		cp		配置データ
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 * @param		heap	ヒープ
	 *
	 * @retval	"true = 成功"
	 * @retval	"false = 失敗"
	 */
	//------------------------------------------------------------------------------------------
	bool PutPokemon( const pml::pokepara::CoreParam * cp, u32 tray, u32 pos, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン入れ替え
	 *
	 * @param		tray1		トレイ番号１
	 * @param		pos1		トレイ内位置１
	 * @param		tray2		トレイ番号２
	 * @param		pos2		トレイ内位置２
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void ChangePokemon( u32 tray1, u32 pos1, u32 tray2, u32 pos2, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイ入れ替え
	 *
	 * @param		tray1		トレイ番号１
	 * @param		tray2		トレイ番号２
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void ChangeTray( u32 tray1, u32 tray2, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモン範囲移動
	 *
	 * @param		tray1		トレイ番号１
	 * @param		pos1		トレイ内位置１
	 * @param		tray2		トレイ番号２
	 * @param		pos2		トレイ内位置２
	 * @param		tmp			テンポラリ領域
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void MovePokemon(
			u32 tray1, u32 pos1, u32 tray2, u32 pos2, u32 width, u32 height, pml::pokepara::CoreParam * tmp, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモンデータ更新（強制フォルムチェンジ込み版）
	 *
	 * @param		cp		更新データ
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 *
	 * @return	none
	 *
	 * @li	変なデータで書き換えないように注意！
	 */
	//------------------------------------------------------------------------------------------
	void UpdatePokemon( pml::pokepara::CoreParam * cp, u32 tray, u32 pos );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		ポケモンデータ更新（内部でCoreParamを書き換えない版）
	 *
	 * @param		cp		更新データ
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 *
	 * @return	none
	 *
	 * @li	変なデータで書き換えないように注意！
	 * @li	フォルムチェンジしません
	 */
	//------------------------------------------------------------------------------------------
	void UpdatePokemonConst( const pml::pokepara::CoreParam * cp, u32 tray, u32 pos );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データクリア
	 *
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 * @param		tmp		テンポラリ領域
	 *
	 * @return	none
	 *
	 * @li	tmpをクリアしてボックスデータに入れます
	 */
	//------------------------------------------------------------------------------------------
	void ClearPokemon( u32 tray, u32 pos, pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データクリア
	 *
	 * @param		tray	トレイ番号
	 * @param		pos		トレイ内の位置
	 * @param		heap	ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void ClearPokemon( u32 tray, u32 pos, gfl2::heap::HeapBase * heap );


	//------------------------------------------------------------------------------------------
	/**
	 * @brief		全トレイに存在するポケモンの数を取得
	 *
	 * @param		tmp		テンポラリ領域
	 * @param		egg		タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @return	ポケモンの数
	 *
	 * @li	ボックスデータをtmpに入れてチェックします
	 */
	//------------------------------------------------------------------------------------------
	u32 GetPokemonCountAll( pml::pokepara::CoreParam * tmp, bool egg = true );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		全トレイに存在するポケモンの数を取得
	 *
	 * @param		heap	ヒープ
	 * @param		egg		タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @return	ポケモンの数
	 */
	//------------------------------------------------------------------------------------------
	u32 GetPokemonCountAll( gfl2::heap::HeapBase * heap, bool egg = true );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイに存在するポケモンの数を取得
	 *
	 * @param		tray	トレイ番号
	 * @param		tmp		テンポラリ領域
	 * @param		egg		タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @return	ポケモンの数
	 *
	 * @li	ボックスデータをtmpに入れてチェックします
	 */
	//------------------------------------------------------------------------------------------
	u32 GetPokemonCount( u32 tray, pml::pokepara::CoreParam * tmp, bool egg = true );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイに存在するポケモンの数を取得
	 *
	 * @param		tray	トレイ番号
	 * @param		heap	ヒープ
	 * @param		egg		タマゴを含めるか ( true = 含める )　※デフォルト = true
	 *
	 * @return	ポケモンの数
	 */
	//------------------------------------------------------------------------------------------
	u32 GetPokemonCount( u32 tray, gfl2::heap::HeapBase * heap, bool egg = true );


	//------------------------------------------------------------------------------------------
	/**
	 * @brief		全トレイの空き数を取得
	 *
	 * @param		tmp		テンポラリ領域
	 *
	 * @return	空き数
	 *
	 * @li	ボックスデータをtmpに入れてチェックします
	 */
	//------------------------------------------------------------------------------------------
	u32 GetSpaceCountAll( pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		全トレイの空き数を取得
	 *
	 * @param		heap		ヒープ
	 *
	 * @return	空き数
	 */
	//------------------------------------------------------------------------------------------
	u32 GetSpaceCountAll( gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイの空き数を取得
	 *
	 * @param		tray	トレイ番号
	 * @param		tmp		テンポラリ領域
	 *
	 * @return	空き数
	 *
	 * @li	ボックスデータをtmpに入れてチェックします
	 */
	//------------------------------------------------------------------------------------------
	u32 GetSpaceCount( u32 tray, pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイの空き数を取得
	 *
	 * @param		tray		トレイ番号
	 * @param		heap		ヒープ
	 *
	 * @return	空き数
	 */
	//------------------------------------------------------------------------------------------
	u32 GetSpaceCount( u32 tray, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		空き位置を取得（トレイと位置指定）
	 *
	 * @param		tray	トレイ番号
	 * @param		pos		位置
	 * @param		tmp		テンポラリ領域
	 *
	 * @retval	"true = 空きあり"
	 * @retval	"false = 空きなし"
	 */
	//------------------------------------------------------------------------------------------
	bool GetSpacePos( u32 & tray, u32 & pos, pml::pokepara::CoreParam * tmp );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		空き位置を取得（トレイと位置指定）
	 *
	 * @param		tray	トレイ番号
	 * @param		pos		位置
	 * @param		heap	ヒープ
	 *
	 * @retval	"true = 空きあり"
	 * @retval	"false = 空きなし"
	 */
	//------------------------------------------------------------------------------------------
	bool GetSpacePos( u32 & tray, u32 & pos, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイ開放
	 *
	 * @param		heap	ヒープ
	 *
	 * @return	開放されているトレイの数
	 */
	//------------------------------------------------------------------------------------------
	u32 UpdateTrayMax( gfl2::heap::HeapBase * heap );

};

GFL_NAMESPACE_END(Savedata)

#endif // __BOX_POKEMON_SAVE_H__
