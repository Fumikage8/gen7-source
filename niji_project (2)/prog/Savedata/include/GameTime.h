//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *  GAME FREAK inc.
 *
 *  @file   GameTime.h
 *  @brief  ゲーム内時間データ
 *  @author tomoya takahahi
 *  @date   2011.09.10    BWより移植
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifndef __GAMETIME_H__
#define __GAMETIME_H__

//#include <gflib.h>
#include "heap/include/gfl2_heap.h"
#include "debug/include/gfl2_Assert.h"
#include "util/include/gfl2_std_string.h"

#include "system/include/Date/gfl2_Date.h"

#include "Savedata/include/SaveDataInterface.h"

namespace Savedata {

//-----------------------------------------------------------------------------
/**
 *          定数宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *          構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *          クラス宣言
*/
//-----------------------------------------------------------------------------
class GameTime : public SaveDataInterface
{
private:

  // USE_FLAGに埋め込むID
  static const u32 DATA_ID = 0x20110911;

  /// ゲームタイムデータ
  struct Data
  {
    u32                           use_flag;     ///< 機能しているかどうかのフラグ
    gfl2::system::DateParameters  sv_date;      ///< ゲーム内時間（日付と時間）単位のイベント更新に利用
    u32                           sv_day;       ///< ゲーム内時間（日数）単位のイベント更新に利用
    s64                           start_sec;    ///< ゲーム開始時間
    s64                           clear_sec;    ///< ゲームクリア時間
    u32                           penalty_time; ///< 時間変更に対するペナルティの時間（分単位）
    s64                           rtc_offset;   ///< RTC改変オフセット
    s64                           alola_offset; ///< アローラ時間改変オフセット(精度は秒単位）
    s64                           alola_otherworld_offset; ///< アローラ別世界改変オフセット（精度は秒単位）
  };

  Data m_Data;

public:

  // アローラオフセットの初期値
  static const s64 ALOLA_OFFSET_NONE;


public:

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   コンストラクタ
   */
  //--------------------------------------------------------------------------------------------
  GameTime(void);

  //--------------------------------------------------------------------------------------------
  /**
   * @brief   デストラクタ
   */
  //--------------------------------------------------------------------------------------------
  virtual ~GameTime(void);


  //-----------------------------------------------------------------------------
  /**
   * @brief    読み込んだデータをセットする関数
   * @param    pData   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void SetData(void* pData){ gfl2::std::MemCopy( pData, reinterpret_cast<void*>(&m_Data), sizeof(Data) ); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
   */
  //-----------------------------------------------------------------------------
  virtual void* GetData(void){ return reinterpret_cast<void*>(&m_Data); };
  //-----------------------------------------------------------------------------
  /**
   * @brief    データサイズ
   * @retval   バイト
   */
  //-----------------------------------------------------------------------------
  virtual size_t GetDataSize(void){ return sizeof(Data); };

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ){ Initialize(); };

  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲーム時間の初期化
   */
  //-----------------------------------------------------------------------------
  void Initialize( void );


  //----------------------------------------------------------------------------
  /**
   *  @brief  機能しているかのフラグ
   *
   *  @retval true    機能している。
   *  @retval false   機能していない。
   */
  //-----------------------------------------------------------------------------
  bool IsUseFlag( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief  今の日時を保存
   *
   *  @param  p_date      保存領域
   *  @param  cp_dateTime 今の日時
   */
  //-----------------------------------------------------------------------------
  void SetDate( const gfl2::system::Date* cp_dateTime );

  //----------------------------------------------------------------------------
  /**
   *  @brief  日時の取得
   *
   *  @param  cp_date    セーブ日時
   *  @param  p_dateTime  情報格納先
   */
  //-----------------------------------------------------------------------------
  void GetDate( gfl2::system::Date* p_dateTime )const;

    //----------------------------------------------------------------------------
    /**
     *  @brief  ゲーム内時間（曜日）　曜日単位のイベント更新に利用を取得
     *
     *  @return u32 ゲーム内曜日
     */
    //-----------------------------------------------------------------------------
#if 0 //@attention nijiでは使用しないがライブラリとして用意したい
    nn::fnd::Week GetWeek(void) const;
#endif


  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲーム開始時間の取得
   */
  //-----------------------------------------------------------------------------
  s64 GetStartSec( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲーム開始時間の設定
   */
  //-----------------------------------------------------------------------------
  void SetStartSec( s64 start_sec );

  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲームクリア時間の設定
   */
  //-----------------------------------------------------------------------------
  void SetClearSec( s64 clear_sec );

  //----------------------------------------------------------------------------
  /**
   *  @brief  ゲームクリア時間の設定
   */
  //-----------------------------------------------------------------------------
  s64 GetClearSec( void ) const;
  

  //----------------------------------------------------------------------------
  //ペナルティ時間制御関連
  //
  //ＤＳを変えたり、時間を変更した場合は「ペナルティ時間」として
  //天候やエンカウント率の変化など特定の月日に起こるイベントをフックする。
  //この時間は24時間続く。
  //-----------------------------------------------------------------------------
  bool IsPenaltyMode( void ) const;
  void SetPenaltyTime( void );
  void CountDownPenaltyTime( int diff_minute );


  //-----------------------------------------------------------------------------
  /**
   *    RTC改変オフセットのチェック
   */
  //-----------------------------------------------------------------------------
  //----------------------------------------------------------------------------
  /**
   *  @brief  RTC改変オフセットが一致しているかチェック
   *  @retval true    一致している
   *  @retval false   一致していない
   */
  //-----------------------------------------------------------------------------
  bool IsIdentifyRTCOffset( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief  RTC改変オフセットの値を更新する。
   */
  //-----------------------------------------------------------------------------
  void UpdateRTCOffet( void );
  

  //-----------------------------------------------------------------------------
  /**
   *    alola時間改変オフセットのチェック
   */
  //-----------------------------------------------------------------------------
  //----------------------------------------------------------------------------
  /**
   *  @brief alola時間改変オフセットが存在しているか？
   */
  //-----------------------------------------------------------------------------
  bool IsAlolaOffsetExists( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief alola時間改変オフセットの設定
   */
  //-----------------------------------------------------------------------------
  void SetAlolaOffset( s64 alola_offset );

  //----------------------------------------------------------------------------
  /**
   *  @brief alola時間改変オフセットの取得
   */
  //-----------------------------------------------------------------------------
  s64 GetAlolaOffset( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief alola別世界時間改変オフセットが存在しているか？
   */
  //-----------------------------------------------------------------------------
  bool IsAlolaOtherWorldOffsetExists( void ) const;

  //----------------------------------------------------------------------------
  /**
   *  @brief alola別世界時間改変オフセットのクリア
   */
  //-----------------------------------------------------------------------------
  void ClearAlolaOtherWorldOffset( void );

  //----------------------------------------------------------------------------
  /**
   *  @brief alola別世界時間改変オフセットの設定
   */
  //-----------------------------------------------------------------------------
  void SetAlolaOtherWorldOffset( s64 alola_offset );

  //----------------------------------------------------------------------------
  /**
   *  @brief alola別世界時間改変オフセットの取得
   */
  //-----------------------------------------------------------------------------
  s64 GetAlolaOtherWorldOffset( void ) const;

private:

  static void clearAlolaOffset( s64* offset );
  static bool isAlolaOffsetExists( const s64 offset );


};


} // namespace Savedata

#endif  // __GAMETIME_H__

