//==============================================================================
/**
 * @file	  Record.h
 * @brief		ゲーム内カウント処理関連
 * @author  tamada / 移植 mori
 * @date    2012.09.28
 *
 * @note セット関数の返り値は全て実際に登録された値です
 *
 * @note ※注意！新しいレコードを増やした時はreocrd.cppのlimit_tblも変更する事
 */
// =============================================================================

#if !defined( __RECORD_H__ )
#define	__RECORD_H__

#include <macro/include/gfl2_macros.h>
#include <types/include/gfl2_Typedef.h>
#include <util/include/gfl2_std_string.h>
#include "heap/include/gfl2_heap_manager.h"
#include "Savedata/include/SaveDataInterface.h"

GFL_NAMESPACE_BEGIN(Savedata)






/// 各種レコード保存クラス
class Record : public SaveDataInterface
{
  GFL_FORBID_COPY_AND_ASSIGN(Record);

public:

// レコードID定義はこのファイル内で。Pawn参照用に分けている
#include "niji_reference_files/savedata/RecordDefine.h"

public:
  /// コンストラクタ
  Record( void );
  /// デストラクタ
  virtual ~Record( void );


  //--------------------------------------------------------------------------
	/**
   * @brief    データの先頭ポインタを得る関数
   * @return   先頭のポインタ
	 */
	//--------------------------------------------------------------------------
  virtual void* GetData(void);
  //--------------------------------------------------------------------------
	/**
   * @brief    データサイズ
   * @retval   バイト
	 */
	//--------------------------------------------------------------------------
  virtual size_t GetDataSize(void);
  //--------------------------------------------------------------------------
	/**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
	 */
	//--------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap );

public:

  //--------------------------------------------------------------------------
	/**
   * @brief レコードデータ足しこみ
   * @param id        レコードID
   * @param add_value 足しこむ値（MAXを超えている場合はMAXにまるめこむ）
   * 
   * @return 実際にセットされた値
	 */
	//--------------------------------------------------------------------------
  u32 AddRec( RECORD_ID id, u32 add_value );

  //--------------------------------------------------------------------------
	/**
   * @brief レコードデータのインクリメント
   * @param id        レコードID
   * 
   * @return 実際にセットされた値
	 */
	//--------------------------------------------------------------------------
  u32 IncRec( RECORD_ID id );

  //--------------------------------------------------------------------------
	/**
   * @brief レコードデータに指定の値をセット
   * @param id     レコードID
   * @param value  セットする値（MAXを超えていたらMAX)
   * 
   * @return 実際にセットされた値
	 */
	//--------------------------------------------------------------------------
  u32 SetRec( RECORD_ID id , u32 value );

  //--------------------------------------------------------------------------
	/**
   * @brief 登録済みの値を超えていたら書き換える
   * @param id     レコードID
   * @param value  セットする値
   * 
   * @return 実際にセットされた値
	 */
	//--------------------------------------------------------------------------
  u32 SetRecIfLarge( RECORD_ID id, u32 value );

  //--------------------------------------------------------------------------
	/**
   * @brief レコード値取得
   * @param id     レコードID
   * 
   * @return レコードの値
	 */
	//--------------------------------------------------------------------------
  u32 Get( RECORD_ID id );

  /// 1日最大？？？のレコード関連を更新する
  void DailyUpdate( void );

  //--------------------------------------------------------------------------
	/**
   * @brief 最大の値を取得（主にデバッグ用）
   * @param id     レコードID
   * 
   * @return レコードのMAX値
	 */
	//--------------------------------------------------------------------------
  u32 GetMax( RECORD_ID id);

  //--------------------------------------------------------------------------
	/**
   * @brief 書き込み禁止期間のON/OFF 
   * @param flag 書き込み禁止か？true:書き込み禁止 )
	 */
	//--------------------------------------------------------------------------
  void SetDisableRecord( bool flag );

private:
  static const u32 LARGE_REC_NUM  = 100;  ///< ４バイトレコードデータの最大数
  static const u32 SMALL_REC_NUM  = 100;  ///< ２バイトレコードデータの最大数

  /// レコード毎のMAX値のタイプ
  enum {
    MAX_999_999_999 = 0,  ///< 最大数 999,999,999（４バイト用定義）
    MAX_9_999_999,        ///< 最大数   9,999,999（４バイト用定義）
    MAX_999_999,          ///< 最大数     999,999（４バイト用定義）
    MAX_99999,            ///< 最大数      99,999（４バイト用定義）
    MAX_65535,            ///< 最大数      65,355（２バイト用定義）
    MAX_9999,             ///< 最大数       9,999（２バイト用定義）
    MAX_999,              ///< 最大数         999（２バイト用定義）
    MAX_7,                ///< 最大数           7（２バイト用定義）
    MAX_TYPE_MAX,
  };

  /// RECORD_ID毎の最大数取得
  u32  get_limit( RECORD_ID id );
  /// 値設定
  u32 set_value( RECORD_ID id, u32 value );
  /// 値取得
  u32  get_value( RECORD_ID id );
  /// 書き込み禁止中かチェック
  bool check_enable( int id, int operate, u32 value );

  //-------------------------------------
  ///	セーブデータ
  //=====================================
	struct CoreData
	{
    u32 large_rec[ LARGE_REC_NUM ]; ///< 4バイト使用するレコード100個分
    u16 small_rec[ SMALL_REC_NUM ]; ///< 2バイト使用するレコード100個分
    u8 reserve[256];//予備
	};

	CoreData m_data;    ///< レコードデータ
  bool     m_disable; ///< 禁止フラグ( true:書き込み禁止 false:書き込みOK)
};


//--------------------------------------------------------------------------
/// 足しこみ
//--------------------------------------------------------------------------
extern void AddRecord( Savedata::Record::RECORD_ID id, u32 add_value );

//--------------------------------------------------------------------------
/// 指定の値のセット
//--------------------------------------------------------------------------
extern void SetRecord( Savedata::Record::RECORD_ID id , u32 value );

//--------------------------------------------------------------------------
/// インクリメント
//--------------------------------------------------------------------------
extern void IncRecord( Savedata::Record::RECORD_ID id );

//--------------------------------------------------------------------------
/// レコード値取得
//--------------------------------------------------------------------------
extern u32 GetRecord( Savedata::Record::RECORD_ID id );





GFL_NAMESPACE_END(Savedata)

#endif	/* __RECORD_H__ */

