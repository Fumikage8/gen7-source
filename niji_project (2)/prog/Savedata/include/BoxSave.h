//============================================================================================
/**
 * @file		BoxSave.h
 * @brief		ボックス画面セーブデータ
 * @author	Hiroyuki Nakamura  -> ohno
 * @date		12.02.15
 *
 * namespace	savedata::
 */
//============================================================================================
#if !defined( __BOX_SAVE_H__ )
#define __BOX_SAVE_H__

#include <Savedata/include/SaveDataInterface.h>
#include "Savedata/include/BoxDefSave.h"
#include <str/include/gfl2_Str.h>
#include <util/include/gfl2_std_string.h>


GFL_NAMESPACE_BEGIN(Savedata)

//------------------------------------------------------------------------------------------
/**
 * @brief	ボックス画面セーブデータ（ポケモン除く）
 * @li		ポケモンのセーブデータは"sv_box_pokemon.h"
 */
//------------------------------------------------------------------------------------------
class BOX : public SaveDataInterface
{
public:
	static const u32 TRAY_NUM_1ST = 8;											//!< トレイ数（１段階目）
	static const u32 TRAY_NUM_2ND = 16;											//!< トレイ数（２段階目）
	static const u32 TRAY_NUM_3RD = 24;											//!< トレイ数（３段階目）
	static const u32 TRAY_NUM_4TH = 32;				//!< トレイ数（４段階目）
	static const u32 TRAY_MAX = Box::TRAY_MAX;							//!< トレイ最大数
	
	static const u32 TRAY_NAME_LEN = 16;										//!< トレイ名の文字数
	static const u32 TRAY_NAME_BUFSIZE = TRAY_NAME_LEN + 1;	//!< トレイ名のバッファサイズ ( 文字数 + EOM )

	static const u32 NORMAL_WALLPAPER_MAX = 16;							//!< 通常壁紙数
	static const u32 EXTRA_WALLPAPER_MAX = 8;								//!< 追加壁紙数
	static const u32 TOTAL_WALLPAPER_MAX = NORMAL_WALLPAPER_MAX + EXTRA_WALLPAPER_MAX;	//!< 全壁紙数

	static const u32 BATTLE_BOX_TRAY_NUMBER = 0xff;		//!< バトルボックスのトレイ番号

  static const u32 TEAM_BOX_POKEMON_ENTRY_NONE = 0xffff;		//!< チームにポケモンがセットしてない場合

  static const u32 TEAM_MAX = 6;     ///バトルチームのMAX
  static const u32 TEAM_NUM_MAX = 6;     ///バトルチームのポケモンMAX pokepartyと同じ
	static const u32 TEAM_NAME_LEN = 10;										//!< チーム名の文字数
	static const u32 TEAM_NAME_BUFSIZE = TEAM_NAME_LEN + 1;	//!< チーム名のバッファサイズ ( 文字数 + EOM )

//  static const u32 RESORT_BOXINPOKE_MAX = 90;   ///< リゾートでの配置登録ポケモン９０匹
  static const u32 _BUMMYBUFF = 90;   ///< 使わなくなったメモリ
  
	//------------------------------------------------------------------------------------------
	/**
	 * @brief	追加壁紙フラグ
	 */
	//------------------------------------------------------------------------------------------
	enum {
		EX_WALLPAPER_FLAG_1 = 1,		///< 追加壁紙フラグ１
		EX_WALLPAPER_FLAG_2,				///< 追加壁紙フラグ２
	};

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		コンストラクタ
	 */
	//------------------------------------------------------------------------------------------
	BOX(void);

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		デストラクタ
	 */
	//------------------------------------------------------------------------------------------
	~BOX();

private:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief	ボックスデータ
	 */
	//------------------------------------------------------------------------------------------
	struct BoxData {
		gfl2::str::STRCODE	trayName[ Box::TRAY_MAX ][ TRAY_NAME_BUFSIZE ];	//!< トレイ名
    gfl2::str::STRCODE	teamName[ TEAM_NUM_MAX ][ TEAM_NAME_BUFSIZE ]; ///<! チーム名ＭＡＸ
    u16 boxLockPos[ TEAM_MAX ][ TEAM_NUM_MAX ]; //６チーム ６ポケモン  上位がＢＯＸの場所番号、下位がＢＯＸでのトレイ位置。横から0,1,2,3,4...
    u16 dummy[_BUMMYBUFF-3];  //リゾート登録ポケモントレイ位置   使用中止つかってはいけません20160315 k.ohno
    u8  teamLock[TEAM_MAX];  //チームがそれぞれロックされているかを記録する
    u8	wallPaper[ Box::TRAY_MAX ];		//!< 壁紙番号
		u8	extraWallPaperBitFlag:7;	//!< 追加壁紙フラグ
		u8	eventTrayOpenFlag:1;			//!< 隠しトレイを公開するフラグ
		u8	trayMax;									//!< 解放されているトレイ数
    u8 dmy2;  //使ってはいけません
		u8	currentTray;							//!< 参照中のトレイ番号 ( バトルボックス = BATTLE_BOX_TRAY_NUMBER )
    u8 dummy3;   //使用中止 GF調整要望[367]
	};

	BoxData	box;		//!< ボックスデータ

public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		読み込んだデータをセットする関数
	 *
	 * @param		pData		先頭のポインタ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	virtual void SetData( void* pData ){ gfl2::std::MemCopy( pData, reinterpret_cast<void*>(&box), sizeof(BoxData) ); };

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データの先頭ポインタを得る関数
	 *
	 * @param		none
	 *
	 * @return	先頭のポインタ
	 */
	//------------------------------------------------------------------------------------------
	virtual void * GetData(void){ return reinterpret_cast<void*>(&box); };

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		データサイズ
	 *
	 * @param		none
	 *
	 * @return	バイト
	 */
	//------------------------------------------------------------------------------------------
	virtual size_t GetDataSize(void){ return sizeof(BoxData); };

  //-----------------------------------------------------------------------------
  /**
   * @brief セーブデータのクリア
   * @param heap　クリアに使用するテンポラリヒープ
   */
  //-----------------------------------------------------------------------------
  virtual void Clear( gfl2::heap::HeapBase * heap ) { InitBoxData( heap ); };

public:
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		初期データ設定
	 *
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void InitBoxData( gfl2::heap::HeapBase * heap );


  //------------------------------------------------------------------------------------------
  /**
   * @brief		ポケモン入れ替え
   *
   * @param		tray1		トレイ番号１
   * @param		pos1		トレイ内位置１
   * @param		tray2		トレイ番号２
   * @param		pos2		トレイ内位置２
   *
   * @return	none
   */
  //------------------------------------------------------------------------------------------
  void ChangePokemon(u32 tray1, u32 pos1, u32 tray2, u32 pos2);

  //------------------------------------------------------------------------------------------
  /**
   * @brief		チームの入れ替え
   *
   * @param		tray1		トレイ番号１
   * @param		tray2		トレイ番号２
   * @return	none
   */
  //------------------------------------------------------------------------------------------
  void ChangeTeam( u32 tray1, u32 tray2 );

  
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイ入れ替え
	 *
	 * @param		tray1		トレイ番号１
	 * @param		tray2		トレイ番号２
	 * @param		heap		ヒープ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void ChangeTray( u32 tray1, u32 tray2, gfl2::heap::HeapBase * heap );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイ名設定
	 *
	 * @param		tray	トレイ番号
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetTrayName( const gfl2::str::STRCODE * str, u32 tray );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		トレイ名取得
	 *
	 * @param		tray	トレイ番号
	 *
	 * @return	トレイ名
	 */
	//------------------------------------------------------------------------------------------
	const gfl2::str::STRCODE * GetTrayName( u32 tray ) const;


	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チーム名取得
	 *
	 * @param		team	チーム番号
	 *
	 * @return	チーム名
	 */
	//------------------------------------------------------------------------------------------
	const gfl2::str::STRCODE * GetTeamName( u32 team ) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チームポケモンの場所取得
	 *
	 * @param		team	チーム番号
	 * @param		no	  パーティーの順番
	 * @return	上位がＢＯＸの場所番号、下位がＢＯＸでのトレイ位置
	 */
	//------------------------------------------------------------------------------------------
  u16  GetTeamPokePos( u32 team, u32 no ) const;


	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チームポケモンが入っているかどうか取得
	 * @param		team	チーム番号
	 * @return	入っている場合 true 入ってない場合 false
	 */
	//------------------------------------------------------------------------------------------
  bool  IsTeamPokeIn( u32 team ) const;


  //------------------------------------------------------------------------------------------
	/**
	 * @brief		自分が何処かのチームにいるかどうか
	 *
	 * @param		tray	トレイ番号
	 * @param		pos	  位置
	 * @return	所属ならチーム番号 いなければ-1
	 */
	//------------------------------------------------------------------------------------------
  int IsTeamInMe( u32 tray, u32 pos ) const;
  //------------------------------------------------------------------------------------------
  /**
   * @brief		自分が指定のチームにいるかどうか  重複したチームにいることがあるので全チーム検索
   * @param		tray	トレイ番号
   * @param		pos	  位置
   * @param		team	  チーム番号
   * @return	いたらtrue
   */
  //------------------------------------------------------------------------------------------
  int IsTeamInMe( u32 tray, u32 pos , u32 team) const;
  
  //------------------------------------------------------------------------------------------
  /**
   * @brief		ボックスの位置を引数にチームから消す
   * @param		tray	トレイ番号
   * @param		pos	  位置
   */
  //------------------------------------------------------------------------------------------
  void DeleteTeam( u32 tray, u32 pos );
  //------------------------------------------------------------------------------------------
  /**
   * @brief		チームを詰める
   * @param		team チーム番号
   */
  //------------------------------------------------------------------------------------------
  void PackTeam( u32 team );
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チームがロック状態かどうか
	 *
	 * @param		team	チーム番号
	 * @return	ロックしていたらtrue
	 */
	//------------------------------------------------------------------------------------------
  bool  IsTeamLock( u32 team ) const;
	//------------------------------------------------------------------------------------------
	/**
	 * @brief		自分がロック状態かどうか
   * @param		tray	トレイ番号
   * @param		pos	  位置
	 * @return	ロックしていたらtrue
	 */
	//------------------------------------------------------------------------------------------
  bool  IsMeLock( u32 tray, u32 pos ) const;


  //------------------------------------------------------------------------------------------
  /**
   * @brief		チーム名設定
   * @param		str   チーム名
   * @param		team	チーム番号
   */
  //------------------------------------------------------------------------------------------
  void SetTeamName( const gfl2::str::STRCODE * str, u32 team );


  //------------------------------------------------------------------------------------------
  /**
   * @brief		チームポケモンの場所設定
   *
   * @param		team	チーム番号
   * @param		no	  パーティーの順番
   * @param	  pos   上位がＢＯＸの場所番号、下位がＢＯＸでのトレイ位置
   * @return  重複していた位置
   */
  //------------------------------------------------------------------------------------------
  int SetTeamPokePos( u32 team,u32 no, u16 pos );
  
  //------------------------------------------------------------------------------------------
  /**
   * @brief		ロックチームの番号を得る
   * @return		team	チーム番号
   */
  //------------------------------------------------------------------------------------------
 // u8 GetTeamLockNo(void);//全部IsTeamLockへおきかえる必要
  //------------------------------------------------------------------------------------------
  /**
   * @brief		チームがロック状態かどうか設定
   * @param		team	チーム番号
   * @param	  onoff ロックしていたらtrue
   */
  //------------------------------------------------------------------------------------------
  void SetTeamLock( u32 team,bool onoff );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		壁紙設定
	 *
	 * @param		tray	トレイ番号
	 * @param		id		壁紙ID
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetWallPaper( u32 tray, u32 id );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		壁紙取得
	 *
	 * @param		tray	トレイ番号
	 *
	 * @return	壁紙ID
	 */
	//------------------------------------------------------------------------------------------
	u32 GetWallPaper( u32 tray ) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		追加壁紙フラグ設定
	 *
	 * @param		flg		追加壁紙フラグ
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetExWallPaper( u32 flg );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		追加壁紙が使用できるかを調べる
	 *
	 * @param		flg		追加壁紙フラグ
	 *
	 * @retval	"true = 使用可"
	 * @retval	"false = 使用不可"
	 */
	//------------------------------------------------------------------------------------------
	bool CheckExWallPaper( u32 flg ) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		使用可能なトレイ数を設定
	 *
	 * @param		max		トレイ数
	 *
	 * @return	none
	 */
	//------------------------------------------------------------------------------------------
	void SetTrayMax( u32 max );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		使用可能なトレイ数を取得
	 *
	 * @param		none
	 *
	 * @return	トレイ数
	 */
	//------------------------------------------------------------------------------------------
	u32 GetTrayMax(void) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		使用可能なトレイ数を取得
	 *
	 * @param		none
	 *
	 * @return	トレイレベル0-3
	 */
	//------------------------------------------------------------------------------------------
	u32 GetTrayLevel(void) const;

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		カレントトレイを設定
	 *
	 * @param		tray	トレイ番号
	 *
	 * @return	none
	 *
	 * @li	バトルボックスも設定可 ( tray = BATTLE_BOX_TRAY_NUMBER )
	 */
	//------------------------------------------------------------------------------------------
	void SetCurrentTray( u32 tray );

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		カレントトレイを取得
	 *
	 * @param		none
	 *
	 * @return	カレントトレイ
	 *
	 * @li	バトルボックスが設定されている場合があるので注意！
	 * @li	戻り値で直接ボックスのポケモンを参照しないでください
	 */
	//------------------------------------------------------------------------------------------
	u32 GetCurrentTray(void) const;


	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チュートリアルが終わったかどうか
	 * @return	おわっていたらtrue
	 */
	//------------------------------------------------------------------------------------------
//  bool IsTutorialEnd( void );//GF調整要望[367]

	//------------------------------------------------------------------------------------------
	/**
	 * @brief		チュートリアルが終わった
	 */
	//------------------------------------------------------------------------------------------
//  void SetTutorialEnd( void );//GF調整要望[367]

};

GFL_NAMESPACE_END(Savedata)

#endif // __BOX_SAVE_H__
